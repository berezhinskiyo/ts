#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ú–ú–í–ë
"""

import requests
import pandas as pd
import json
from datetime import datetime, timedelta
import os
import time

class MOEXTickDataDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ú–ú–í–ë"""
    
    def __init__(self, output_dir="data/tick_data"):
        self.output_dir = output_dir
        self.base_url = "https://iss.moex.com/iss/"
        os.makedirs(output_dir, exist_ok=True)
    
    def download_candles(self, symbol, days=30):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥ —Ç–∏–∫–æ–≤—ã—Ö)"""
        try:
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            url = f"{self.base_url}engines/stock/markets/shares/boards/TQBR/securities/{symbol}/candles.json"
            params = {
                'from': start_date.strftime('%Y-%m-%d'),
                'till': end_date.strftime('%Y-%m-%d'),
                'interval': 1  # 1 –º–∏–Ω—É—Ç–∞
            }
            
            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                candles = data['candles']['data']
                columns = data['candles']['columns']
                
                if candles:
                    df = pd.DataFrame(candles, columns=columns)
                    df['datetime'] = pd.to_datetime(df['begin'])
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    filename = f"{self.output_dir}/{symbol}_1min_{days}d.csv"
                    df.to_csv(filename, index=False)
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ {filename}")
                    return df
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {symbol}: {e}")
            return None
    
    def download_multiple_symbols(self, symbols, days=30):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        results = {}
        
        for symbol in symbols:
            df = self.download_candles(symbol, days)
            if df is not None:
                results[symbol] = df
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return results

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ú–ú–í–ë
    symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'TATN', 'MGNT', 'MTSS']
    
    downloader = MOEXTickDataDownloader()
    results = downloader.download_multiple_symbols(symbols, days=7)
    
    print(f"\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
