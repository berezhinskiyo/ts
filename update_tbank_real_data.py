#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ T-Bank API –¥–ª—è –ª—É—á—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import json
import os
import pandas as pd
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv('config/environments/.env')

async def update_tbank_data():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ T-Bank API"""
    try:
        from tinkoff.invest import (
            AsyncClient, 
            AssetsRequest, 
            InstrumentType, 
            InstrumentStatus,
            CandleInterval
        )
        
        token = os.getenv('TBANK_TOKEN')
        if not token:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω T-Bank API")
            return
        
        print("üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• T-BANK API")
        print("=" * 50)
        
        async with AsyncClient(token) as client:
            # –õ—É—á—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            target_instruments = [
                {'ticker': 'PIKK', 'type': 'futures', 'description': '–§—å—é—á–µ—Ä—Å PIKK - –ª—É—á—à–∏–π –¥–ª—è –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏'},
                {'ticker': 'IRAO', 'type': 'futures', 'description': '–§—å—é—á–µ—Ä—Å IRAO - –æ—Ç–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'},
                {'ticker': 'SGZH', 'type': 'futures', 'description': '–§—å—é—á–µ—Ä—Å SGZH - —Ö–æ—Ä–æ—à–∏–µ –¥–∞–Ω–Ω—ã–µ'},
                {'ticker': 'GAZP', 'type': 'share', 'description': '–ê–∫—Ü–∏—è –ì–∞–∑–ø—Ä–æ–º - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∞–∫—Ü–∏—è'},
                {'ticker': 'SBER', 'type': 'share', 'description': '–ê–∫—Ü–∏—è –°–±–µ—Ä–±–∞–Ω–∫ - –ª–∏–∫–≤–∏–¥–Ω–∞—è –∞–∫—Ü–∏—è'},
            ]
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            data_dir = 'data/tbank_real'
            os.makedirs(data_dir, exist_ok=True)
            
            updated_instruments = []
            
            for instrument_info in target_instruments:
                ticker = instrument_info['ticker']
                print(f"\nüîç –ò—â–µ–º {ticker} ({instrument_info['description']})...")
                
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    if instrument_info['type'] == 'futures':
                        instrument_type = InstrumentType.INSTRUMENT_TYPE_FUTURES
                    else:
                        instrument_type = InstrumentType.INSTRUMENT_TYPE_SHARE
                    
                    # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                    request = AssetsRequest(
                        instrument_type=instrument_type,
                        instrument_status=InstrumentStatus.INSTRUMENT_STATUS_BASE,
                    )
                    
                    response = await client.instruments.get_assets(request=request)
                    
                    found_instrument = None
                    if response.assets:
                        for asset in response.assets:
                            if asset.instruments:
                                for instrument in asset.instruments:
                                    if instrument.ticker == ticker:
                                        found_instrument = instrument
                                        break
                                if found_instrument:
                                    break
                    
                    if found_instrument:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω {ticker}: {found_instrument.figi}")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                        periods = [
                            (30, "30 –¥–Ω–µ–π", "1M"),
                            (90, "3 –º–µ—Å—è—Ü–∞", "3M"),
                            (365, "1 –≥–æ–¥", "1Y"),
                        ]
                        
                        instrument_data = {
                            'ticker': ticker,
                            'figi': found_instrument.figi,
                            'class_code': found_instrument.class_code,
                            'instrument_type': found_instrument.instrument_type,
                            'description': instrument_info['description'],
                            'periods': {}
                        }
                        
                        for days, period_name, period_code in periods:
                            print(f"  üìä –ó–∞–≥—Ä—É–∂–∞–µ–º {period_name}...")
                            
                            try:
                                end_date = datetime.now()
                                start_date = end_date - timedelta(days=days)
                                
                                # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                candles = await client.market_data.get_candles(
                                    figi=found_instrument.figi,
                                    from_=start_date,
                                    to=end_date,
                                    interval=CandleInterval.CANDLE_INTERVAL_DAY
                                )
                                
                                if candles.candles:
                                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
                                    data = []
                                    for candle in candles.candles:
                                        data.append({
                                            'date': candle.time.date(),
                                            'open': candle.open.units + candle.open.nano / 1e9,
                                            'high': candle.high.units + candle.high.nano / 1e9,
                                            'low': candle.low.units + candle.low.nano / 1e9,
                                            'close': candle.close.units + candle.close.nano / 1e9,
                                            'volume': candle.volume
                                        })
                                    
                                    df = pd.DataFrame(data)
                                    df.set_index('date', inplace=True)
                                    df.sort_index(inplace=True)
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                    filename = f"{ticker}_{period_code}_tbank.csv"
                                    filepath = os.path.join(data_dir, filename)
                                    df.to_csv(filepath)
                                    
                                    instrument_data['periods'][period_code] = {
                                        'days': days,
                                        'candles': len(candles.candles),
                                        'first_date': df.index[0].strftime('%Y-%m-%d'),
                                        'last_date': df.index[-1].strftime('%Y-%m-%d'),
                                        'filename': filename
                                    }
                                    
                                    print(f"    ‚úÖ {len(candles.candles)} —Å–≤–µ—á–µ–π, –ø–µ—Ä–∏–æ–¥: {df.index[0].date()} - {df.index[-1].date()}")
                                else:
                                    print(f"    ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_name}")
                                    
                            except Exception as e:
                                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {period_name}: {e}")
                        
                        updated_instruments.append(instrument_data)
                        
                    else:
                        print(f"‚ùå {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {ticker}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                'timestamp': datetime.now().isoformat(),
                'total_instruments': len(updated_instruments),
                'data_directory': data_dir,
                'instruments': updated_instruments
            }
            
            metadata_file = os.path.join(data_dir, 'metadata.json')
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {metadata_file}")
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
            print(f"\nüìä –°–í–û–î–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
            print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(updated_instruments)}")
            
            for instrument in updated_instruments:
                print(f"\nüéØ {instrument['ticker']} ({instrument['description']}):")
                for period_code, period_data in instrument['periods'].items():
                    print(f"  ‚Ä¢ {period_code}: {period_data['candles']} —Å–≤–µ—á–µ–π ({period_data['first_date']} - {period_data['last_date']})")
            
            return updated_instruments
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    instruments = await update_tbank_data()
    
    if instruments:
        print(f"\nüéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: data/tbank_real/")
    else:
        print(f"\n‚ùå –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨")

if __name__ == "__main__":
    asyncio.run(main())

