#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ .env —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import os
import sys
import argparse
from pathlib import Path

def load_env_file(env_path: str = None, verbose: bool = True) -> bool:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç .env —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π
    
    Args:
        env_path: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
        verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
    
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ .env —Ñ–∞–π–ª—É
    possible_paths = []
    
    if env_path:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
        possible_paths.append(env_path)
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
        possible_paths.extend([
            '.env',                                    # –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            'config/.env',                            # config –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            'config/environments/.env',               # config/environments
            'config/parameters/.env',                 # config/parameters
            os.path.expanduser('~/.trading/.env'),    # –î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            '/etc/trading/.env'                       # –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        ])
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
    env_file = None
    for path in possible_paths:
        if os.path.exists(path):
            env_file = path
            break
    
    if not env_file:
        if verbose:
            print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö:")
            for path in possible_paths:
                print(f"   - {path}")
            print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    try:
        from dotenv import load_dotenv
        load_dotenv(env_file)
        
        if verbose:
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑: {env_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            required_vars = ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHAT_ID']
            missing_vars = []
            
            for var in required_vars:
                if not os.getenv(var):
                    missing_vars.append(var)
            
            if missing_vars:
                print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except ImportError:
        if verbose:
            print("‚ùå python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")
        return False
    except Exception as e:
        if verbose:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")
        return False

def get_env_paths() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ .env —Ñ–∞–π–ª–∞–º"""
    return [
        '.env',
        'config/.env',
        'config/environments/.env',
        'config/parameters/.env',
        os.path.expanduser('~/.trading/.env'),
        '/etc/trading/.env'
    ]

def find_env_files() -> list:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ .env —Ñ–∞–π–ª—ã"""
    existing_files = []
    for path in get_env_paths():
        if os.path.exists(path):
            existing_files.append(path)
    return existing_files

def print_env_status():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å .env —Ñ–∞–π–ª–æ–≤"""
    print("üìÅ –ü–û–ò–°–ö .ENV –§–ê–ô–õ–û–í")
    print("=" * 30)
    
    existing_files = find_env_files()
    
    if existing_files:
        print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ .env —Ñ–∞–π–ª—ã:")
        for file_path in existing_files:
            print(f"   - {file_path}")
    else:
        print("‚ùå .env —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("\nüìù –í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞:")
        for path in get_env_paths():
            print(f"   - {path}")
    
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑—á–∏–∫ .env —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π')
    parser.add_argument(
        '--env-file', 
        type=str,
        help='–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É'
    )
    parser.add_argument(
        '--list',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ .env —Ñ–∞–π–ª—ã'
    )
    parser.add_argument(
        '--quiet',
        action='store_true',
        help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)'
    )
    
    args = parser.parse_args()
    
    if args.list:
        print_env_status()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    success = load_env_file(args.env_file, verbose=not args.quiet)
    
    if not success and not args.quiet:
        print("\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python env_loader.py --env-file path/to/.env")
        print("   python env_loader.py --list")
        print("   python env_loader.py --quiet")

if __name__ == "__main__":
    main()

