#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –±–µ–∑
–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import os
import sys
import json
import time
import logging
import pandas as pd
import numpy as np
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from russian_news_analyzer import RussianNewsAnalyzer
from russian_trading_integration import RussianTradingStrategy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NewsBacktestingComparison:
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –±–µ–∑"""
    
    def __init__(self, symbols: List[str], config_file: str = "russian_news_config.json"):
        self.symbols = symbols
        self.news_analyzer = RussianNewsAnalyzer(config_file)
        self.russian_strategy = RussianTradingStrategy(symbols, config_file)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.results_without_news = {}
        self.results_with_news = {}
        self.comparison_results = {}
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    def load_historical_data(self, data_dir: str = "data/tbank_real") -> Dict[str, pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        historical_data = {}
        
        for symbol in self.symbols:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            possible_files = [
                f"{data_dir}/{symbol}_1Y_tbank.csv",
                f"{data_dir}/{symbol}_3M_tbank.csv", 
                f"{data_dir}/{symbol}_1M_tbank.csv",
                f"data/historical/{symbol}_tbank.csv"
            ]
            
            data_file = None
            for file_path in possible_files:
                if os.path.exists(file_path):
                    data_file = file_path
                    break
            
            if data_file:
                try:
                    df = pd.read_csv(data_file)
                    
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
                    if 'begin' in df.columns:
                        df['begin'] = pd.to_datetime(df['begin'])
                    elif 'date' in df.columns:
                        df['begin'] = pd.to_datetime(df['date'])
                        df = df.rename(columns={'date': 'begin'})
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    required_columns = ['begin', 'open', 'high', 'low', 'close', 'volume']
                    if all(col in df.columns for col in required_columns):
                        historical_data[symbol] = df.sort_values('begin').reset_index(drop=True)
                        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ {required_columns}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return historical_data
    
    def generate_sample_historical_news(self, symbols: List[str], days_back: int = 30) -> Dict[str, List[Dict]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        historical_news = {}
        
        for symbol in symbols:
            news_list = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            for i in range(days_back):
                date = datetime.now() - timedelta(days=i)
                
                # –°–ª—É—á–∞–π–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏
                news_templates = [
                    {
                        'title': f'{symbol}: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∞—Ä—Ç–∞–ª–∞',
                        'content': f'–ö–æ–º–ø–∞–Ω–∏—è {symbol} –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ 15% –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ. –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–≤—ã—à–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã.',
                        'sentiment_score': 0.7,
                        'confidence': 0.8
                    },
                    {
                        'title': f'{symbol}: –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞',
                        'content': f'–ê–∫—Ü–∏–∏ {symbol} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —É—Å—Ç–æ–π—á–∏–≤—É—é –¥–∏–Ω–∞–º–∏–∫—É. –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –ø—Ä–æ—è–≤–ª—è—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å.',
                        'sentiment_score': 0.5,
                        'confidence': 0.6
                    },
                    {
                        'title': f'{symbol}: –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã',
                        'content': f'–ù–∞ —Ñ–æ–Ω–µ —É—Ö—É–¥—à–µ–Ω–∏—è –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∞–∫—Ü–∏–∏ {symbol} –º–æ–≥—É—Ç —Å–Ω–∏–∑–∏—Ç—å—Å—è.',
                        'sentiment_score': -0.6,
                        'confidence': 0.7
                    },
                    {
                        'title': f'{symbol}: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏',
                        'content': f'–¢–æ—Ä–≥–∏ {symbol} –ø—Ä–æ—à–ª–∏ –±–µ–∑ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –≤ –Ω–æ—Ä–º–µ.',
                        'sentiment_score': 0.1,
                        'confidence': 0.4
                    }
                ]
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
                news_template = np.random.choice(news_templates)
                
                news_list.append({
                    'title': news_template['title'],
                    'content': news_template['content'],
                    'published_at': date,
                    'source': 'Test News',
                    'url': f'https://test.com/{symbol}/{i}',
                    'symbol': symbol,
                    'sentiment_score': news_template['sentiment_score'],
                    'confidence': news_template['confidence']
                })
            
            historical_news[symbol] = news_list
        
        return historical_news
    
    def backtest_strategy_without_news(self, historical_data: Dict[str, pd.DataFrame]) -> Dict[str, Any]:
        """–ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–µ–∑ —É—á–µ—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        
        logger.info("üîÑ –ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–ï–ó –Ω–æ–≤–æ—Å—Ç–µ–π...")
        results = {}
        
        for symbol in self.symbols:
            if symbol not in historical_data:
                continue
            
            df = historical_data[symbol]
            trades = []
            equity_history = []
            capital = 100000
            position = 0
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            for i in range(20, len(df)):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 20-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                current_data = df.iloc[:i+1]
                current_price = df['close'].iloc[i]
                current_time = df['begin'].iloc[i]
                
                # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                signal = self.generate_simple_technical_signal(current_data)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                if signal['action'] == 'buy' and position == 0 and signal['confidence'] > 0.5:
                    position = capital / current_price
                    capital = 0
                    trades.append({
                        'type': 'buy',
                        'price': current_price,
                        'time': current_time,
                        'confidence': signal['confidence']
                    })
                elif signal['action'] == 'sell' and position > 0 and signal['confidence'] > 0.5:
                    capital = position * current_price
                    position = 0
                    trades.append({
                        'type': 'sell',
                        'price': current_price,
                        'time': current_time,
                        'confidence': signal['confidence']
                    })
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                current_equity = capital + (position * current_price if position > 0 else 0)
                equity_history.append({
                    'time': current_time,
                    'equity': current_equity,
                    'price': current_price
                })
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            final_equity = capital + (position * df['close'].iloc[-1] if position > 0 else 0)
            total_return = (final_equity - 100000) / 100000 * 100
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            equity_values = [e['equity'] for e in equity_history]
            if equity_values:
                rolling_max = pd.Series(equity_values).expanding().max()
                drawdown = (pd.Series(equity_values) - rolling_max) / rolling_max * 100
                max_drawdown = drawdown.min()
            else:
                max_drawdown = 0.0
            
            results[symbol] = {
                'total_return': total_return,
                'max_drawdown': max_drawdown,
                'total_trades': len(trades),
                'trades': trades,
                'equity_history': equity_history,
                'final_equity': final_equity,
                'strategy_type': 'technical_only'
            }
            
            logger.info(f"‚úÖ {symbol} (–±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π): –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å={total_return:.2f}%, "
                       f"–ü—Ä–æ—Å–∞–¥–∫–∞={max_drawdown:.2f}%, –°–¥–µ–ª–æ–∫={len(trades)}")
        
        return results
    
    async def backtest_strategy_with_news(self, historical_data: Dict[str, pd.DataFrame]) -> Dict[str, Any]:
        """–ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π"""
        
        logger.info("üîÑ –ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –° –Ω–æ–≤–æ—Å—Ç—è–º–∏...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        historical_news = self.generate_sample_historical_news(self.symbols, days_back=30)
        
        results = {}
        
        for symbol in self.symbols:
            if symbol not in historical_data:
                continue
            
            df = historical_data[symbol]
            news = historical_news.get(symbol, [])
            trades = []
            equity_history = []
            capital = 100000
            position = 0
            
            for i in range(20, len(df)):
                current_data = df.iloc[:i+1]
                current_price = df['close'].iloc[i]
                current_time = df['begin'].iloc[i]
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                relevant_news = [
                    n for n in news 
                    if abs((current_time - n['published_at']).total_seconds()) < 24 * 3600
                ]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                if relevant_news:
                    sentiment = self.calculate_news_sentiment(relevant_news)
                else:
                    sentiment = {'sentiment_score': 0.0, 'confidence': 0.0, 'news_count': 0}
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                technical_signal = self.generate_simple_technical_signal(current_data)
                
                # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
                combined_signal = self.combine_signals_with_news(technical_signal, sentiment)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                if combined_signal['action'] == 'buy' and position == 0 and combined_signal['confidence'] > 0.4:
                    position = capital / current_price
                    capital = 0
                    trades.append({
                        'type': 'buy',
                        'price': current_price,
                        'time': current_time,
                        'confidence': combined_signal['confidence'],
                        'sentiment': sentiment['sentiment_score'],
                        'news_count': sentiment['news_count']
                    })
                elif combined_signal['action'] == 'sell' and position > 0 and combined_signal['confidence'] > 0.4:
                    capital = position * current_price
                    position = 0
                    trades.append({
                        'type': 'sell',
                        'price': current_price,
                        'time': current_time,
                        'confidence': combined_signal['confidence'],
                        'sentiment': sentiment['sentiment_score'],
                        'news_count': sentiment['news_count']
                    })
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                current_equity = capital + (position * current_price if position > 0 else 0)
                equity_history.append({
                    'time': current_time,
                    'equity': current_equity,
                    'price': current_price,
                    'sentiment': sentiment['sentiment_score']
                })
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            final_equity = capital + (position * df['close'].iloc[-1] if position > 0 else 0)
            total_return = (final_equity - 100000) / 100000 * 100
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            equity_values = [e['equity'] for e in equity_history]
            if equity_values:
                rolling_max = pd.Series(equity_values).expanding().max()
                drawdown = (pd.Series(equity_values) - rolling_max) / rolling_max * 100
                max_drawdown = drawdown.min()
            else:
                max_drawdown = 0.0
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            buy_trades = [t for t in trades if t['type'] == 'buy']
            sell_trades = [t for t in trades if t['type'] == 'sell']
            
            results[symbol] = {
                'total_return': total_return,
                'max_drawdown': max_drawdown,
                'total_trades': len(trades),
                'buy_trades': len(buy_trades),
                'sell_trades': len(sell_trades),
                'trades': trades,
                'equity_history': equity_history,
                'final_equity': final_equity,
                'avg_sentiment': np.mean([t.get('sentiment', 0) for t in trades]) if trades else 0.0,
                'avg_news_count': np.mean([t.get('news_count', 0) for t in trades]) if trades else 0.0,
                'strategy_type': 'technical_with_news'
            }
            
            logger.info(f"‚úÖ {symbol} (—Å –Ω–æ–≤–æ—Å—Ç—è–º–∏): –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å={total_return:.2f}%, "
                       f"–ü—Ä–æ—Å–∞–¥–∫–∞={max_drawdown:.2f}%, –°–¥–µ–ª–æ–∫={len(trades)}, "
                       f"–°—Ä–µ–¥–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç={results[symbol]['avg_sentiment']:.3f}")
        
        return results
    
    def generate_simple_technical_signal(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        
        if len(df) < 20:
            return {'action': 'hold', 'confidence': 0.0}
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        sma_20 = df['close'].rolling(20).mean().iloc[-1]
        current_price = df['close'].iloc[-1]
        
        # RSI (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        price_changes = df['close'].diff().dropna()
        if len(price_changes) >= 14:
            gains = price_changes.where(price_changes > 0, 0).rolling(14).mean().iloc[-1]
            losses = (-price_changes.where(price_changes < 0, 0)).rolling(14).mean().iloc[-1]
            rsi = 100 - (100 / (1 + gains / losses)) if losses > 0 else 50
        else:
            rsi = 50
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        signal = 0.0
        
        # –°–∏–≥–Ω–∞–ª –ø–æ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π
        if current_price > sma_20 * 1.02:
            signal += 0.3
        elif current_price < sma_20 * 0.98:
            signal -= 0.3
        
        # –°–∏–≥–Ω–∞–ª –ø–æ RSI
        if rsi > 70:
            signal -= 0.2
        elif rsi < 30:
            signal += 0.2
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if signal > 0.3:
            action = 'buy'
            confidence = min(signal, 1.0)
        elif signal < -0.3:
            action = 'sell'
            confidence = min(abs(signal), 1.0)
        else:
            action = 'hold'
            confidence = 0.0
        
        return {
            'action': action,
            'confidence': confidence,
            'signal': signal
        }
    
    def calculate_news_sentiment(self, news_list: List[Dict]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not news_list:
            return {'sentiment_score': 0.0, 'confidence': 0.0, 'news_count': 0}
        
        total_sentiment = 0.0
        total_confidence = 0.0
        weight_sum = 0.0
        
        for news in news_list:
            # –í–∑–≤–µ—à–∏–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            hours_ago = (datetime.now() - news['published_at']).total_seconds() / 3600
            time_weight = max(0.1, 1.0 - hours_ago / (24 * 7))
            
            # –í–∑–≤–µ—à–∏–≤–∞–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_weight = news.get('confidence', 0.5)
            
            # –û–±—â–∏–π –≤–µ—Å
            weight = time_weight * confidence_weight
            
            total_sentiment += news['sentiment_score'] * weight
            total_confidence += confidence_weight * weight
            weight_sum += weight
        
        avg_sentiment = total_sentiment / weight_sum if weight_sum > 0 else 0.0
        avg_confidence = total_confidence / weight_sum if weight_sum > 0 else 0.0
        
        return {
            'sentiment_score': avg_sentiment,
            'confidence': avg_confidence,
            'news_count': len(news_list)
        }
    
    def combine_signals_with_news(self, technical_signal: Dict, sentiment: Dict) -> Dict[str, Any]:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        
        # –í–µ—Å–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        technical_weight = 0.6
        sentiment_weight = 0.4
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        tech_signal = technical_signal.get('signal', 0.0)
        sent_signal = sentiment['sentiment_score']
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
        combined_signal = tech_signal * technical_weight + sent_signal * sentiment_weight
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if combined_signal > 0.2:
            action = 'buy'
            confidence = min(combined_signal, 1.0)
        elif combined_signal < -0.2:
            action = 'sell'
            confidence = min(abs(combined_signal), 1.0)
        else:
            action = 'hold'
            confidence = 0.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_quality_factor = min(sentiment['news_count'] / 3.0, 1.0)
        final_confidence = confidence * (0.7 + 0.3 * news_quality_factor)
        
        return {
            'action': action,
            'confidence': final_confidence,
            'combined_signal': combined_signal
        }
    
    def compare_results(self) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        logger.info("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        comparison = {}
        
        for symbol in self.symbols:
            if symbol in self.results_without_news and symbol in self.results_with_news:
                without_news = self.results_without_news[symbol]
                with_news = self.results_with_news[symbol]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
                return_improvement = with_news['total_return'] - without_news['total_return']
                drawdown_improvement = without_news['max_drawdown'] - with_news['max_drawdown']  # –ú–µ–Ω—å—à–µ –ø—Ä–æ—Å–∞–¥–∫–∞ = –ª—É—á—à–µ
                trades_improvement = with_news['total_trades'] - without_news['total_trades']
                
                comparison[symbol] = {
                    'without_news': {
                        'total_return': without_news['total_return'],
                        'max_drawdown': without_news['max_drawdown'],
                        'total_trades': without_news['total_trades']
                    },
                    'with_news': {
                        'total_return': with_news['total_return'],
                        'max_drawdown': with_news['max_drawdown'],
                        'total_trades': with_news['total_trades'],
                        'avg_sentiment': with_news.get('avg_sentiment', 0.0),
                        'avg_news_count': with_news.get('avg_news_count', 0.0)
                    },
                    'improvements': {
                        'return_improvement': return_improvement,
                        'drawdown_improvement': drawdown_improvement,
                        'trades_improvement': trades_improvement
                    }
                }
        
        return comparison
    
    def generate_comparison_report(self, comparison: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        
        report = []
        report.append("üìä –û–¢–ß–ï–¢ –°–†–ê–í–ù–ï–ù–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ô")
        report.append("=" * 80)
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_symbols = len(comparison)
        positive_return_improvements = sum(1 for c in comparison.values() 
                                         if c['improvements']['return_improvement'] > 0)
        positive_drawdown_improvements = sum(1 for c in comparison.values() 
                                           if c['improvements']['drawdown_improvement'] > 0)
        
        report.append("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"  –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_symbols}")
        report.append(f"  –£–ª—É—á—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {positive_return_improvements}/{total_symbols} "
                     f"({positive_return_improvements/total_symbols*100:.1f}%)")
        report.append(f"  –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏: {positive_drawdown_improvements}/{total_symbols} "
                     f"({positive_drawdown_improvements/total_symbols*100:.1f}%)")
        report.append("")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        report.append("üìä –î–ï–¢–ê–õ–ò –ü–û –°–ò–ú–í–û–õ–ê–ú:")
        report.append("-" * 80)
        
        for symbol, data in comparison.items():
            report.append(f"\n{symbol}:")
            report.append(f"  –ë–ï–ó –Ω–æ–≤–æ—Å—Ç–µ–π:")
            report.append(f"    –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data['without_news']['total_return']:.2f}%")
            report.append(f"    –ü—Ä–æ—Å–∞–¥–∫–∞: {data['without_news']['max_drawdown']:.2f}%")
            report.append(f"    –°–¥–µ–ª–æ–∫: {data['without_news']['total_trades']}")
            
            report.append(f"  –° –Ω–æ–≤–æ—Å—Ç—è–º–∏:")
            report.append(f"    –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data['with_news']['total_return']:.2f}%")
            report.append(f"    –ü—Ä–æ—Å–∞–¥–∫–∞: {data['with_news']['max_drawdown']:.2f}%")
            report.append(f"    –°–¥–µ–ª–æ–∫: {data['with_news']['total_trades']}")
            report.append(f"    –°—Ä–µ–¥–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {data['with_news']['avg_sentiment']:.3f}")
            report.append(f"    –°—Ä–µ–¥–Ω–µ–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {data['with_news']['avg_news_count']:.1f}")
            
            report.append(f"  –£–õ–£–ß–®–ï–ù–ò–Ø:")
            report.append(f"    –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {data['improvements']['return_improvement']:+.2f}%")
            report.append(f"    –ü—Ä–æ—Å–∞–¥–∫–∞: {data['improvements']['drawdown_improvement']:+.2f}%")
            report.append(f"    –°–¥–µ–ª–æ–∫: {data['improvements']['trades_improvement']:+d}")
        
        # –í—ã–≤–æ–¥—ã
        report.append("\n" + "=" * 80)
        report.append("üéØ –í–´–í–û–î–´:")
        
        avg_return_improvement = np.mean([c['improvements']['return_improvement'] 
                                        for c in comparison.values()])
        avg_drawdown_improvement = np.mean([c['improvements']['drawdown_improvement'] 
                                          for c in comparison.values()])
        
        if avg_return_improvement > 0:
            report.append(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —É–ª—É—á—à–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ {avg_return_improvement:.2f}%")
        else:
            report.append(f"‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Å–Ω–∏–∂–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ {abs(avg_return_improvement):.2f}%")
        
        if avg_drawdown_improvement > 0:
            report.append(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ—Å–∞–¥–∫—É –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ {avg_drawdown_improvement:.2f}%")
        else:
            report.append(f"‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–∞–¥–∫—É –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ {abs(avg_drawdown_improvement):.2f}%")
        
        return "\n".join(report)
    
    def save_results(self, results: Dict[str, Any], filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            def convert_datetime(obj):
                if isinstance(obj, datetime):
                    return obj.isoformat()
                elif isinstance(obj, dict):
                    return {k: convert_datetime(v) for k, v in obj.items()}
                elif isinstance(obj, list):
                    return [convert_datetime(item) for item in obj]
                else:
                    return obj
            
            converted_results = convert_datetime(results)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(converted_results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    async def run_full_comparison(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        historical_data = self.load_historical_data()
        
        if not historical_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
            return {}
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        logger.info("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ë–ï–ó –Ω–æ–≤–æ—Å—Ç–µ–π...")
        self.results_without_news = self.backtest_strategy_without_news(historical_data)
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
        logger.info("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –° –Ω–æ–≤–æ—Å—Ç—è–º–∏...")
        self.results_with_news = await self.backtest_strategy_with_news(historical_data)
        
        # 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("\n4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        comparison = self.compare_results()
        
        # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_comparison_report(comparison)
        print("\n" + report)
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = {
            'without_news': self.results_without_news,
            'with_news': self.results_with_news,
            'comparison': comparison,
            'report': report
        }
        
        self.save_results(all_results, 'news_backtesting_results.json')
        
        return all_results
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        await self.news_analyzer.close()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'TATN']
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä
    tester = NewsBacktestingComparison(symbols)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        results = await tester.run_full_comparison()
        
        if results:
            print("\n‚úÖ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ news_backtesting_results.json")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    finally:
        await tester.close()

if __name__ == "__main__":
    asyncio.run(main())
