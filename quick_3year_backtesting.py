#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞ 3 –≥–æ–¥–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –±–µ–∑
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import os
import sys
import json
import time
import logging
import pandas as pd
import numpy as np
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import warnings
from tqdm import tqdm
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class QuickTechnicalIndicators:
    """–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
    
    @staticmethod
    def sma(data: pd.Series, window: int) -> pd.Series:
        return data.rolling(window=window).mean()
    
    @staticmethod
    def rsi(data: pd.Series, window: int = 14) -> pd.Series:
        delta = data.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
        rs = gain / loss
        return 100 - (100 / (1 + rs))

class QuickMLStrategy:
    """–ë—ã—Å—Ç—Ä–∞—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    
    def __init__(self, name: str):
        self.name = name
        self.is_trained = False
        
    def create_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        features = pd.DataFrame(index=df.index)
        
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
        features['close'] = df['close']
        features['volume'] = df['volume']
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        features['sma_5'] = QuickTechnicalIndicators.sma(df['close'], 5)
        features['sma_20'] = QuickTechnicalIndicators.sma(df['close'], 20)
        features['rsi'] = QuickTechnicalIndicators.rsi(df['close'])
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è
        features['price_change'] = df['close'].pct_change()
        features['volume_change'] = df['volume'].pct_change()
        
        return features
    
    def train(self, df: pd.DataFrame):
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
        self.is_trained = True
        logger.info(f"[TRAIN] {self.name}: –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def predict(self, df: pd.DataFrame) -> float:
        """–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        if not self.is_trained or len(df) < 20:
            return 0.0
        
        try:
            features = self.create_features(df)
            current_price = features['close'].iloc[-1]
            sma_20 = features['sma_20'].iloc[-1]
            rsi = features['rsi'].iloc[-1]
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
            if current_price > sma_20 * 1.01 and rsi < 70:
                return 0.02  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            elif current_price < sma_20 * 0.99 and rsi > 30:
                return -0.02  # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            else:
                return 0.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {self.name}: {e}")
            return 0.0

class QuickTechnicalStrategy:
    """–ë—ã—Å—Ç—Ä–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    
    def __init__(self):
        self.name = "Technical"
        
    def generate_signal(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if len(df) < 20:
            return {'action': 'hold', 'confidence': 0.0, 'signal': 0.0}
        
        current_price = df['close'].iloc[-1]
        sma_20 = QuickTechnicalIndicators.sma(df['close'], 20).iloc[-1]
        rsi = QuickTechnicalIndicators.rsi(df['close']).iloc[-1]
        
        signal = 0.0
        confidence = 0.0
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
        if current_price > sma_20 * 1.01 and rsi < 70:
            signal = 0.3
            confidence = 0.6
            action = 'buy'
        elif current_price < sma_20 * 0.99 and rsi > 30:
            signal = -0.3
            confidence = 0.6
            action = 'sell'
        else:
            signal = 0.0
            confidence = 0.0
            action = 'hold'
        
        return {
            'action': action,
            'confidence': confidence,
            'signal': signal
        }

class Quick3YearBacktesting:
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ 3 –≥–æ–¥–∞"""
    
    def __init__(self, data_dir: str = "data/3year_minute_data"):
        self.data_dir = data_dir
        self.symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'TATN', 'MGNT', 'MTSS', 'PIKK', 'IRAO', 'SGZH']
        self.available_symbols = []
        self.strategies = {}
        self.results = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.init_strategies()
        
        logger.info("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ 3 –≥–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def init_strategies(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        self.strategies = {
            'ML': QuickMLStrategy("ML"),
            'Technical': QuickTechnicalStrategy()
        }
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.strategies)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    
    def load_3year_data(self) -> Dict[str, pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ 3-–ª–µ—Ç–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = {}
        
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ 3-–ª–µ—Ç–Ω–∏—Ö –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        for symbol in self.symbols:
            file_path = os.path.join(self.data_dir, f"{symbol}_3year_minute.csv")
            
            if os.path.exists(file_path):
                try:
                    df = pd.read_csv(file_path)
                    
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
                    if 'begin' in df.columns:
                        df['begin'] = pd.to_datetime(df['begin'])
                    elif 'date' in df.columns:
                        df['begin'] = pd.to_datetime(df['date'])
                        df = df.rename(columns={'date': 'begin'})
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    required_columns = ['begin', 'open', 'high', 'low', 'close', 'volume']
                    if all(col in df.columns for col in required_columns):
                        df = df.sort_values('begin').reset_index(drop=True)
                        data[symbol] = df
                        self.available_symbols.append(symbol)
                        logger.info(f"üìä {symbol}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(self.available_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        return data
    
    def generate_3year_news(self, symbol: str, start_date: datetime, end_date: datetime) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ 3 –≥–æ–¥–∞"""
        
        news_templates = [
            {
                'title': f'{symbol}: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                'content': f'–ö–æ–º–ø–∞–Ω–∏—è {symbol} –ø–æ–∫–∞–∑–∞–ª–∞ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
                'sentiment_score': 0.7,
                'confidence': 0.8
            },
            {
                'title': f'{symbol}: –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã',
                'content': f'–ö–æ–º–ø–∞–Ω–∏—è {symbol} —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏.',
                'sentiment_score': -0.6,
                'confidence': 0.7
            },
            {
                'title': f'{symbol}: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                'content': f'–ö–æ–º–ø–∞–Ω–∏—è {symbol} —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.',
                'sentiment_score': 0.1,
                'confidence': 0.4
            }
        ]
        
        news_list = []
        current_date = start_date
        
        while current_date <= end_date:
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å
            if np.random.random() < 0.5:  # 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                template = np.random.choice(news_templates)
                news_list.append({
                    'title': template['title'],
                    'content': template['content'],
                    'published_at': current_date + timedelta(hours=np.random.randint(9, 18)),
                    'source': 'Financial News',
                    'symbol': symbol,
                    'sentiment_score': template['sentiment_score'],
                    'confidence': template['confidence']
                })
            
            current_date += timedelta(days=1)
        
        return news_list
    
    def calculate_news_sentiment(self, news_list: List[Dict]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not news_list:
            return {'sentiment_score': 0.0, 'confidence': 0.0, 'news_count': 0}
        
        total_sentiment = 0.0
        total_confidence = 0.0
        
        for news in news_list:
            total_sentiment += news['sentiment_score']
            total_confidence += news['confidence']
        
        avg_sentiment = total_sentiment / len(news_list)
        avg_confidence = total_confidence / len(news_list)
        
        return {
            'sentiment_score': avg_sentiment,
            'confidence': avg_confidence,
            'news_count': len(news_list)
        }
    
    def backtest_strategy_without_news(self, strategy_name: str, strategy, df: pd.DataFrame, symbol: str) -> Dict[str, Any]:
        """–ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        
        trades = []
        equity_history = []
        capital = 100000
        position = 0
        
        # –û–±—É—á–µ–Ω–∏–µ –¥–ª—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if hasattr(strategy, 'train'):
            train_size = int(len(df) * 0.3)
            train_data = df.iloc[:train_size]
            strategy.train(train_data)
        
        start_idx = int(len(df) * 0.3) if hasattr(strategy, 'train') else 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∂–¥—É—é 100-—é –∑–∞–ø–∏—Å—å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        step = 100
        
        for i in range(start_idx + 20, len(df), step):
            current_data = df.iloc[:i+1]
            current_price = df['close'].iloc[i]
            current_time = df['begin'].iloc[i]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            if hasattr(strategy, 'predict'):
                prediction = strategy.predict(current_data)
                if prediction > 0.01:
                    signal = {'action': 'buy', 'confidence': min(abs(prediction) * 10, 1.0)}
                elif prediction < -0.01:
                    signal = {'action': 'sell', 'confidence': min(abs(prediction) * 10, 1.0)}
                else:
                    signal = {'action': 'hold', 'confidence': 0.0}
            else:
                signal = strategy.generate_signal(current_data)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            if signal['action'] == 'buy' and position == 0 and signal['confidence'] > 0.3:
                position = capital / current_price
                capital = 0
                trades.append({
                    'type': 'buy',
                    'price': current_price,
                    'time': current_time,
                    'confidence': signal['confidence']
                })
            elif signal['action'] == 'sell' and position > 0 and signal['confidence'] > 0.3:
                capital = position * current_price
                position = 0
                trades.append({
                    'type': 'sell',
                    'price': current_price,
                    'time': current_time,
                    'confidence': signal['confidence']
                })
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            current_equity = capital + (position * current_price if position > 0 else 0)
            equity_history.append({
                'time': current_time,
                'equity': current_equity,
                'price': current_price
            })
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_equity = capital + (position * df['close'].iloc[-1] if position > 0 else 0)
        total_return = (final_equity - 100000) / 100000 * 100
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        equity_values = [e['equity'] for e in equity_history]
        if equity_values:
            rolling_max = pd.Series(equity_values).expanding().max()
            drawdown = (pd.Series(equity_values) - rolling_max) / rolling_max * 100
            max_drawdown = drawdown.min()
        else:
            max_drawdown = 0.0
        
        return {
            'total_return': total_return,
            'max_drawdown': max_drawdown,
            'total_trades': len(trades),
            'trades': trades,
            'equity_history': equity_history,
            'final_equity': final_equity,
            'strategy_type': f'{strategy_name}_without_news'
        }
    
    def backtest_strategy_with_news(self, strategy_name: str, strategy, df: pd.DataFrame, symbol: str) -> Dict[str, Any]:
        """–ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        start_date = df['begin'].min()
        end_date = df['begin'].max()
        news = self.generate_3year_news(symbol, start_date, end_date)
        
        trades = []
        equity_history = []
        capital = 100000
        position = 0
        
        # –û–±—É—á–µ–Ω–∏–µ –¥–ª—è ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if hasattr(strategy, 'train'):
            train_size = int(len(df) * 0.3)
            train_data = df.iloc[:train_size]
            strategy.train(train_data)
        
        start_idx = int(len(df) * 0.3) if hasattr(strategy, 'train') else 0
        step = 100
        
        for i in range(start_idx + 20, len(df), step):
            current_data = df.iloc[:i+1]
            current_price = df['close'].iloc[i]
            current_time = df['begin'].iloc[i]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            relevant_news = [
                n for n in news 
                if abs((current_time - n['published_at']).total_seconds()) < 24 * 3600
            ]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            sentiment = self.calculate_news_sentiment(relevant_news)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            if hasattr(strategy, 'predict'):
                prediction = strategy.predict(current_data)
                if prediction > 0.01:
                    base_signal = {'action': 'buy', 'confidence': min(abs(prediction) * 10, 1.0)}
                elif prediction < -0.01:
                    base_signal = {'action': 'sell', 'confidence': min(abs(prediction) * 10, 1.0)}
                else:
                    base_signal = {'action': 'hold', 'confidence': 0.0}
            else:
                base_signal = strategy.generate_signal(current_data)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
            combined_signal = self.combine_signals_with_news(base_signal, sentiment)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            if combined_signal['action'] == 'buy' and position == 0 and combined_signal['confidence'] > 0.25:
                position = capital / current_price
                capital = 0
                trades.append({
                    'type': 'buy',
                    'price': current_price,
                    'time': current_time,
                    'confidence': combined_signal['confidence'],
                    'sentiment': sentiment['sentiment_score'],
                    'news_count': sentiment['news_count']
                })
            elif combined_signal['action'] == 'sell' and position > 0 and combined_signal['confidence'] > 0.25:
                capital = position * current_price
                position = 0
                trades.append({
                    'type': 'sell',
                    'price': current_price,
                    'time': current_time,
                    'confidence': combined_signal['confidence'],
                    'sentiment': sentiment['sentiment_score'],
                    'news_count': sentiment['news_count']
                })
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            current_equity = capital + (position * current_price if position > 0 else 0)
            equity_history.append({
                'time': current_time,
                'equity': current_equity,
                'price': current_price,
                'sentiment': sentiment['sentiment_score']
            })
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_equity = capital + (position * df['close'].iloc[-1] if position > 0 else 0)
        total_return = (final_equity - 100000) / 100000 * 100
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        equity_values = [e['equity'] for e in equity_history]
        if equity_values:
            rolling_max = pd.Series(equity_values).expanding().max()
            drawdown = (pd.Series(equity_values) - rolling_max) / rolling_max * 100
            max_drawdown = drawdown.min()
        else:
            max_drawdown = 0.0
        
        return {
            'total_return': total_return,
            'max_drawdown': max_drawdown,
            'total_trades': len(trades),
            'trades': trades,
            'equity_history': equity_history,
            'final_equity': final_equity,
            'avg_sentiment': np.mean([t.get('sentiment', 0) for t in trades]) if trades else 0.0,
            'avg_news_count': np.mean([t.get('news_count', 0) for t in trades]) if trades else 0.0,
            'strategy_type': f'{strategy_name}_with_news'
        }
    
    def combine_signals_with_news(self, technical_signal: Dict, sentiment: Dict) -> Dict[str, Any]:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        
        # –í–µ—Å–∞
        technical_weight = 0.6
        sentiment_weight = 0.4
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        tech_signal = technical_signal.get('signal', 0.0)
        sent_signal = sentiment['sentiment_score']
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
        combined_signal = tech_signal * technical_weight + sent_signal * sentiment_weight
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        threshold = 0.1
        
        if combined_signal > threshold:
            action = 'buy'
            confidence = min(combined_signal, 1.0)
        elif combined_signal < -threshold:
            action = 'sell'
            confidence = min(abs(combined_signal), 1.0)
        else:
            action = 'hold'
            confidence = 0.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        news_quality_factor = min(sentiment['news_count'] / 2.0, 1.0)
        final_confidence = confidence * (0.7 + 0.3 * news_quality_factor)
        
        return {
            'action': action,
            'confidence': final_confidence,
            'combined_signal': combined_signal
        }
    
    def run_quick_backtesting(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê 3 –ì–û–î–ê")
        logger.info("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self.load_3year_data()
        
        if not data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return {}
        
        results = {}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        for strategy_name, strategy in self.strategies.items():
            logger.info(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy_name}")
            logger.info("-" * 40)
            
            strategy_results = {}
            
            for symbol in self.available_symbols:
                if symbol not in data:
                    continue
                
                logger.info(f"  üîÑ {symbol}...")
                
                df = data[symbol]
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
                result_without_news = self.backtest_strategy_without_news(strategy_name, strategy, df, symbol)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
                result_with_news = self.backtest_strategy_with_news(strategy_name, strategy, df, symbol)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
                return_improvement = result_with_news['total_return'] - result_without_news['total_return']
                drawdown_improvement = result_without_news['max_drawdown'] - result_with_news['max_drawdown']
                trades_improvement = result_with_news['total_trades'] - result_without_news['total_trades']
                
                strategy_results[symbol] = {
                    'without_news': result_without_news,
                    'with_news': result_with_news,
                    'improvements': {
                        'return_improvement': return_improvement,
                        'drawdown_improvement': drawdown_improvement,
                        'trades_improvement': trades_improvement
                    }
                }
                
                logger.info(f"    ‚úÖ {symbol}: –ë–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π={result_without_news['total_return']:.2f}%, "
                           f"–° –Ω–æ–≤–æ—Å—Ç—è–º–∏={result_with_news['total_return']:.2f}%, "
                           f"–£–ª—É—á—à–µ–Ω–∏–µ={return_improvement:+.2f}%")
            
            results[strategy_name] = strategy_results
        
        return results
    
    def generate_quick_report(self, results: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        report = []
        report.append("üìä –ë–´–°–¢–†–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê 3 –ì–û–î–ê")
        report.append("=" * 80)
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_strategies = len(results)
        total_symbols = len(self.available_symbols)
        
        report.append("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {total_strategies}")
        report.append(f"  –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_symbols}")
        report.append(f"  –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 3 –≥–æ–¥–∞ (–º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
        report.append("")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        for strategy_name, strategy_results in results.items():
            report.append(f"üìä –°–¢–†–ê–¢–ï–ì–ò–Ø: {strategy_name}")
            report.append("-" * 60)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            positive_improvements = 0
            total_improvements = 0
            avg_improvement = 0.0
            
            for symbol, data in strategy_results.items():
                improvement = data['improvements']['return_improvement']
                if improvement > 0:
                    positive_improvements += 1
                total_improvements += 1
                avg_improvement += improvement
            
            if total_improvements > 0:
                avg_improvement /= total_improvements
                success_rate = positive_improvements / total_improvements * 100
            else:
                success_rate = 0.0
            
            report.append(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {positive_improvements}/{total_improvements} ({success_rate:.1f}%)")
            report.append(f"  –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {avg_improvement:+.2f}%")
            report.append("")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            for symbol, data in strategy_results.items():
                report.append(f"  {symbol}:")
                report.append(f"    –ë–ï–ó –Ω–æ–≤–æ—Å—Ç–µ–π: {data['without_news']['total_return']:+.2f}% "
                             f"(–ø—Ä–æ—Å–∞–¥–∫–∞: {data['without_news']['max_drawdown']:+.2f}%, "
                             f"—Å–¥–µ–ª–æ–∫: {data['without_news']['total_trades']})")
                report.append(f"    –° –Ω–æ–≤–æ—Å—Ç—è–º–∏: {data['with_news']['total_return']:+.2f}% "
                             f"(–ø—Ä–æ—Å–∞–¥–∫–∞: {data['with_news']['max_drawdown']:+.2f}%, "
                             f"—Å–¥–µ–ª–æ–∫: {data['with_news']['total_trades']})")
                report.append(f"    –£–õ–£–ß–®–ï–ù–ò–ï: {data['improvements']['return_improvement']:+.2f}%")
                report.append("")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        report.append("üéØ –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")
        report.append("=" * 80)
        
        # –õ—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_performance = {}
        for strategy_name, strategy_results in results.items():
            total_improvement = 0.0
            count = 0
            for symbol, data in strategy_results.items():
                total_improvement += data['improvements']['return_improvement']
                count += 1
            if count > 0:
                strategy_performance[strategy_name] = total_improvement / count
        
        if strategy_performance:
            best_strategy = max(strategy_performance.items(), key=lambda x: x[1])
            report.append(f"üèÜ –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy[0]} ({best_strategy[1]:+.2f}% —É–ª—É—á—à–µ–Ω–∏–µ)")
        
        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
        report.append("")
        report.append("üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
        report.append("  - –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —É–ª—É—á—à–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        report.append("  - 3-–ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –¥–∞–µ—Ç –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        report.append("  - –ú–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ç–æ—á–Ω–µ–µ –æ—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç")
        report.append("  - ML –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        return "\n".join(report)
    
    def save_results(self, results: Dict[str, Any], filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            def convert_datetime(obj):
                if isinstance(obj, datetime):
                    return obj.isoformat()
                elif isinstance(obj, dict):
                    return {k: convert_datetime(v) for k, v in obj.items()}
                elif isinstance(obj, list):
                    return [convert_datetime(item) for item in obj]
                else:
                    return obj
            
            converted_results = convert_datetime(results)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(converted_results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = Quick3YearBacktesting()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = tester.run_quick_backtesting()
        
        if results:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = tester.generate_quick_report(results)
            print("\n" + report)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_results = {
                'results': results,
                'report': report,
                'timestamp': datetime.now().isoformat(),
                'period': '3_years',
                'data_type': 'minute_data',
                'test_type': 'quick'
            }
            
            tester.save_results(all_results, 'quick_3year_backtesting_results.json')
            
            print("\n‚úÖ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ 3 –≥–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ quick_3year_backtesting_results.json")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    main()
