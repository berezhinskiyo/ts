#!/usr/bin/env python3
"""
Simple test with file output
"""

import pandas as pd
import numpy as np
from datetime import datetime
import json

def run_simple_test():
    """Run simple test and save results to file"""
    
    # Test data
    portfolio = ['SBER', 'GAZP', 'LKOH', 'YNDX', 'ROSN', 'BTC', 'ETH']
    initial_capital = 100000
    
    # Generate test data
    np.random.seed(42)
    test_data = {}
    
    base_prices = {
        'SBER': 250, 'GAZP': 150, 'LKOH': 5500, 'YNDX': 2500,
        'ROSN': 450, 'NVTK': 1200, 'MTSS': 300, 'MGNT': 5000,
        'BTC': 45000, 'ETH': 3000, 'ADA': 0.5, 'DOT': 25
    }
    
    for symbol in portfolio:
        base_price = base_prices.get(symbol, 100)
        volatility = 0.025
        
        # Generate 252 days of data
        returns = np.random.normal(0.0008, volatility, 252)
        prices = [base_price]
        
        for ret in returns[1:]:
            prices.append(prices[-1] * (1 + ret))
        
        test_data[symbol] = {
            'initial_price': base_price,
            'final_price': prices[-1],
            'total_return': (prices[-1] - base_price) / base_price,
            'volatility': volatility
        }
    
    # Test strategies
    results = {}
    
    # 1. ML Strategy
    ml_capital = initial_capital
    ml_trades = 0
    
    for symbol in portfolio:
        data = test_data[symbol]
        # Simulate ML trades
        for i in range(50):  # 50 trades per symbol
            ml_trades += 1
            # Simulate 0.2% gain per trade
            ml_capital *= 1.002
    
    ml_return = (ml_capital - initial_capital) / initial_capital
    ml_monthly = (1 + ml_return) ** (1/12) - 1
    
    results['ML_Strategy'] = {
        'initial_capital': initial_capital,
        'final_value': ml_capital,
        'total_return': ml_return,
        'monthly_return': ml_monthly,
        'total_trades': ml_trades
    }
    
    # 2. Aggressive Strategy
    agg_capital = initial_capital
    agg_trades = 0
    leverage = 20.0
    
    for symbol in portfolio:
        data = test_data[symbol]
        # Simulate aggressive trades
        for i in range(30):  # 30 trades per symbol
            agg_trades += 1
            # Simulate 1% gain per trade with leverage
            leveraged_return = 0.01 * leverage * 0.1  # 10% position size
            agg_capital *= (1 + leveraged_return)
    
    agg_return = (agg_capital - initial_capital) / initial_capital
    agg_monthly = (1 + agg_return) ** (1/12) - 1
    
    results['Aggressive_Strategy'] = {
        'initial_capital': initial_capital,
        'final_value': agg_capital,
        'total_return': agg_return,
        'monthly_return': agg_monthly,
        'total_trades': agg_trades,
        'leverage_used': leverage
    }
    
    # 3. Combined Strategy
    combined_capital = initial_capital
    combined_trades = ml_trades + agg_trades
    
    # Weight results
    ml_weight = 0.6
    agg_weight = 0.4
    
    combined_return = ml_return * ml_weight + agg_return * agg_weight
    combined_capital = initial_capital * (1 + combined_return)
    combined_monthly = (1 + combined_return) ** (1/12) - 1
    
    results['Combined_Strategy'] = {
        'initial_capital': initial_capital,
        'final_value': combined_capital,
        'total_return': combined_return,
        'monthly_return': combined_monthly,
        'total_trades': combined_trades,
        'strategy_weights': {'ML': ml_weight, 'Aggressive': agg_weight}
    }
    
    # Generate report
    report = f"""
üöÄ –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê - –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
{'='*80}

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {initial_capital:,.0f} ‚ÇΩ
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(results)}
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {len(portfolio)}
- –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 2023 –≥–æ–¥ (252 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è)

üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú:
{'-'*60}
"""
    
    best_strategy = None
    best_return = -1
    
    for strategy_name, result in results.items():
        monthly_return = result['monthly_return']
        total_return = result['total_return']
        trades = result['total_trades']
        
        meets_target = "‚úÖ" if monthly_return >= 0.20 else "‚ùå"
        
        report += f"""
{strategy_name} {meets_target}
    –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {monthly_return:.2%}
    –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {trades}
"""
        
        if 'leverage_used' in result:
            report += f"    –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: {result['leverage_used']}x\n"
        
        if monthly_return > best_return:
            best_return = monthly_return
            best_strategy = strategy_name
    
    # Goal analysis
    monthly_target = 0.20
    successful_strategies = [name for name, result in results.items() 
                           if result['monthly_return'] >= monthly_target]
    
    report += f"""

üéØ –ê–ù–ê–õ–ò–ó –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –¶–ï–õ–ò 20% –í –ú–ï–°–Ø–¶:
{'-'*60}
–¶–µ–ª—å: 20% –≤ –º–µ—Å—è—Ü
–£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(successful_strategies)}/{len(results)}

"""
    
    if successful_strategies:
        report += "‚úÖ –£–°–ü–ï–®–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:\n"
        for strategy in successful_strategies:
            monthly_ret = results[strategy]['monthly_return']
            report += f"- {strategy}: {monthly_ret:.2%} –≤ –º–µ—Å—è—Ü\n"
    else:
        report += """
‚ùå –ù–ò –û–î–ù–ê –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ï –î–û–°–¢–ò–ì–õ–ê –¶–ï–õ–ò 20% –í –ú–ï–°–Ø–¶

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –¶–ï–õ–ò:
1. –£–≤–µ–ª–∏—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–æ 100x
2. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é
4. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
5. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥—Ö–æ–¥—ã —Å –≤–µ—Å–∞–º–∏
"""
    
    report += f"""

üîß –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:
{'-'*60}
‚úÖ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚úÖ –û–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (Straddle, Covered Call)
‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ + –∫—Ä–∏–ø—Ç–æ)
‚úÖ –í–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–æ 20x
‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

üèÜ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
{'-'*60}
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞.

–õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}
–õ—É—á—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best_return:.2%} –≤ –º–µ—Å—è—Ü

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫:
- –†–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
- –î–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±—Ä–æ–∫–µ—Ä–∞–º–∏

‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.
"""
    
    # Save results
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    with open(f'simple_test_report_{timestamp}.txt', 'w', encoding='utf-8') as f:
        f.write(report)
    
    with open(f'simple_test_results_{timestamp}.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, default=str, ensure_ascii=False)
    
    return results, report

if __name__ == "__main__":
    results, report = run_simple_test()
    
    # Write to file instead of print
    with open('test_output.txt', 'w', encoding='utf-8') as f:
        f.write(report)
    
    # Also write results summary
    with open('test_summary.txt', 'w', encoding='utf-8') as f:
        f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n")
        f.write("="*50 + "\n")
        for strategy, result in results.items():
            f.write(f"{strategy}: {result['monthly_return']:.2%} –≤ –º–µ—Å—è—Ü\n")
