#!/usr/bin/env python3
"""
–î–µ–º–æ –≤–µ—Ä—Å–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–æ–±–æ—Ç–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import json
import time
import logging
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
from typing import Dict, List, Optional, Tuple, Any
import warnings
warnings.filterwarnings('ignore')

from sklearn.ensemble import IsolationForest, RandomForestRegressor
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DemoSentimentAnalyzer:
    """–î–µ–º–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        self.positive_words = [
            '—Ä–æ—Å—Ç', '–ø–æ–≤—ã—à–µ–Ω–∏–µ', '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ', '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π', '—Ö–æ—Ä–æ—à–∏–π', '–æ—Ç–ª–∏—á–Ω—ã–π',
            '—É—Å–ø–µ—Ö', '–ø—Ä–∏–±—ã–ª—å', '–¥–æ—Ö–æ–¥', '–≤—ã–∏–≥—Ä—ã—à', '–ø–æ–±–µ–¥–∞', '—É–ª—É—á—à–µ–Ω–∏–µ'
        ]
        self.negative_words = [
            '–ø–∞–¥–µ–Ω–∏–µ', '—Å–Ω–∏–∂–µ–Ω–∏–µ', '—É–º–µ–Ω—å—à–µ–Ω–∏–µ', '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π', '–ø–ª–æ—Ö–æ–π', '—É–±—ã—Ç–æ–∫',
            '–ø–æ—Ç–µ—Ä—è', '–ø—Ä–æ–≤–∞–ª', '–∫—Ä–∏–∑–∏—Å', '–ø—Ä–æ–±–ª–µ–º–∞', '—Ä–∏—Å–∫', '–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
        ]
        logger.info("‚úÖ –î–µ–º–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def analyze_sentiment(self, text: str) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        if not text:
            return 0.0
        
        text_lower = text.lower()
        positive_count = sum(1 for word in self.positive_words if word in text_lower)
        negative_count = sum(1 for word in self.negative_words if word in text_lower)
        
        total_words = len(text.split())
        if total_words == 0:
            return 0.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        sentiment = (positive_count - negative_count) / total_words
        return max(-1.0, min(1.0, sentiment * 10))  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    
    def get_sample_news(self, symbol: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        return [
            {
                'title': f'{symbol} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç –Ω–∞ —Ñ–æ–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤',
                'content': f'–ê–∫—Ü–∏–∏ {symbol} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä—è —É–ª—É—á—à–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ —É—Å–ø–µ—à–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è',
                'sentiment': 0.7
            },
            {
                'title': f'–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–≤—ã—à–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ {symbol}',
                'content': f'–í–µ–¥—É—â–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç —Å–≤–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ {symbol} –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–≤—ã—à–µ–Ω–∏—è, –æ–∂–∏–¥–∞—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–æ—Å—Ç–∞',
                'sentiment': 0.8
            },
            {
                'title': f'–†—ã–Ω–æ–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø–æ {symbol}',
                'content': f'–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã –ø—Ä–æ—è–≤–ª—è—é—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ {symbol} –∏–∑-–∑–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ',
                'sentiment': -0.3
            }
        ]
    
    def calculate_sentiment_score(self, news_list: List[Dict]) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        if not news_list:
            return 0.0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        sentiments = []
        for news in news_list:
            if 'sentiment' in news:
                sentiments.append(news['sentiment'])
            else:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                title_sentiment = self.analyze_sentiment(news.get('title', ''))
                content_sentiment = self.analyze_sentiment(news.get('content', ''))
                combined_sentiment = (title_sentiment * 0.7 + content_sentiment * 0.3)
                sentiments.append(combined_sentiment)
        
        return np.mean(sentiments)

class DemoPatternClassifier:
    """–î–µ–º–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    def __init__(self):
        self.model = None
        self.scaler = StandardScaler()
        self.pattern_types = ['bullish', 'bearish', 'sideways']
        logger.info("‚úÖ –î–µ–º–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_features(self, df: pd.DataFrame) -> np.ndarray:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        features = []
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df = df.copy()
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        df['sma_5'] = df['close'].rolling(5).mean()
        df['sma_20'] = df['close'].rolling(20).mean()
        df['sma_50'] = df['close'].rolling(50).mean()
        
        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # Bollinger Bands
        df['bb_middle'] = df['close'].rolling(20).mean()
        bb_std = df['close'].rolling(20).std()
        df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
        df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
        df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / df['bb_middle']
        
        # Volume indicators
        df['volume_sma'] = df['volume'].rolling(20).mean()
        df['volume_ratio'] = df['volume'] / df['volume_sma']
        
        # Price changes
        df['price_change_1'] = df['close'].pct_change(1)
        df['price_change_5'] = df['close'].pct_change(5)
        df['price_change_20'] = df['close'].pct_change(20)
        
        # Volatility
        df['volatility'] = df['close'].rolling(20).std()
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        feature_columns = [
            'sma_5', 'sma_20', 'sma_50', 'rsi', 'bb_width',
            'volume_ratio', 'price_change_1', 'price_change_5', 
            'price_change_20', 'volatility'
        ]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for col in feature_columns:
            if col in df.columns:
                features.append(df[col].fillna(0).iloc[-1])
        
        return np.array(features)
    
    def train(self, df: pd.DataFrame):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        logger.info("üéØ –û–±—É—á–µ–Ω–∏–µ –¥–µ–º–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        X = []
        y = []
        
        window_size = 20
        
        for i in range(window_size, len(df) - 1):
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            window_df = df.iloc[i-window_size:i+1]
            features = self.create_features(window_df)
            
            if len(features) > 0:
                X.append(features)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—É–¥—É—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
                current_price = df['close'].iloc[i]
                future_price = df['close'].iloc[i+1]
                price_change = (future_price - current_price) / current_price
                
                if price_change > 0.02:  # –†–æ—Å—Ç > 2%
                    y.append(0)  # bullish
                elif price_change < -0.02:  # –ü–∞–¥–µ–Ω–∏–µ > 2%
                    y.append(1)  # bearish
                else:
                    y.append(2)  # sideways
        
        if len(X) < 50:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return
        
        X = np.array(X)
        y = np.array(y)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        X_scaled = self.scaler.fit_transform(X)
        
        # –û–±—É—á–µ–Ω–∏–µ Random Forest
        self.model = RandomForestRegressor(n_estimators=100, random_state=42)
        self.model.fit(X_scaled, y)
        
        logger.info("‚úÖ –î–µ–º–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—É—á–µ–Ω")
    
    def predict_pattern(self, df: pd.DataFrame) -> float:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
        if self.model is None:
            return 0.0
        
        try:
            features = self.create_features(df)
            if len(features) == 0:
                return 0.0
            
            features_scaled = self.scaler.transform([features])
            prediction = self.model.predict(features_scaled)[0]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–∏–≥–Ω–∞–ª: bullish=1, bearish=-1, sideways=0
            if prediction < 0.5:
                return 1.0  # bullish
            elif prediction > 1.5:
                return -1.0  # bearish
            else:
                return 0.0  # sideways
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
            return 0.0

class DemoUnsupervisedAgent:
    """–î–µ–º–æ –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ —É—á–∏—Ç–µ–ª—è"""
    
    def __init__(self):
        self.anomaly_detector = IsolationForest(contamination=0.1, random_state=42)
        self.clusterer = KMeans(n_clusters=5, random_state=42)
        self.pca = PCA(n_components=5)
        self.scaler = StandardScaler()
        self.is_trained = False
        logger.info("‚úÖ –î–µ–º–æ –∞–≥–µ–Ω—Ç –±–µ–∑ —É—á–∏—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def prepare_features(self, df: pd.DataFrame) -> np.ndarray:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        features = []
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df = df.copy()
        df['sma_20'] = df['close'].rolling(20).mean()
        df['rsi'] = self._calculate_rsi(df['close'])
        df['volatility'] = df['close'].rolling(20).std()
        df['volume_ratio'] = df['volume'] / df['volume'].rolling(20).mean()
        df['price_change'] = df['close'].pct_change()
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        feature_cols = ['sma_20', 'rsi', 'volatility', 'volume_ratio', 'price_change']
        for col in feature_cols:
            if col in df.columns:
                features.append(df[col].fillna(0).values)
        
        if features:
            return np.column_stack(features)
        return np.array([])
    
    def _calculate_rsi(self, prices: pd.Series, window: int = 14) -> pd.Series:
        """–†–∞—Å—á–µ—Ç RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window).mean()
        rs = gain / loss
        return 100 - (100 / (1 + rs))
    
    def train(self, df: pd.DataFrame):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–µ–∑ —É—á–∏—Ç–µ–ª—è"""
        logger.info("ü§ñ –û–±—É—á–µ–Ω–∏–µ –¥–µ–º–æ –º–æ–¥–µ–ª–µ–π –±–µ–∑ —É—á–∏—Ç–µ–ª—è...")
        
        features = self.prepare_features(df)
        if len(features) < 100:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ —É—á–∏—Ç–µ–ª—è")
            return
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        features_scaled = self.scaler.fit_transform(features)
        
        # PCA –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        features_pca = self.pca.fit_transform(features_scaled)
        
        # –û–±—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π
        self.anomaly_detector.fit(features_pca)
        
        # –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        self.clusterer.fit(features_pca)
        
        self.is_trained = True
        logger.info("‚úÖ –î–µ–º–æ –º–æ–¥–µ–ª–∏ –±–µ–∑ —É—á–∏—Ç–µ–ª—è –æ–±—É—á–µ–Ω—ã")
    
    def detect_anomalies(self, df: pd.DataFrame) -> bool:
        """–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π"""
        if not self.is_trained:
            return False
        
        features = self.prepare_features(df)
        if len(features) == 0:
            return False
        
        features_scaled = self.scaler.transform(features)
        features_pca = self.pca.transform(features_scaled)
        
        anomalies = self.anomaly_detector.predict(features_pca)
        return len(anomalies) > 0 and anomalies[-1] == -1
    
    def get_market_regime(self, df: pd.DataFrame) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if not self.is_trained:
            return 0
        
        features = self.prepare_features(df)
        if len(features) == 0:
            return 0
        
        features_scaled = self.scaler.transform(features)
        features_pca = self.pca.transform(features_scaled)
        
        cluster = self.clusterer.predict(features_pca)
        return cluster[-1] if len(cluster) > 0 else 0

class AdvancedTradingRobot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç —Å –¥–µ–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self, symbols: List[str], initial_capital: float = 100000):
        self.symbols = symbols
        self.initial_capital = initial_capital
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.sentiment_analyzer = DemoSentimentAnalyzer()
        self.pattern_classifier = DemoPatternClassifier()
        self.unsupervised_agent = DemoUnsupervisedAgent()
        
        # –í–µ—Å–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.sentiment_weight = 0.25
        self.pattern_weight = 0.35
        self.technical_weight = 0.25
        self.anomaly_weight = 0.15
        
        logger.info("ü§ñ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç —Å –¥–µ–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_data(self, symbol: str, days: int = 365) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
        
        base_url = "https://iss.moex.com/iss/"
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        all_data = []
        current_date = start_date
        batch_size = 90
        
        while current_date < end_date:
            batch_end = min(current_date + timedelta(days=batch_size), end_date)
            
            try:
                url = f"{base_url}engines/stock/markets/shares/boards/TQBR/securities/{symbol}/candles.json"
                params = {
                    'from': current_date.strftime('%Y-%m-%d'),
                    'till': batch_end.strftime('%Y-%m-%d'),
                    'interval': 1
                }
                
                response = requests.get(url, params=params, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    candles = data['candles']['data']
                    
                    if candles:
                        df_batch = pd.DataFrame(candles, columns=[
                            'open', 'close', 'high', 'low', 'value', 'volume', 'begin', 'end'
                        ])
                        df_batch['begin'] = pd.to_datetime(df_batch['begin'])
                        all_data.append(df_batch)
                
                current_date = batch_end
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
                current_date = batch_end
        
        if all_data:
            df = pd.concat(all_data, ignore_index=True)
            df = df.sort_values('begin').reset_index(drop=True)
            logger.info(f"‚úÖ {symbol}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            return df
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {symbol}")
            return pd.DataFrame()
    
    def train_models(self, training_data: Dict[str, pd.DataFrame]):
        """–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("üéì –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–º–æ –º–æ–¥–µ–ª–µ–π...")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ —É—á–∏—Ç–µ–ª—è
        all_data = []
        for df in training_data.values():
            all_data.append(df)
        
        if all_data:
            combined_df = pd.concat(all_data, ignore_index=True)
            self.unsupervised_agent.train(combined_df)
        
        # –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol, df in training_data.items():
            if len(df) > 100:
                logger.info(f"üéØ –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è {symbol}...")
                self.pattern_classifier.train(df)
    
    def generate_signal(self, symbol: str, df: pd.DataFrame) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π
            news = self.sentiment_analyzer.get_sample_news(symbol)
            sentiment_score = self.sentiment_analyzer.calculate_sentiment_score(news)
            
            # 2. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            pattern_signal = self.pattern_classifier.predict_pattern(df)
            
            # 3. –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
            anomaly_detected = self.unsupervised_agent.detect_anomalies(df)
            anomaly_signal = 0.5 if anomaly_detected else 0.0
            
            # 4. –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            market_regime = self.unsupervised_agent.get_market_regime(df)
            regime_signal = (market_regime - 2) * 0.2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–æ–∫—Ä—É–≥ 0
            
            # 5. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            technical_signal = self._calculate_technical_signals(df)
            
            # 6. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
            final_signal = (
                sentiment_score * self.sentiment_weight +
                pattern_signal * self.pattern_weight +
                technical_signal * self.technical_weight +
                anomaly_signal * self.anomaly_weight +
                regime_signal * 0.1
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if final_signal > 0.3:
                action = 'buy'
                confidence = min(final_signal, 1.0)
            elif final_signal < -0.3:
                action = 'sell'
                confidence = min(abs(final_signal), 1.0)
            else:
                action = 'hold'
                confidence = 0.0
            
            return {
                'action': action,
                'confidence': confidence,
                'final_signal': final_signal,
                'components': {
                    'sentiment': sentiment_score,
                    'pattern': pattern_signal,
                    'technical': technical_signal,
                    'anomaly': anomaly_signal,
                    'regime': regime_signal
                }
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return {'action': 'hold', 'confidence': 0.0, 'final_signal': 0.0}
    
    def _calculate_technical_signals(self, df: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if len(df) < 20:
            return 0.0
        
        signal = 0.0
        
        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        current_rsi = rsi.iloc[-1]
        
        if current_rsi < 30:
            signal += 0.3  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
        elif current_rsi > 70:
            signal -= 0.3  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
        
        # –¢—Ä–µ–Ω–¥
        sma_20 = df['close'].rolling(20).mean()
        if df['close'].iloc[-1] > sma_20.iloc[-1]:
            signal += 0.2
        else:
            signal -= 0.2
        
        # MACD
        ema_12 = df['close'].ewm(span=12).mean()
        ema_26 = df['close'].ewm(span=26).mean()
        macd = ema_12 - ema_26
        signal_line = macd.ewm(span=9).mean()
        
        if macd.iloc[-1] > signal_line.iloc[-1] and macd.iloc[-2] <= signal_line.iloc[-2]:
            signal += 0.2  # –ó–æ–ª–æ—Ç–æ–π –∫—Ä–µ—Å—Ç
        elif macd.iloc[-1] < signal_line.iloc[-1] and macd.iloc[-2] >= signal_line.iloc[-2]:
            signal -= 0.2  # –ú–µ—Ä—Ç–≤—ã–π –∫—Ä–µ—Å—Ç
        
        return signal
    
    def backtest(self, test_data: Dict[str, pd.DataFrame]) -> Dict[str, Any]:
        """–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        logger.info("üìä –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
        
        results = {}
        
        for symbol, df in test_data.items():
            capital = self.initial_capital
            position = 0
            trades = []
            equity_history = []
            
            for i in range(60, len(df)):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 60-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                current_data = df.iloc[:i+1]
                current_price = df['close'].iloc[i]
                
                signal = self.generate_signal(symbol, current_data)
                
                # –¢–æ—Ä–≥–æ–≤–ª—è
                if signal['action'] == 'buy' and position == 0 and signal['confidence'] > 0.4:
                    position = capital / current_price
                    capital = 0
                    trades.append({
                        'type': 'buy',
                        'price': current_price,
                        'time': df['begin'].iloc[i],
                        'confidence': signal['confidence']
                    })
                elif signal['action'] == 'sell' and position > 0 and signal['confidence'] > 0.4:
                    capital = position * current_price
                    position = 0
                    trades.append({
                        'type': 'sell',
                        'price': current_price,
                        'time': df['begin'].iloc[i],
                        'confidence': signal['confidence']
                    })
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º equity
                current_equity = capital + (position * current_price if position > 0 else 0)
                equity_history.append({
                    'time': df['begin'].iloc[i],
                    'equity': current_equity,
                    'price': current_price
                })
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            if position > 0:
                final_price = df['close'].iloc[-1]
                capital = position * final_price
                trades.append({
                    'type': 'sell',
                    'price': final_price,
                    'time': df['begin'].iloc[-1],
                    'confidence': 0.0
                })
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            final_equity = capital
            total_return = (final_equity - self.initial_capital) / self.initial_capital * 100
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            equity_series = pd.Series([h['equity'] for h in equity_history])
            rolling_max = equity_series.expanding().max()
            drawdown = (equity_series - rolling_max) / rolling_max * 100
            max_drawdown = drawdown.min()
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            returns = equity_series.pct_change().dropna()
            volatility = returns.std() * np.sqrt(252 * 24 * 60) * 100
            
            # Sharpe ratio
            risk_free_rate = 0.05
            excess_returns = returns - risk_free_rate / (252 * 24 * 60)
            sharpe_ratio = excess_returns.mean() / returns.std() * np.sqrt(252 * 24 * 60) if returns.std() > 0 else 0
            
            # Win rate
            if len(trades) >= 2:
                buy_trades = [t for t in trades if t['type'] == 'buy']
                sell_trades = [t for t in trades if t['type'] == 'sell']
                
                if len(buy_trades) > 0 and len(sell_trades) > 0:
                    profitable_trades = 0
                    total_trades = min(len(buy_trades), len(sell_trades))
                    
                    for i in range(total_trades):
                        if i < len(sell_trades):
                            profit = (sell_trades[i]['price'] - buy_trades[i]['price']) / buy_trades[i]['price']
                            if profit > 0:
                                profitable_trades += 1
                    
                    win_rate = (profitable_trades / total_trades) * 100 if total_trades > 0 else 0
                else:
                    win_rate = 0
            else:
                win_rate = 0
            
            results[symbol] = {
                'total_return': total_return,
                'max_drawdown': max_drawdown,
                'volatility': volatility,
                'sharpe_ratio': sharpe_ratio,
                'win_rate': win_rate,
                'total_trades': len(trades),
                'trades': trades,
                'equity_history': equity_history
            }
            
            logger.info(f"‚úÖ {symbol}: –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å={total_return:.2f}%, –ü—Ä–æ—Å–∞–¥–∫–∞={max_drawdown:.2f}%, Sharpe={sharpe_ratio:.2f}, Win Rate={win_rate:.1f}%")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –î–ï–ú–û –ü–†–û–î–í–ò–ù–£–¢–´–• –¢–û–†–ì–û–í–´–• –†–û–ë–û–¢–û–í")
    logger.info("=" * 60)
    
    symbols = ['GAZP', 'SBER', 'PIKK', 'IRAO', 'SGZH']
    training_days = 365
    test_days = 90
    
    robot = AdvancedTradingRobot(symbols)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    logger.info("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
    all_data = {}
    
    for symbol in symbols:
        df = robot.load_data(symbol, training_days + test_days)
        if not df.empty:
            all_data[symbol] = df
    
    if not all_data:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    training_data = {}
    test_data = {}
    
    for symbol, df in all_data.items():
        split_point = int(len(df) * (training_days / (training_days + test_days)))
        training_data[symbol] = df.iloc[:split_point]
        test_data[symbol] = df.iloc[split_point:]
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    robot.train_models(training_data)
    
    # –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
    results = robot.backtest(test_data)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open('demo_advanced_results.json', 'w', encoding='utf-8') as f:
        def clean_for_json(obj):
            if isinstance(obj, dict):
                return {k: clean_for_json(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [clean_for_json(item) for item in obj]
            elif isinstance(obj, np.integer):
                return int(obj)
            elif isinstance(obj, np.floating):
                return float(obj)
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            elif hasattr(obj, 'isoformat'):
                return obj.isoformat()
            else:
                return obj
        
        clean_results = clean_for_json(results)
        json.dump(clean_results, f, ensure_ascii=False, indent=2)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û –ü–†–û–î–í–ò–ù–£–¢–´–• –†–û–ë–û–¢–û–í:")
    logger.info("=" * 60)
    
    summary_data = []
    for symbol, result in results.items():
        summary_data.append({
            'Symbol': symbol,
            'Return': f"{result['total_return']:.2f}%",
            'Drawdown': f"{result['max_drawdown']:.2f}%",
            'Sharpe': f"{result['sharpe_ratio']:.2f}",
            'Win_Rate': f"{result['win_rate']:.1f}%",
            'Trades': result['total_trades']
        })
        
        logger.info(f"{symbol}:")
        logger.info(f"  üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result['total_return']:.2f}%")
        logger.info(f"  üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {result['max_drawdown']:.2f}%")
        logger.info(f"  üìä Sharpe ratio: {result['sharpe_ratio']:.2f}")
        logger.info(f"  üéØ Win rate: {result['win_rate']:.1f}%")
        logger.info(f"  üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {result['total_trades']}")
        logger.info("")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    results_df = pd.DataFrame(summary_data)
    results_df.to_csv('demo_advanced_summary.csv', index=False)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    returns = [r['total_return'] for r in results.values()]
    drawdowns = [r['max_drawdown'] for r in results.values()]
    sharpe_ratios = [r['sharpe_ratio'] for r in results.values()]
    win_rates = [r['win_rate'] for r in results.values()]
    
    logger.info("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    logger.info(f"  –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {np.mean(returns):.2f}%")
    logger.info(f"  –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Å–∞–¥–∫–∞: {np.mean(drawdowns):.2f}%")
    logger.info(f"  –°—Ä–µ–¥–Ω–∏–π Sharpe: {np.mean(sharpe_ratios):.2f}")
    logger.info(f"  –°—Ä–µ–¥–Ω–∏–π Win Rate: {np.mean(win_rates):.1f}%")
    
    logger.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    logger.info(f"  üìÑ –î–µ—Ç–∞–ª–∏: demo_advanced_results.json")
    logger.info(f"  üìÑ –°–≤–æ–¥–∫–∞: demo_advanced_summary.csv")
    
    logger.info("\n‚úÖ –î–ï–ú–û –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()
