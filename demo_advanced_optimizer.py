#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple
import logging
import json
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

# Import from advanced optimizer
from advanced_portfolio_optimizer import (
    AdvancedPortfolioOptimizer, RiskLevel, CapitalTier, 
    CommissionStructure, RiskProfiler
)

logger = logging.getLogger(__name__)

def create_demo_strategies() -> Dict:
    """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    
    demo_strategies = {
        'Conservative_Bonds': {
            'monthly_return': 0.005,  # 0.5% –≤ –º–µ—Å—è—Ü
            'volatility': 0.03,
            'max_drawdown': -0.02,
            'sharpe_ratio': 1.2,
            'total_trades': 50,
            'win_rate': 0.75
        },
        'Dividend_Stocks': {
            'monthly_return': 0.008,  # 0.8% –≤ –º–µ—Å—è—Ü
            'volatility': 0.08,
            'max_drawdown': -0.05,
            'sharpe_ratio': 0.9,
            'total_trades': 30,
            'win_rate': 0.65
        },
        'Balanced_Portfolio': {
            'monthly_return': 0.012,  # 1.2% –≤ –º–µ—Å—è—Ü
            'volatility': 0.12,
            'max_drawdown': -0.08,
            'sharpe_ratio': 0.8,
            'total_trades': 40,
            'win_rate': 0.60
        },
        'Growth_Stocks': {
            'monthly_return': 0.018,  # 1.8% –≤ –º–µ—Å—è—Ü
            'volatility': 0.18,
            'max_drawdown': -0.12,
            'sharpe_ratio': 0.7,
            'total_trades': 60,
            'win_rate': 0.58
        },
        'Momentum_Trading': {
            'monthly_return': 0.025,  # 2.5% –≤ –º–µ—Å—è—Ü
            'volatility': 0.25,
            'max_drawdown': -0.18,
            'sharpe_ratio': 0.6,
            'total_trades': 100,
            'win_rate': 0.55
        },
        'Swing_Trading': {
            'monthly_return': 0.030,  # 3.0% –≤ –º–µ—Å—è—Ü
            'volatility': 0.30,
            'max_drawdown': -0.22,
            'sharpe_ratio': 0.5,
            'total_trades': 120,
            'win_rate': 0.52
        },
        'High_Frequency': {
            'monthly_return': 0.040,  # 4.0% –≤ –º–µ—Å—è—Ü
            'volatility': 0.35,
            'max_drawdown': -0.25,
            'sharpe_ratio': 0.4,
            'total_trades': 200,
            'win_rate': 0.50
        },
        'Crypto_Trading': {
            'monthly_return': 0.055,  # 5.5% –≤ –º–µ—Å—è—Ü
            'volatility': 0.45,
            'max_drawdown': -0.35,
            'sharpe_ratio': 0.35,
            'total_trades': 150,
            'win_rate': 0.48
        },
        'Options_Strategy': {
            'monthly_return': 0.070,  # 7.0% –≤ –º–µ—Å—è—Ü
            'volatility': 0.50,
            'max_drawdown': -0.40,
            'sharpe_ratio': 0.3,
            'total_trades': 80,
            'win_rate': 0.45
        },
        'Leveraged_ETF': {
            'monthly_return': 0.085,  # 8.5% –≤ –º–µ—Å—è—Ü
            'volatility': 0.60,
            'max_drawdown': -0.45,
            'sharpe_ratio': 0.25,
            'total_trades': 60,
            'win_rate': 0.42
        },
        'Forex_Scalping': {
            'monthly_return': 0.100,  # 10.0% –≤ –º–µ—Å—è—Ü
            'volatility': 0.70,
            'max_drawdown': -0.50,
            'sharpe_ratio': 0.2,
            'total_trades': 300,
            'win_rate': 0.40
        },
        'Arbitrage_Bot': {
            'monthly_return': 0.015,  # 1.5% –≤ –º–µ—Å—è—Ü
            'volatility': 0.05,
            'max_drawdown': -0.03,
            'sharpe_ratio': 1.5,
            'total_trades': 500,
            'win_rate': 0.85
        }
    }
    
    return demo_strategies

def demonstrate_commission_impact():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏"""
    
    print("\n" + "="*80)
    print("üìä –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø –†–ê–ó–ú–ï–†–ê –ö–ê–ü–ò–¢–ê–õ–ê –ù–ê –ö–û–ú–ò–°–°–ò–ò")
    print("="*80)
    
    capital_levels = [
        (50_000, "–ú–∞–ª—ã–π –∫–∞–ø–∏—Ç–∞–ª"),
        (250_000, "–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª"),
        (750_000, "–°—Ä–µ–¥–Ω–∏–π –∫–∞–ø–∏—Ç–∞–ª"),
        (2_500_000, "–ö—Ä—É–ø–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª"),
        (15_000_000, "–ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π")
    ]
    
    for capital, description in capital_levels:
        commission_structure = CommissionStructure(capital)
        
        # –†–∞—Å—á–µ—Ç –º–µ—Å—è—á–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –¥–ª—è —Ç–∏–ø–∏—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        monthly_trades = 50
        avg_trade_size = capital * 0.05  # 5% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        
        trade_commission = commission_structure.calculate_trade_cost(avg_trade_size, monthly_trades)
        monthly_fee = commission_structure.get_monthly_fee()
        total_monthly_cost = trade_commission + monthly_fee
        
        cost_percentage = (total_monthly_cost / capital) * 100
        
        print(f"\n{description:20s} ({capital:>10,.0f} ‚ÇΩ):")
        print(f"  –¢–∞—Ä–∏—Ñ: {commission_structure.tier.value}")
        print(f"  –°—Ç–∞–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏: {commission_structure.get_commission_rate():.3%}")
        print(f"  –ú–µ—Å—è—á–Ω–∞—è –ø–ª–∞—Ç–∞: {monthly_fee:>8,.0f} ‚ÇΩ")
        print(f"  –¢–æ—Ä–≥–æ–≤—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏: {trade_commission:>8,.0f} ‚ÇΩ")
        print(f"  –û–±—â–∏–µ –∏–∑–¥–µ—Ä–∂–∫–∏: {total_monthly_cost:>8,.0f} ‚ÇΩ ({cost_percentage:.3f}%)")

def demonstrate_risk_profiles():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —Ä–∏—Å–∫–∞"""
    
    print("\n" + "="*80)
    print("‚öñÔ∏è –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–ï–ô –†–ò–°–ö–ê")
    print("="*80)
    
    risk_levels = [
        (RiskLevel.CONSERVATIVE, 1_000_000),
        (RiskLevel.MODERATE, 1_000_000),
        (RiskLevel.AGGRESSIVE, 1_000_000),
        (RiskLevel.SPECULATIVE, 1_000_000)
    ]
    
    risk_names = {
        RiskLevel.CONSERVATIVE: "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π",
        RiskLevel.MODERATE: "–£–º–µ—Ä–µ–Ω–Ω—ã–π",
        RiskLevel.AGGRESSIVE: "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π",
        RiskLevel.SPECULATIVE: "–°–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ã–π"
    }
    
    for risk_level, capital in risk_levels:
        profiler = RiskProfiler(risk_level, capital)
        params = profiler.risk_params
        
        print(f"\n{risk_names[risk_level]:15s} –ø—Ä–æ—Ñ–∏–ª—å:")
        print(f"  –¶–µ–ª–µ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {params['expected_return_range'][0]:.1%} - {params['expected_return_range'][1]:.1%} –≤ –º–µ—Å—è—Ü")
        print(f"  –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {params['max_drawdown']:.1%}")
        print(f"  –ú–∞–∫—Å. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {params['max_volatility']:.1%}")
        print(f"  –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏—è: {params['max_single_position']:.1%}")
        print(f"  –ú–∏–Ω. –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {params['min_diversification']} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print(f"  –ü–ª–µ—á–æ: –¥–æ {params['leverage_limit']:.1f}x")

def run_comprehensive_demo():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –ü–û–†–¢–§–ï–õ–¨–ù–û–ì–û –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê")
    print("="*80)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π
    demonstrate_commission_impact()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ —Ä–∏—Å–∫–∞
    demonstrate_risk_profiles()
    
    # –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    demo_strategies = create_demo_strategies()
    
    print(f"\nüìä –°–û–ó–î–ê–ù–ù–´–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò: {len(demo_strategies)}")
    print("-" * 80)
    
    for name, metrics in demo_strategies.items():
        print(f"{name:20s}: {metrics['monthly_return']:.1%}/–º–µ—Å, "
              f"DD: {metrics['max_drawdown']:.1%}, "
              f"Sharpe: {metrics['sharpe_ratio']:.2f}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    test_scenarios = [
        {
            'capital': 100_000,
            'risk_level': RiskLevel.CONSERVATIVE,
            'target_return': 0.01,  # 1% –≤ –º–µ—Å—è—Ü
            'description': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, –Ω–µ–±–æ–ª—å—à–æ–π –∫–∞–ø–∏—Ç–∞–ª'
        },
        {
            'capital': 1_000_000,
            'risk_level': RiskLevel.MODERATE,
            'target_return': 0.03,  # 3% –≤ –º–µ—Å—è—Ü
            'description': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, —Å—Ä–µ–¥–Ω–∏–π –∫–∞–ø–∏—Ç–∞–ª'
        },
        {
            'capital': 5_000_000,
            'risk_level': RiskLevel.AGGRESSIVE,
            'target_return': 0.06,  # 6% –≤ –º–µ—Å—è—Ü
            'description': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, –∫—Ä—É–ø–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª'
        },
        {
            'capital': 500_000,
            'risk_level': RiskLevel.SPECULATIVE,
            'target_return': 0.15,  # 15% –≤ –º–µ—Å—è—Ü
            'description': '–°–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä, –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∏—á—å 15% –≤ –º–µ—Å—è—Ü'
        }
    ]
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\n{'='*80}")
        print(f"–°–¶–ï–ù–ê–†–ò–ô {i}: {scenario['description']}")
        print(f"{'='*80}")
        
        # –°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer = AdvancedPortfolioOptimizer(
            capital_amount=scenario['capital'],
            risk_level=scenario['risk_level'],
            target_return=scenario['target_return']
        )
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        optimizer.load_strategy_results(demo_strategies)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        results = optimizer.optimize_portfolio_advanced(['risk_adjusted'])
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results.get('success', False) and results['optimization_results'].get('risk_adjusted', {}).get('success', False):
            best_result = results['optimization_results']['risk_adjusted']
            performance = best_result['performance']
            
            print(f"\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê:")
            print(f"   –ß–∏—Å—Ç–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {performance['monthly_return']:.2%} –≤ –º–µ—Å—è—Ü")
            print(f"   –¶–µ–ª–µ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {scenario['target_return']:.2%} –≤ –º–µ—Å—è—Ü")
            
            target_met = "‚úÖ –î–ê" if performance['monthly_return'] >= scenario['target_return'] else "‚ùå –ù–ï–¢"
            print(f"   –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: {target_met}")
            
            print(f"   –ò–∑–¥–µ—Ä–∂–∫–∏: {performance['total_costs']:.3%} –≤ –º–µ—Å—è—Ü")
            print(f"   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {performance['max_drawdown']:.2%}")
            print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {performance['sharpe_ratio']:.3f}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-3 —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
            sorted_weights = sorted(best_result['weights'].items(), key=lambda x: x[1], reverse=True)
            print(f"\n   –¢–æ–ø-3 —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ:")
            for strategy, weight in sorted_weights[:3]:
                if weight > 0.01:
                    allocation = scenario['capital'] * weight
                    print(f"     - {strategy}: {weight:.1%} ({allocation:,.0f} ‚ÇΩ)")
            
            # –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞
            if performance['monthly_return'] > 0:
                print(f"\n   –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞:")
                for months in [6, 12, 24]:
                    future_value = scenario['capital'] * (1 + performance['monthly_return']) ** months
                    profit = future_value - scenario['capital']
                    print(f"     –ß–µ—Ä–µ–∑ {months:2d} –º–µ—Å.: {future_value:>10,.0f} ‚ÇΩ (–ø—Ä–∏–±—ã–ª—å: {profit:>8,.0f} ‚ÇΩ)")
            
        else:
            print(f"\n‚ùå –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {results.get('error', 'Unknown error')}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            if scenario['target_return'] > 0.10:  # –ï—Å–ª–∏ —Ü–µ–ª—å –±–æ–ª—å—à–µ 10% –≤ –º–µ—Å—è—Ü
                print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                print(f"   - –¶–µ–ª—å {scenario['target_return']:.1%} –≤ –º–µ—Å—è—Ü –æ—á–µ–Ω—å –∞–º–±–∏—Ü–∏–æ–∑–Ω–∞")
                print(f"   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ 3-5% –≤ –º–µ—Å—è—Ü")
                print(f"   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)")
                print(f"   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–ª–∏ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã")
    
    # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
    print(f"\n{'='*80}")
    print("üìã –û–ë–©–ò–ï –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("="*80)
    
    print("""
‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´ –£–°–ü–ï–®–ù–û–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:

1. üí∞ –†–ê–ó–ú–ï–† –ö–ê–ü–ò–¢–ê–õ–ê:
   - –ë–æ–ª—å—à–µ –∫–∞–ø–∏—Ç–∞–ª = –º–µ–Ω—å—à–µ –∫–æ–º–∏—Å—Å–∏–∏
   - –û—Ç 2–ú ‚ÇΩ - –¥–æ—Å—Ç—É–ø –∫ –ª—É—á—à–∏–º —Ç–∞—Ä–∏—Ñ–∞–º
   - –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –æ—Ç 10–ú ‚ÇΩ

2. ‚öñÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:
   - –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: 0.5-2% –≤ –º–µ—Å—è—Ü, –Ω–∏–∑–∫–∏–µ —Ä–∏—Å–∫–∏
   - –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: 2-5% –≤ –º–µ—Å—è—Ü, —Å—Ä–µ–¥–Ω–∏–µ —Ä–∏—Å–∫–∏  
   - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: 5-10% –≤ –º–µ—Å—è—Ü, –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏

3. üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –¶–ï–õ–ò:
   - 20% –≤ –º–µ—Å—è—Ü —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤
   - –õ—É—á—à–µ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ 3-8% –≤ –º–µ—Å—è—Ü —Å—Ç–∞–±–∏–ª—å–Ω–æ
   - –†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å

4. üíº –î–ò–í–ï–†–°–ò–§–ò–ö–ê–¶–ò–Ø:
   - –ú–∏–Ω–∏–º—É–º 4-8 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
   - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
   - –†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞

‚ö†Ô∏è –í–ê–ñ–ù–û –ü–û–ú–ù–ò–¢–¨:
- –í—ã—Å–æ–∫–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ = –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏
- –ö–æ–º–∏—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –º–∞–ª—ã—Ö —Å—É–º–º–∞—Ö –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –°—Ç—Ä–æ–≥–∏–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
""")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    run_comprehensive_demo()