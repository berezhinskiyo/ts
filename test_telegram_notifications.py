#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""

import asyncio
import os
import sys
import argparse
from datetime import datetime
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

from telegram_notifications import TradingNotifier, TradeNotification, PortfolioUpdate, AlertNotification

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_telegram_notifications():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    logger.info("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        logger.info("üìù –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        logger.info("   TELEGRAM_BOT_TOKEN=your_bot_token")
        logger.info("   TELEGRAM_CHAT_ID=your_chat_id")
        return False
    
    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–∞–π–¥–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç–µ–ª—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    notifier = TradingNotifier(bot_token=bot_token, chat_id=chat_id)
    
    try:
        # –¢–µ—Å—Ç 1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        logger.info("\nüìä –¢–µ—Å—Ç 1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ")
        await notifier.notify_trade(
            symbol="GAZP",
            action="BUY",
            quantity=100,
            price=150.50,
            strategy="ARIMA",
            confidence=0.85
        )
        
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Å –ø—Ä–∏–±—ã–ª—å—é
        logger.info("\nüí∞ –¢–µ—Å—Ç 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Å –ø—Ä–∏–±—ã–ª—å—é")
        await notifier.notify_trade(
            symbol="GAZP",
            action="SELL",
            quantity=100,
            price=152.30,
            strategy="ARIMA",
            pnl=180.0,
            reason="TAKE_PROFIT"
        )
        
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ
        logger.info("\nüõë –¢–µ—Å—Ç 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ")
        await notifier.notify_trade(
            symbol="SBER",
            action="SELL",
            quantity=50,
            price=295.20,
            strategy="LSTM",
            pnl=-150.0,
            reason="STOP_LOSS"
        )
        
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        logger.info("\nüìà –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        await notifier.notify_portfolio_update(
            total_value=105000,
            total_pnl=5000,
            positions_count=3,
            daily_pnl=180.0
        )
        
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 5: –ê–ª–µ—Ä—Ç –æ —Ä–∏—Å–∫–µ
        logger.info("\n‚ö†Ô∏è –¢–µ—Å—Ç 5: –ê–ª–µ—Ä—Ç –æ —Ä–∏—Å–∫–µ")
        await notifier.notify_alert(
            alert_type="RISK",
            title="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∏—Å–∫–∞",
            message="–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15%. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π.",
            severity="HIGH"
        )
        
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç
        logger.info("\n‚ÑπÔ∏è –¢–µ—Å—Ç 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç")
        await notifier.notify_alert(
            alert_type="INFO",
            title="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏",
            message="–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã. –î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: +2.1%",
            severity="INFO"
        )
        
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 7: –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
        logger.info("\nüìä –¢–µ—Å—Ç 7: –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞")
        await notifier.send_daily_summary()
        
        logger.info("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

async def test_rate_limiting():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    
    logger.info("\nüö¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –°–ö–û–†–û–°–¢–ò")
    logger.info("=" * 40)
    
    notifier = TradingNotifier(bot_token=os.getenv('TELEGRAM_BOT_TOKEN'), chat_id=os.getenv('TELEGRAM_CHAT_ID'))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—ã—Å—Ç—Ä–æ
    for i in range(15):
        await notifier.notify_trade(
            symbol=f"TEST{i}",
            action="BUY",
            quantity=10,
            price=100.0,
            strategy="TEST"
        )
        await asyncio.sleep(0.1)  # –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    
    logger.info("‚úÖ –¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

async def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    logger.info("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    logger.info("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç–µ–ª—å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    notifier = TradingNotifier(bot_token="invalid_token", chat_id="invalid_chat")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    result = await notifier.notify_trade(
        symbol="TEST",
        action="BUY",
        quantity=10,
        price=100.0,
        strategy="TEST"
    )
    
    if not result:
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def print_setup_instructions():
    """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    
    print("\n" + "="*60)
    print("üì± –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("="*60)
    print()
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram:")
    print("   - –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram")
    print("   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
    print("   - –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
    print("   - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
    print()
    print("2. –ü–æ–ª—É—á–∏—Ç–µ Chat ID:")
    print("   - –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–º—É –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://api.telegram.org/bot<YOUR_BOT_TOKEN>/getUpdates")
    print("   - –ù–∞–π–¥–∏—Ç–µ 'chat':{'id': <YOUR_CHAT_ID>}")
    print()
    print("3. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
    print("   TELEGRAM_BOT_TOKEN=your_bot_token_here")
    print("   TELEGRAM_CHAT_ID=your_chat_id_here")
    print()
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç:")
    print("   python test_telegram_notifications.py")
    print("   # –ò–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –∫ .env —Ñ–∞–π–ª—É:")
    print("   python test_telegram_notifications.py --env-file config/environments/.env")
    print("   # –ò–ª–∏ —Å –ø—Ä—è–º—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤:")
    print("   python test_telegram_notifications.py --bot-token YOUR_TOKEN --chat-id YOUR_CHAT_ID")
    print()

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    parser.add_argument(
        '--env-file', 
        type=str, 
        default='.env',
        help='–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .env)'
    )
    parser.add_argument(
        '--bot-token',
        type=str,
        help='Telegram bot token (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env —Ñ–∞–π–ª)'
    )
    parser.add_argument(
        '--chat-id',
        type=str,
        help='Telegram chat ID (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env —Ñ–∞–π–ª)'
    )
    return parser.parse_args()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_arguments()
    
    print_setup_instructions()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists(args.env_file):
        logger.error(f"‚ùå –§–∞–π–ª {args.env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.info("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —á–µ—Ä–µ–∑ --env-file")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        from env_loader import load_env_file
        success = load_env_file(args.env_file, verbose=True)
        if not success:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª")
            return
    except ImportError:
        # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É
        try:
            from dotenv import load_dotenv
            load_dotenv(args.env_file)
            logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {args.env_file}")
        except ImportError:
            logger.warning("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")
            return
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.bot_token:
        os.environ['TELEGRAM_BOT_TOKEN'] = args.bot_token
        logger.info("‚úÖ Bot token –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
    
    if args.chat_id:
        os.environ['TELEGRAM_CHAT_ID'] = args.chat_id
        logger.info("‚úÖ Chat ID –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = await test_telegram_notifications()
    
    if success:
        await test_rate_limiting()
        await test_error_handling()
        
        logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        logger.error("\n‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤ .env —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    asyncio.run(main())
