#!/usr/bin/env python3
"""
–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ T-Bank API
–ü–æ–∏—Å–∫ —Å—Ä–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (—Ñ—å—é—á–µ—Ä—Å—ã, –æ–ø—Ü–∏–æ–Ω—ã)
"""

import asyncio
import json
import os
from datetime import datetime
from typing import List, Dict
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è T-Bank API
try:
    from tinkoff_invest import ProductionSession, SandboxSession
    from tinkoff_invest.exceptions import RequestProcessingError
    from dotenv import load_dotenv
    load_dotenv('config/environments/.env')
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install tinkoff-invest python-dotenv")
    exit(1)

class TBankInstrumentExplorer:
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ T-Bank API"""
    
    def __init__(self):
        self.token = os.getenv('TBANK_TOKEN')
        self.sandbox_token = os.getenv('TBANK_SANDBOX_TOKEN')
        self.use_sandbox = os.getenv('USE_SANDBOX', 'True').lower() == 'true'
        self.client = None
        
        if not self.token and not self.sandbox_token:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã T-Bank API –≤ .env —Ñ–∞–π–ª–µ")
            exit(1)
    
    async def __aenter__(self):
        token = self.sandbox_token if self.use_sandbox else self.token
        if self.use_sandbox:
            self.client = SandboxSession(token)
        else:
            self.client = ProductionSession(token)
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        # ProductionSession –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ close
        pass
    
    async def search_instruments(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–∏–∫–µ—Ä—É
            try:
                instrument = await self.client.get_instrument_by_ticker(ticker=query)
                if instrument:
                    return [{
                        'figi': instrument.figi,
                        'ticker': instrument.ticker,
                        'name': instrument.name,
                        'currency': instrument.currency,
                        'instrument_type': instrument.instrument_type,
                        'class_code': getattr(instrument, 'class_code', ''),
                        'exchange': getattr(instrument, 'exchange', ''),
                        'lot': getattr(instrument, 'lot', 1),
                        'min_price_increment': getattr(instrument, 'min_price_increment', None)
                    }]
            except:
                pass
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–∏–∫–µ—Ä—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ '{query}': {e}")
            return []
    
    async def get_all_instrument_types(self) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        search_queries = [
            # –ê–∫—Ü–∏–∏
            "SBER", "GAZP", "LKOH", "YNDX", "ROSN",
            
            # –§—å—é—á–µ—Ä—Å—ã
            "—Ñ—å—é—á–µ—Ä—Å", "futures", "FUT", "Si", "RTS", "BR", "GZ",
            
            # –û–ø—Ü–∏–æ–Ω—ã
            "–æ–ø—Ü–∏–æ–Ω", "option", "OPT", "call", "put",
            
            # –û–±–ª–∏–≥–∞—Ü–∏–∏
            "–æ–±–ª–∏–≥–∞—Ü–∏—è", "bond", "OFZ", "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è",
            
            # –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
            "USD", "EUR", "–≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞", "currency",
            
            # ETF
            "ETF", "—Ñ–æ–Ω–¥", "–∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–æ–Ω–¥",
            
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            "–±–∏—Ç–∫–æ–∏–Ω", "bitcoin", "BTC", "—ç—Ñ–∏—Ä–∏—É–º", "ethereum", "ETH",
            
            # –¢–æ–≤–∞—Ä—ã
            "–∑–æ–ª–æ—Ç–æ", "gold", "–Ω–µ—Ñ—Ç—å", "oil", "—Å–µ—Ä–µ–±—Ä–æ", "silver"
        ]
        
        all_instruments = {}
        
        for query in search_queries:
            logger.info(f"üîç –ü–æ–∏—Å–∫: {query}")
            instruments = await self.search_instruments(query)
            
            if instruments:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                for instrument in instruments:
                    instrument_type = instrument['instrument_type']
                    if instrument_type not in all_instruments:
                        all_instruments[instrument_type] = []
                    all_instruments[instrument_type].append(instrument)
        
        return all_instruments
    
    async def get_futures_instruments(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        logger.info("üìà –ü–æ–∏—Å–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤...")
        
        futures_queries = [
            "Si",      # –î–æ–ª–ª–∞—Ä/—Ä—É–±–ª—å
            "Eu",      # –ï–≤—Ä–æ/—Ä—É–±–ª—å
            "BR",      # –ù–µ—Ñ—Ç—å Brent
            "GZ",      # –ì–∞–∑–ø—Ä–æ–º
            "SBER",    # –°–±–µ—Ä–±–∞–Ω–∫
            "RTS",     # –ò–Ω–¥–µ–∫—Å RTS
            "MX",      # –ò–Ω–¥–µ–∫—Å –ú–æ—Å–ë–∏—Ä–∂–∏
            "GD",      # –ó–æ–ª–æ—Ç–æ
            "SV",      # –°–µ—Ä–µ–±—Ä–æ
            "CU",      # –ú–µ–¥—å
            "WZ",      # –ü—à–µ–Ω–∏—Ü–∞
            "CO",      # –ö—É–∫—É—Ä—É–∑–∞
            "SU",      # –°–∞—Ö–∞—Ä
            "futures", "—Ñ—å—é—á–µ—Ä—Å"
        ]
        
        futures = []
        for query in futures_queries:
            instruments = await self.search_instruments(query)
            for instrument in instruments:
                if 'futures' in instrument['instrument_type'].lower() or \
                   '—Ñ—å—é—á–µ—Ä—Å' in instrument['name'].lower() or \
                   instrument['ticker'].endswith('F') or \
                   'FUT' in instrument['ticker']:
                    futures.append(instrument)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_futures = []
        seen_figis = set()
        for future in futures:
            if future['figi'] not in seen_figis:
                unique_futures.append(future)
                seen_figis.add(future['figi'])
        
        return unique_futures
    
    async def get_options_instruments(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–æ–≤"""
        logger.info("üìä –ü–æ–∏—Å–∫ –æ–ø—Ü–∏–æ–Ω–æ–≤...")
        
        options_queries = [
            "–æ–ø—Ü–∏–æ–Ω", "option", "OPT", "call", "put",
            "SBER", "GAZP", "LKOH", "RTS"
        ]
        
        options = []
        for query in options_queries:
            instruments = await self.search_instruments(query)
            for instrument in instruments:
                if 'option' in instrument['instrument_type'].lower() or \
                   '–æ–ø—Ü–∏–æ–Ω' in instrument['name'].lower() or \
                   'OPT' in instrument['ticker']:
                    options.append(instrument)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_options = []
        seen_figis = set()
        for option in options:
            if option['figi'] not in seen_figis:
                unique_options.append(option)
                seen_figis.add(option['figi'])
        
        return unique_options
    
    async def get_historical_data_sample(self, figi: str, days: int = 30) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from datetime import timedelta
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            response = await self.client.get_candles(
                figi=figi,
                from_=start_date,
                to=end_date,
                interval='CANDLE_INTERVAL_DAY'
            )
            
            if response.candles:
                return {
                    'figi': figi,
                    'candles_count': len(response.candles),
                    'first_candle': {
                        'date': response.candles[0].time.isoformat(),
                        'open': response.candles[0].open.units + response.candles[0].open.nano / 1e9,
                        'close': response.candles[0].close.units + response.candles[0].close.nano / 1e9,
                        'volume': response.candles[0].volume
                    },
                    'last_candle': {
                        'date': response.candles[-1].time.isoformat(),
                        'open': response.candles[-1].open.units + response.candles[-1].open.nano / 1e9,
                        'close': response.candles[-1].close.units + response.candles[-1].close.nano / 1e9,
                        'volume': response.candles[-1].volume
                    }
                }
            else:
                return {'figi': figi, 'error': 'No historical data available'}
                
        except Exception as e:
            return {'figi': figi, 'error': str(e)}
    
    async def explore_all(self):
        """–ü–æ–ª–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ T-Bank API...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        all_instruments = await self.get_all_instrument_types()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—å—é—á–µ—Ä—Å—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        futures = await self.get_futures_instruments()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–æ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        options = await self.get_options_instruments()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'timestamp': datetime.now().isoformat(),
            'use_sandbox': self.use_sandbox,
            'total_instrument_types': len(all_instruments),
            'instrument_types': {},
            'futures': futures,
            'options': options,
            'summary': {
                'total_futures': len(futures),
                'total_options': len(options),
                'total_instruments_by_type': {k: len(v) for k, v in all_instruments.items()}
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for instrument_type, instruments in all_instruments.items():
            results['instrument_types'][instrument_type] = {
                'count': len(instruments),
                'sample': instruments[:5]  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        test_instruments = []
        
        # –ë–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        for instrument_type, instruments in all_instruments.items():
            if instruments:
                test_instruments.append(instruments[0]['figi'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—å—é—á–µ—Ä—Å—ã –∏ –æ–ø—Ü–∏–æ–Ω—ã
        if futures:
            test_instruments.append(futures[0]['figi'])
        if options:
            test_instruments.append(options[0]['figi'])
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        historical_data_tests = []
        for figi in test_instruments[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ç–µ—Å—Ç–æ–≤
            logger.info(f"üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {figi}")
            test_result = await self.get_historical_data_sample(figi)
            historical_data_tests.append(test_result)
        
        results['historical_data_tests'] = historical_data_tests
        
        return results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í T-BANK API")
    print("=" * 50)
    
    async with TBankInstrumentExplorer() as explorer:
        results = await explorer.explore_all()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"tbank_instruments_exploration_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {'Sandbox' if results['use_sandbox'] else 'Production'}")
        print(f"üìà –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {results['total_instrument_types']}")
        print(f"üéØ –§—å—é—á–µ—Ä—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {results['summary']['total_futures']}")
        print(f"üìä –û–ø—Ü–∏–æ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {results['summary']['total_options']}")
        
        print(f"\nüìã –¢–ò–ü–´ –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í:")
        for instrument_type, info in results['instrument_types'].items():
            print(f"  ‚Ä¢ {instrument_type}: {info['count']} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        if results['futures']:
            print(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï –§–¨–Æ–ß–ï–†–°–´:")
            for future in results['futures'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  ‚Ä¢ {future['ticker']} - {future['name']} ({future['instrument_type']})")
        
        if results['options']:
            print(f"\nüìä –ù–ê–ô–î–ï–ù–ù–´–ï –û–ü–¶–ò–û–ù–´:")
            for option in results['options'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  ‚Ä¢ {option['ticker']} - {option['name']} ({option['instrument_type']})")
        
        print(f"\nüíæ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")

if __name__ == "__main__":
    asyncio.run(main())
