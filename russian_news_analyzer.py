#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram –∫–∞–Ω–∞–ª–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MOEX, —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –°–ú–ò –∏ Telegram –∫–∞–Ω–∞–ª–∞–º–∏
"""

import os
import sys
import json
import time
import logging
import requests
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from abc import ABC, abstractmethod
import hashlib
import sqlite3
from pathlib import Path
import re

# Telegram –∏–º–ø–æ—Ä—Ç—ã
try:
    from telethon import TelegramClient, events
    from telethon.tl.types import Channel, Chat
    TELETHON_AVAILABLE = True
except ImportError:
    TELETHON_AVAILABLE = False
    print("‚ö†Ô∏è Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")

# NLP –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
try:
    from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
    import torch
    TRANSFORMERS_AVAILABLE = True
except ImportError:
    TRANSFORMERS_AVAILABLE = False
    print("‚ö†Ô∏è Transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install transformers torch")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class RussianNewsItem:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    title: str
    content: str
    published_at: datetime
    source: str
    url: str = ""
    symbol: str = ""
    sentiment_score: float = 0.0
    confidence: float = 0.0
    language: str = "ru"

class MOEXNewsProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π MOEX (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞)"""
    
    def __init__(self):
        self.base_url = "https://iss.moex.com/iss"
        self.session = None
    
    async def get_news(self, symbol: str = None, days_back: int = 7) -> List[RussianNewsItem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å MOEX"""
        if not self.session:
            self.session = aiohttp.ClientSession()
        
        # MOEX –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π, –Ω–æ –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∏—Ö —Å–∞–π—Ç
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å moex.com
        news_items = []
        
        try:
            # –ü—Ä–∏–º–µ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π MOEX (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Å–∞–π—Ç)
            sample_news = [
                {
                    'title': f'–¢–æ—Ä–≥–∏ {symbol} –Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
                    'content': f'–ê–∫—Ü–∏–∏ {symbol} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ñ–æ–Ω–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...',
                    'published_at': datetime.now() - timedelta(hours=2),
                    'source': 'MOEX',
                    'url': f'https://www.moex.com/news/{symbol}'
                }
            ]
            
            for news in sample_news:
                news_items.append(RussianNewsItem(
                    title=news['title'],
                    content=news['content'],
                    published_at=news['published_at'],
                    source=news['source'],
                    url=news['url'],
                    symbol=symbol or 'MOEX'
                ))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π MOEX: {e}")
        
        return news_items

class RussianMediaProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –°–ú–ò"""
    
    def __init__(self):
        self.sources = {
            'rbc': 'https://www.rbc.ru/finances/',
            'vedomosti': 'https://www.vedomosti.ru/finance',
            'kommersant': 'https://www.kommersant.ru/finance',
            'tass': 'https://tass.ru/ekonomika'
        }
        self.session = None
    
    async def get_news(self, symbol: str, days_back: int = 7) -> List[RussianNewsItem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –°–ú–ò"""
        if not self.session:
            self.session = aiohttp.ClientSession()
        
        news_items = []
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
        sample_news = [
            {
                'title': f'{symbol}: –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–≤—ã—à–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã',
                'content': f'–í–µ–¥—É—â–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç —Å–≤–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –∞–∫—Ü–∏—è–º {symbol} –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–≤—ã—à–µ–Ω–∏—è...',
                'published_at': datetime.now() - timedelta(hours=1),
                'source': '–†–ë–ö',
                'url': f'https://www.rbc.ru/finances/{symbol}'
            },
            {
                'title': f'–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–π: {symbol} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç',
                'content': f'–ê–∫—Ü–∏–∏ {symbol} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É –Ω–∞ —Ñ–æ–Ω–µ —É–ª—É—á—à–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...',
                'published_at': datetime.now() - timedelta(hours=3),
                'source': '–í–µ–¥–æ–º–æ—Å—Ç–∏',
                'url': f'https://www.vedomosti.ru/finance/{symbol}'
            }
        ]
        
        for news in sample_news:
            news_items.append(RussianNewsItem(
                title=news['title'],
                content=news['content'],
                published_at=news['published_at'],
                source=news['source'],
                url=news['url'],
                symbol=symbol
            ))
        
        return news_items

class TelegramChannelProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, api_id: str, api_hash: str, phone: str = None):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.client = None
        self.channels = {
            'rbc_finance': '@rbc_finance',
            'vedomosti': '@vedomosti',
            'kommersant': '@kommersant',
            'tass_economics': '@tass_economics',
            'moex_official': '@moex_official',
            'investing_ru': '@investing_ru'
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        if not TELETHON_AVAILABLE:
            logger.error("Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        try:
            self.client = TelegramClient('russian_news_bot', self.api_id, self.api_hash)
            await self.client.start(phone=self.phone)
            logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
            return False
    
    async def get_channel_history(self, channel_username: str, limit: int = 100) -> List[RussianNewsItem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞"""
        if not self.client:
            return []
        
        news_items = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = await self.client.get_entity(channel_username)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(channel, limit=limit)
            
            for message in messages:
                if message.text and len(message.text) > 20:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç—å—é
                    if self.is_financial_news(message.text):
                        news_items.append(RussianNewsItem(
                            title=message.text[:100] + "..." if len(message.text) > 100 else message.text,
                            content=message.text,
                            published_at=message.date,
                            source=f"Telegram: {channel_username}",
                            url=f"https://t.me/{channel_username}/{message.id}",
                            symbol=self.extract_symbols(message.text)
                        ))
            
            logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {channel_username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
        
        return news_items
    
    def is_financial_news(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç—å—é"""
        financial_keywords = [
            '–∞–∫—Ü–∏–∏', '–æ–±–ª–∏–≥–∞—Ü–∏–∏', '—Ä—É–±–ª—å', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '–Ω–µ—Ñ—Ç—å', '–≥–∞–∑',
            '–±–∏—Ä–∂–∞', '—Ç–æ—Ä–≥–∏', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ø–æ—Ä—Ç—Ñ–µ–ª—å', '–¥–∏–≤–∏–¥–µ–Ω–¥—ã', '–ø—Ä–∏–±—ã–ª—å',
            '—É–±—ã—Ç–æ–∫', '—Ä–æ—Å—Ç', '–ø–∞–¥–µ–Ω–∏–µ', '–∫—É—Ä—Å', '–≤–∞–ª—é—Ç–∞', '—Ñ–æ–Ω–¥', '–∏–Ω–¥–µ–∫—Å',
            'SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'TATN', 'MGNT', 'MTSS',
            'MOEX', 'RTS', '–ú–æ—Å–±–∏—Ä–∂–∞', '–ì–∞–∑–ø—Ä–æ–º', '–°–±–µ—Ä–±–∞–Ω–∫', '–õ—É–∫–æ–π–ª'
        ]
        
        text_lower = text.lower()
        return any(keyword.lower() in text_lower for keyword in financial_keywords)
    
    def extract_symbols(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        symbols = []
        
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–∏–∫–µ—Ä—ã
        russian_tickers = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'TATN', 'MGNT', 'MTSS', 'PIKK', 'IRAO', 'SGZH']
        
        for ticker in russian_tickers:
            if ticker in text.upper():
                symbols.append(ticker)
        
        return ', '.join(symbols) if symbols else 'GENERAL'
    
    async def get_all_channels_news(self, days_back: int = 7) -> Dict[str, List[RussianNewsItem]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        all_news = {}
        
        for channel_name, channel_username in self.channels.items():
            try:
                news = await self.get_channel_history(channel_username, limit=50)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                cutoff_time = datetime.now() - timedelta(days=days_back)
                recent_news = [n for n in news if n.published_at >= cutoff_time]
                
                all_news[channel_name] = recent_news
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {channel_name}: {e}")
                all_news[channel_name] = []
        
        return all_news
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            await self.client.disconnect()

class RussianSentimentAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    
    def __init__(self):
        self.sentiment_pipeline = None
        self.financial_pipeline = None
        self.init_models()
    
    def init_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        if not TRANSFORMERS_AVAILABLE:
            logger.warning("Transformers –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        try:
            # –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            self.sentiment_pipeline = pipeline(
                "sentiment-analysis",
                model="blanchefort/rubert-base-cased-sentiment",
                return_all_scores=True
            )
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            try:
                self.financial_pipeline = pipeline(
                    "text-classification",
                    model="DeepPavlov/rubert-base-cased-sentiment",
                    return_all_scores=True
                )
            except:
                logger.warning("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é")
                self.financial_pipeline = self.sentiment_pipeline
            
            logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            self.sentiment_pipeline = None
    
    def analyze_sentiment(self, text: str) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return {'score': 0.0, 'confidence': 0.0}
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if not self.sentiment_pipeline:
            return self.keyword_sentiment_analysis(text)
        
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            text = text[:512]
            
            results = self.sentiment_pipeline(text)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            positive_score = 0.0
            negative_score = 0.0
            neutral_score = 0.0
            
            for result in results[0]:
                label = result['label'].lower()
                score = result['score']
                
                if 'positive' in label or '–ø–æ–∑–∏—Ç–∏–≤' in label:
                    positive_score = score
                elif 'negative' in label or '–Ω–µ–≥–∞—Ç–∏–≤' in label:
                    negative_score = score
                else:
                    neutral_score = score
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç
            sentiment_score = positive_score - negative_score
            confidence = max(positive_score, negative_score, neutral_score)
            
            return {
                'score': sentiment_score,
                'confidence': confidence
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
            return self.keyword_sentiment_analysis(text)
    
    def keyword_sentiment_analysis(self, text: str) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback)"""
        positive_keywords = [
            '—Ä–æ—Å—Ç', '–ø–æ–≤—ã—à–µ–Ω–∏–µ', '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ', '–ø—Ä–∏–±—ã–ª—å', '—É—Å–ø–µ—Ö', '–ø–æ–±–µ–¥–∞',
            '–ø–æ–∑–∏—Ç–∏–≤', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ',
            '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–ø—Ä–æ–≥—Ä–µ—Å—Å'
        ]
        
        negative_keywords = [
            '–ø–∞–¥–µ–Ω–∏–µ', '—Å–Ω–∏–∂–µ–Ω–∏–µ', '—É–º–µ–Ω—å—à–µ–Ω–∏–µ', '—É–±—ã—Ç–æ–∫', '–ø—Ä–æ–≤–∞–ª', '–ø–æ—Ä–∞–∂–µ–Ω–∏–µ',
            '–Ω–µ–≥–∞—Ç–∏–≤', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞', '–∫—Ä–∏–∑–∏—Å',
            '–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '—Ä–∏—Å–∫', '–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–ø—Ä–æ–±–ª–µ–º–∞'
        ]
        
        text_lower = text.lower()
        
        positive_count = sum(1 for word in positive_keywords if word in text_lower)
        negative_count = sum(1 for word in negative_keywords if word in text_lower)
        
        total_words = len(text.split())
        if total_words == 0:
            return {'score': 0.0, 'confidence': 0.0}
        
        positive_ratio = positive_count / total_words
        negative_ratio = negative_count / total_words
        
        sentiment_score = positive_ratio - negative_ratio
        confidence = min(positive_ratio + negative_ratio, 1.0)
        
        return {
            'score': sentiment_score,
            'confidence': confidence
        }

class RussianNewsAnalyzer:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, config_file: str = "russian_news_config.json"):
        self.config = self.load_config(config_file)
        self.sentiment_analyzer = RussianSentimentAnalyzer()
        self.moex_provider = MOEXNewsProvider()
        self.media_provider = RussianMediaProvider()
        self.telegram_provider = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if self.config.get("telegram", {}).get("enabled", False):
            self.init_telegram()
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_config(self, config_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "sources": {
                "moex": {"enabled": True},
                "russian_media": {"enabled": True},
                "telegram": {"enabled": False, "api_id": "", "api_hash": "", "phone": ""}
            },
            "telegram_channels": {
                "rbc_finance": "@rbc_finance",
                "vedomosti": "@vedomosti",
                "kommersant": "@kommersant",
                "tass_economics": "@tass_economics",
                "moex_official": "@moex_official",
                "investing_ru": "@investing_ru"
            },
            "cache": {
                "enabled": True,
                "ttl_hours": 2
            }
        }
        
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    user_config = json.load(f)
                    default_config.update(user_config)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return default_config
    
    def init_telegram(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        telegram_config = self.config.get("telegram", {})
        
        if telegram_config.get("api_id") and telegram_config.get("api_hash"):
            self.telegram_provider = TelegramChannelProvider(
                api_id=telegram_config["api_id"],
                api_hash=telegram_config["api_hash"],
                phone=telegram_config.get("phone")
            )
        else:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏")
    
    async def get_news_for_symbol(self, symbol: str, days_back: int = 7) -> List[RussianNewsItem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        all_news = []
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ MOEX
        if self.config["sources"]["moex"]["enabled"]:
            try:
                moex_news = await self.moex_provider.get_news(symbol, days_back)
                all_news.extend(moex_news)
                logger.info(f"üì∞ –ü–æ–ª—É—á–µ–Ω–æ {len(moex_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ MOEX")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π MOEX: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –°–ú–ò
        if self.config["sources"]["russian_media"]["enabled"]:
            try:
                media_news = await self.media_provider.get_news(symbol, days_back)
                all_news.extend(media_news)
                logger.info(f"üì∞ –ü–æ–ª—É—á–µ–Ω–æ {len(media_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –°–ú–ò")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –°–ú–ò: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
        if self.config["sources"]["telegram"]["enabled"] and self.telegram_provider:
            try:
                if not self.telegram_provider.client:
                    await self.telegram_provider.initialize()
                
                telegram_news = await self.telegram_provider.get_all_channels_news(days_back)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
                symbol_news = []
                for channel_news in telegram_news.values():
                    for news in channel_news:
                        if symbol in news.symbol or news.symbol == 'GENERAL':
                            symbol_news.append(news)
                
                all_news.extend(symbol_news)
                logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω–æ {len(symbol_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π Telegram: {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        for news in all_news:
            if news.sentiment_score == 0.0:
                sentiment = self.sentiment_analyzer.analyze_sentiment(news.title + " " + news.content)
                news.sentiment_score = sentiment['score']
                news.confidence = sentiment['confidence']
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_news = self.remove_duplicates(all_news)
        
        logger.info(f"üìä –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(unique_news)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}")
        return unique_news
    
    def remove_duplicates(self, news_list: List[RussianNewsItem]) -> List[RussianNewsItem]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        unique_news = []
        seen_titles = set()
        
        for news in news_list:
            title_hash = hashlib.md5(news.title.lower().encode('utf-8')).hexdigest()
            if title_hash not in seen_titles:
                seen_titles.add(title_hash)
                unique_news.append(news)
        
        return unique_news
    
    def calculate_aggregate_sentiment(self, news_list: List[RussianNewsItem]) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        if not news_list:
            return {
                'sentiment_score': 0.0,
                'confidence': 0.0,
                'news_count': 0,
                'positive_ratio': 0.5
            }
        
        total_sentiment = 0.0
        total_confidence = 0.0
        weight_sum = 0.0
        positive_count = 0
        
        for news in news_list:
            # –í–∑–≤–µ—à–∏–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            hours_ago = (datetime.now() - news.published_at).total_seconds() / 3600
            time_weight = max(0.1, 1.0 - hours_ago / (24 * 7))
            
            # –í–∑–≤–µ—à–∏–≤–∞–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_weight = news.confidence if news.confidence > 0 else 0.5
            
            # –û–±—â–∏–π –≤–µ—Å
            weight = time_weight * confidence_weight
            
            total_sentiment += news.sentiment_score * weight
            total_confidence += news.confidence * weight
            weight_sum += weight
            
            if news.sentiment_score > 0:
                positive_count += 1
        
        avg_sentiment = total_sentiment / weight_sum if weight_sum > 0 else 0.0
        avg_confidence = total_confidence / weight_sum if weight_sum > 0 else 0.0
        positive_ratio = positive_count / len(news_list)
        
        return {
            'sentiment_score': avg_sentiment,
            'confidence': avg_confidence,
            'news_count': len(news_list),
            'positive_ratio': positive_ratio
        }
    
    async def get_market_sentiment(self, symbols: List[str], days_back: int = 7) -> Dict[str, Dict[str, float]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ä—ã–Ω–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        results = {}
        
        for symbol in symbols:
            try:
                news = await self.get_news_for_symbol(symbol, days_back)
                sentiment = self.calculate_aggregate_sentiment(news)
                results[symbol] = sentiment
                
                logger.info(f"üìà {symbol}: Sentiment={sentiment['sentiment_score']:.3f}, "
                          f"Confidence={sentiment['confidence']:.3f}, "
                          f"News={sentiment['news_count']}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è {symbol}: {e}")
                results[symbol] = {
                    'sentiment_score': 0.0,
                    'confidence': 0.0,
                    'news_count': 0,
                    'positive_ratio': 0.5
                }
        
        return results
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.telegram_provider:
            await self.telegram_provider.close()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = RussianNewsAnalyzer()
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    russian_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'TATN']
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    sentiments = await analyzer.get_market_sentiment(russian_symbols, days_back=3)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–ô –†–û–°–°–ò–ô–°–ö–û–ì–û –†–´–ù–ö–ê")
    print("=" * 60)
    
    for symbol, sentiment in sentiments.items():
        print(f"{symbol}:")
        print(f"  Sentiment Score: {sentiment['sentiment_score']:.3f}")
        print(f"  Confidence: {sentiment['confidence']:.3f}")
        print(f"  News Count: {sentiment['news_count']}")
        print(f"  Positive Ratio: {sentiment['positive_ratio']:.3f}")
        print()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await analyzer.close()

if __name__ == "__main__":
    asyncio.run(main())
