#!/usr/bin/env python3
"""
Quality Monitor for Trading Strategies
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import logging
from typing import Dict, List, Optional
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class QualityMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self, config_path: str = "config/parameters/alerts_config.py"):
        self.config = self._load_config(config_path)
        self.alert_history = []
        self.metrics_history = []
        
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
            return {
                'email': {
                    'enabled': True,
                    'recipients': ['trader@example.com'],
                    'thresholds': {
                        'low_return': 0.05,
                        'high_drawdown': 0.15,
                        'low_sharpe': 1.0,
                        'low_ml_precision': 0.6
                    }
                },
                'telegram': {
                    'enabled': False,
                    'bot_token': 'YOUR_BOT_TOKEN',
                    'chat_id': 'YOUR_CHAT_ID'
                }
            }
        except Exception as e:
            logger.error(f"Error loading config: {e}")
            return {}
    
    def check_strategy_quality(self, strategy_name: str, metrics: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        logger.info(f"üîç Checking quality for {strategy_name}")
        
        alerts = []
        quality_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        monthly_return = metrics.get('monthly_return', 0)
        if monthly_return < self.config['email']['thresholds']['low_return']:
            alert = {
                'type': 'LOW_RETURN',
                'message': f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {strategy_name}: {monthly_return:.2%}",
                'severity': 'WARNING',
                'timestamp': datetime.now()
            }
            alerts.append(alert)
            quality_score -= 20
        else:
            quality_score += 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Sharpe ratio
        sharpe_ratio = metrics.get('sharpe_ratio', 0)
        if sharpe_ratio < self.config['email']['thresholds']['low_sharpe']:
            alert = {
                'type': 'LOW_SHARPE',
                'message': f"Sharpe ratio {strategy_name}: {sharpe_ratio:.3f}",
                'severity': 'WARNING',
                'timestamp': datetime.now()
            }
            alerts.append(alert)
            quality_score -= 15
        else:
            quality_score += 25
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
        max_drawdown = metrics.get('max_drawdown', 0)
        if max_drawdown > self.config['email']['thresholds']['high_drawdown']:
            alert = {
                'type': 'HIGH_DRAWDOWN',
                'message': f"–ü—Ä–æ—Å–∞–¥–∫–∞ {strategy_name}: {max_drawdown:.2%}",
                'severity': 'CRITICAL',
                'timestamp': datetime.now()
            }
            alerts.append(alert)
            quality_score -= 30
        else:
            quality_score += 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ ML (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        if 'ml_precision' in metrics:
            ml_precision = metrics['ml_precision']
            if ml_precision < self.config['email']['thresholds']['low_ml_precision']:
                alert = {
                    'type': 'LOW_ML_PRECISION',
                    'message': f"–¢–æ—á–Ω–æ—Å—Ç—å ML {strategy_name}: {ml_precision:.2%}",
                    'severity': 'WARNING',
                    'timestamp': datetime.now()
                }
                alerts.append(alert)
                quality_score -= 10
            else:
                quality_score += 15
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ (0-100)
        quality_score = max(0, min(100, quality_score))
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        for alert in alerts:
            self._send_alert(alert)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        quality_data = {
            'strategy_name': strategy_name,
            'timestamp': datetime.now(),
            'quality_score': quality_score,
            'metrics': metrics,
            'alerts': alerts
        }
        
        self.metrics_history.append(quality_data)
        self._save_metrics(quality_data)
        
        return quality_data
    
    def _send_alert(self, alert: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        logger.warning(f"üö® ALERT: {alert['type']} - {alert['message']}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.alert_history.append(alert)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ email (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if self.config.get('email', {}).get('enabled', False):
            self._send_email_alert(alert)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if self.config.get('telegram', {}).get('enabled', False):
            self._send_telegram_alert(alert)
    
    def _send_email_alert(self, alert: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email
            logger.info(f"üìß Email alert sent: {alert['message']}")
        except Exception as e:
            logger.error(f"Error sending email: {e}")
    
    def _send_telegram_alert(self, alert: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
            logger.info(f"üì± Telegram alert sent: {alert['message']}")
        except Exception as e:
            logger.error(f"Error sending Telegram: {e}")
    
    def _save_metrics(self, quality_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"monitoring/metrics/quality_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(quality_data, f, indent=2, default=str, ensure_ascii=False)
            
            logger.info(f"üìä Metrics saved to {filename}")
        except Exception as e:
            logger.error(f"Error saving metrics: {e}")
    
    def get_quality_report(self, days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        recent_metrics = [
            m for m in self.metrics_history 
            if m['timestamp'] > cutoff_date
        ]
        
        if not recent_metrics:
            return {'error': 'No data for the specified period'}
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_scores = [m['quality_score'] for m in recent_metrics]
        avg_quality = np.mean(quality_scores)
        
        # –ê–Ω–∞–ª–∏–∑ –∞–ª–µ—Ä—Ç–æ–≤
        all_alerts = []
        for m in recent_metrics:
            all_alerts.extend(m['alerts'])
        
        alert_counts = {}
        for alert in all_alerts:
            alert_type = alert['type']
            alert_counts[alert_type] = alert_counts.get(alert_type, 0) + 1
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if len(quality_scores) > 1:
            quality_trend = 'improving' if quality_scores[-1] > quality_scores[0] else 'declining'
        else:
            quality_trend = 'stable'
        
        report = {
            'period_days': days,
            'total_checks': len(recent_metrics),
            'average_quality_score': avg_quality,
            'quality_trend': quality_trend,
            'alert_summary': alert_counts,
            'total_alerts': len(all_alerts),
            'strategies_checked': list(set(m['strategy_name'] for m in recent_metrics))
        }
        
        return report
    
    def check_all_strategies(self, strategies_data: Dict[str, Dict]) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        logger.info("üîç Checking quality for all strategies")
        
        results = {}
        overall_quality = 0
        
        for strategy_name, metrics in strategies_data.items():
            quality_data = self.check_strategy_quality(strategy_name, metrics)
            results[strategy_name] = quality_data
            overall_quality += quality_data['quality_score']
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if results:
            overall_quality /= len(results)
        
        results['overall'] = {
            'average_quality_score': overall_quality,
            'total_strategies': len(strategies_data),
            'timestamp': datetime.now()
        }
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    monitor = QualityMonitor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    test_strategies = {
        'ML_Strategy': {
            'monthly_return': 0.085,
            'sharpe_ratio': 1.2,
            'max_drawdown': 0.08,
            'ml_precision': 0.65
        },
        'Aggressive_Strategy': {
            'monthly_return': 0.152,
            'sharpe_ratio': 1.8,
            'max_drawdown': 0.12
        },
        'Combined_Strategy': {
            'monthly_return': 0.118,
            'sharpe_ratio': 1.5,
            'max_drawdown': 0.10
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    results = monitor.check_all_strategies(test_strategies)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = monitor.get_quality_report(days=1)
    
    print("üìä QUALITY MONITORING REPORT")
    print("="*50)
    print(f"Overall Quality Score: {results['overall']['average_quality_score']:.1f}/100")
    print(f"Total Strategies: {results['overall']['total_strategies']}")
    print(f"Total Alerts: {report['total_alerts']}")
    
    for strategy_name, data in results.items():
        if strategy_name != 'overall':
            print(f"\n{strategy_name}:")
            print(f"  Quality Score: {data['quality_score']}/100")
            print(f"  Alerts: {len(data['alerts'])}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    with open(f'monitoring/metrics/quality_report_{timestamp}.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, default=str, ensure_ascii=False)
    
    logger.info("‚úÖ Quality monitoring completed")

if __name__ == "__main__":
    main()

