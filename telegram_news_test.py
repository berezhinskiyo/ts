#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List
import pandas as pd

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
from russian_news_analyzer import RussianNewsAnalyzer, TelegramChannelProvider

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramNewsTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Telegram –∫–∞–Ω–∞–ª–∞–º–∏"""
    
    def __init__(self, config_file: str = "russian_news_config.json"):
        self.config = self.load_config(config_file)
        self.telegram_provider = None
        self.results = {}
    
    def load_config(self, config_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    async def test_telegram_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        telegram_config = self.config.get("telegram", {})
        
        if not telegram_config.get("enabled", False):
            logger.warning("Telegram –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        api_id = telegram_config.get("api_id")
        api_hash = telegram_config.get("api_hash")
        phone = telegram_config.get("phone")
        
        if not api_id or not api_hash:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ –¥–ª—è Telegram")
            return False
        
        try:
            self.telegram_provider = TelegramChannelProvider(api_id, api_hash, phone)
            success = await self.telegram_provider.initialize()
            
            if success:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
            return False
    
    async def test_single_channel(self, channel_username: str, limit: int = 20) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if not self.telegram_provider:
            return {"error": "Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        try:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {channel_username}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            news_items = await self.telegram_provider.get_channel_history(channel_username, limit)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_messages = len(news_items)
            financial_news = [n for n in news_items if n.symbol != 'GENERAL']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            now = datetime.now()
            recent_news = [n for n in news_items if (now - n.published_at).days <= 7]
            
            result = {
                "channel": channel_username,
                "total_messages": total_messages,
                "financial_news": len(financial_news),
                "recent_news": len(recent_news),
                "success": True,
                "sample_titles": [n.title[:100] for n in news_items[:5]]
            }
            
            logger.info(f"üìä {channel_username}: {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(financial_news)} —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
            return {
                "channel": channel_username,
                "error": str(e),
                "success": False
            }
    
    async def test_all_channels(self) -> Dict[str, Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        channels = self.config.get("telegram_channels", {})
        results = {}
        
        for channel_name, channel_username in channels.items():
            result = await self.test_single_channel(channel_username, limit=10)
            results[channel_name] = result
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(2)
        
        return results
    
    async def test_historical_data(self, channel_username: str, days_back: int = 30) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.telegram_provider:
            return {"error": "Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        try:
            logger.info(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ {channel_username} –∑–∞ {days_back} –¥–Ω–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏
            news_items = await self.telegram_provider.get_channel_history(channel_username, limit=200)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cutoff_date = datetime.now() - timedelta(days=days_back)
            historical_news = [n for n in news_items if n.published_at >= cutoff_date]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_stats = {}
            for news in historical_news:
                date_key = news.published_at.strftime('%Y-%m-%d')
                if date_key not in daily_stats:
                    daily_stats[date_key] = 0
                daily_stats[date_key] += 1
            
            result = {
                "channel": channel_username,
                "total_historical": len(historical_news),
                "days_covered": len(daily_stats),
                "daily_stats": daily_stats,
                "date_range": {
                    "start": min(n.published_at for n in historical_news).strftime('%Y-%m-%d') if historical_news else None,
                    "end": max(n.published_at for n in historical_news).strftime('%Y-%m-%d') if historical_news else None
                }
            }
            
            logger.info(f"üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(historical_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {len(daily_stats)} –¥–Ω–µ–π")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {"error": str(e)}
    
    def save_results(self, results: Dict, filename: str = "telegram_test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2, default=str)
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def generate_report(self, results: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        report = []
        report.append("üìä –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ TELEGRAM –ö–ê–ù–ê–õ–û–í")
        report.append("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_channels = len(results)
        successful_channels = sum(1 for r in results.values() if r.get("success", False))
        
        report.append(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}")
        report.append(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {successful_channels}")
        report.append(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful_channels/total_channels*100:.1f}%")
        report.append("")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        for channel_name, result in results.items():
            report.append(f"üì± {channel_name}:")
            if result.get("success", False):
                report.append(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")
                report.append(f"  üì∞ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result.get('total_messages', 0)}")
                report.append(f"  üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {result.get('financial_news', 0)}")
                report.append(f"  üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {result.get('recent_news', 0)}")
            else:
                report.append(f"  ‚ùå –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞")
                report.append(f"  üîç –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            report.append("")
        
        return "\n".join(report)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.telegram_provider:
            await self.telegram_provider.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM –ö–ê–ù–ê–õ–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = TelegramNewsTester()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        connection_ok = await tester.test_telegram_connection()
        
        if not connection_ok:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ russian_news_config.json")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        results = await tester.test_all_channels()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = tester.generate_report(results)
        print("\n" + report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tester.save_results(results)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_channel = "@rbc_finance"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –∫–∞–Ω–∞–ª
        historical_result = await tester.test_historical_data(test_channel, days_back=7)
        
        if "error" not in historical_result:
            print(f"üìÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ {test_channel}:")
            print(f"  –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {historical_result['total_historical']}")
            print(f"  –î–Ω–µ–π –ø–æ–∫—Ä—ã—Ç–æ: {historical_result['days_covered']}")
            print(f"  –ü–µ—Ä–∏–æ–¥: {historical_result['date_range']['start']} - {historical_result['date_range']['end']}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    finally:
        await tester.close()

if __name__ == "__main__":
    asyncio.run(main())
