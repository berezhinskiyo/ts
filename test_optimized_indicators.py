#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""

import pandas as pd
import numpy as np
import os
import json
from datetime import datetime
import logging
from advanced_ml_strategies import AdvancedMLStrategies, IndicatorOptimizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class IndicatorTester:
    """–¢–µ—Å—Ç–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self, initial_capital: float = 100000):
        self.initial_capital = initial_capital
        self.results = {}
        
    def load_tbank_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ T-Bank"""
        market_data = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        symbols = ['GAZP', 'SBER', 'PIKK', 'SGZH', 'IRAO']
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
        possible_paths = [
            'data/tbank_real',
            'data/historical',
            'data/historical/tbank_real'
        ]
        
        for symbol in symbols:
            df = None
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            for data_dir in possible_paths:
                possible_files = [
                    f"{symbol}_1Y_tbank.csv",
                    f"{symbol}_3M_tbank.csv", 
                    f"{symbol}_tbank.csv",
                    f"{symbol}_daily.csv"
                ]
                
                for filename in possible_files:
                    filepath = os.path.join(data_dir, filename)
                    if os.path.exists(filepath):
                        try:
                            df = pd.read_csv(filepath, parse_dates=['date'], index_col='date')
                            df = df.sort_index()
                            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {symbol} –∏–∑ {filepath}: {len(df)} –¥–Ω–µ–π")
                            break
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filepath}: {e}")
                            continue
                
                if df is not None:
                    break
            
            if df is not None:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if len(df) > 200:
                    df = df.iloc[-200:]
                
                if not df.empty and len(df) >= 100:
                    market_data[symbol] = df
                else:
                    logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(df)} –¥–Ω–µ–π")
            else:
                logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")
        
        return market_data
    
    def test_indicator_optimization(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        logger.info("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
        logger.info("=" * 70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        market_data = self.load_tbank_data()
        
        if not market_data:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(market_data)} –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        optimizer = IndicatorOptimizer()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_results = {}
        
        for symbol, data in market_data.items():
            logger.info(f"\nüìà –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}...")
            
            try:
                # –û—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                scores = optimizer.evaluate_indicators(data)
                
                if not scores:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol}")
                    continue
                
                # –í—ã–±–æ—Ä –ª—É—á—à–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                best_indicators = optimizer.select_best_indicators(scores, top_n=15, min_correlation=0.05)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                optimization_results[symbol] = {
                    'all_scores': scores,
                    'best_indicators': best_indicators,
                    'top_10_scores': dict(sorted(scores.items(), key=lambda x: x[1], reverse=True)[:10])
                }
                
                logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(best_indicators)} –ª—É—á—à–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}")
                logger.info("üèÜ –¢–û–ü-10 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
                for i, (indicator, score) in enumerate(optimization_results[symbol]['top_10_scores'].items(), 1):
                    logger.info(f"  {i}. {indicator}: {score:.4f}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        output_path = f"backtesting/results/indicator_optimization_{timestamp}.json"
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(optimization_results, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        self._analyze_common_patterns(optimization_results)
        
        return optimization_results
    
    def _analyze_common_patterns(self, results: dict):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        logger.info("\nüìä –ê–ù–ê–õ–ò–ó –û–ë–©–ò–• –ü–ê–¢–¢–ï–†–ù–û–í:")
        logger.info("=" * 50)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –∏—Ö —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
        all_indicators = {}
        indicator_counts = {}
        
        for symbol, data in results.items():
            for indicator, score in data['all_scores'].items():
                if indicator not in all_indicators:
                    all_indicators[indicator] = []
                    indicator_counts[indicator] = 0
                
                all_indicators[indicator].append(score)
                indicator_counts[indicator] += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
        avg_scores = {}
        for indicator, scores in all_indicators.items():
            if len(scores) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                avg_scores[indicator] = np.mean(scores)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–∏–º –æ—Ü–µ–Ω–∫–∞–º
        sorted_indicators = sorted(avg_scores.items(), key=lambda x: x[1], reverse=True)
        
        logger.info("üèÜ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û –õ–£–ß–®–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (—Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞):")
        for i, (indicator, avg_score) in enumerate(sorted_indicators[:15], 1):
            count = indicator_counts[indicator]
            logger.info(f"  {i}. {indicator}: {avg_score:.4f} (–≤ {count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self._analyze_by_categories(sorted_indicators)
    
    def _analyze_by_categories(self, sorted_indicators: list):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        logger.info("\nüìà –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        logger.info("=" * 40)
        
        categories = {
            'Moving Averages': ['sma', 'ema'],
            'Momentum': ['rsi', 'momentum', 'stoch', 'williams'],
            'Trend': ['macd', 'adx', 'psar', 'ichimoku'],
            'Volatility': ['bb', 'volatility', 'atr'],
            'Volume': ['volume', 'obv', 'vpt'],
            'Patterns': ['pattern', 'price_change', 'high_low_ratio']
        }
        
        for category, keywords in categories.items():
            category_indicators = []
            for indicator, score in sorted_indicators:
                if any(keyword in indicator.lower() for keyword in keywords):
                    category_indicators.append((indicator, score))
            
            if category_indicators:
                logger.info(f"\n{category}:")
                for indicator, score in category_indicators[:5]:
                    logger.info(f"  ‚Ä¢ {indicator}: {score:.4f}")
    
    def test_ml_strategies_with_optimization(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        logger.info("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML –°–¢–†–ê–¢–ï–ì–ò–ô –° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô")
        logger.info("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        market_data = self.load_tbank_data()
        
        if not market_data:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∏ –±–µ–∑
        test_configs = [
            {'optimize': True, 'max_indicators': 15, 'name': 'Optimized'},
            {'optimize': False, 'max_indicators': 15, 'name': 'Standard'}
        ]
        
        all_results = {}
        
        for config in test_configs:
            logger.info(f"\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config['name']}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategy = AdvancedMLStrategies(
                initial_capital=self.initial_capital,
                optimize_indicators=config['optimize'],
                max_indicators=config['max_indicators']
            )
            
            config_results = {}
            
            for symbol, data in market_data.items():
                logger.info(f"  üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}...")
                
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ARIMA —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                    arima_result = strategy.arima_strategy(symbol, data.copy())
                    if arima_result:
                        config_results[f"{symbol}_ARIMA"] = arima_result
                        logger.info(f"    ‚úÖ ARIMA: {arima_result['monthly_return']:.2f}% –≤ –º–µ—Å—è—Ü")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º LSTM —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                    lstm_result = strategy.lstm_strategy(symbol, data.copy())
                    if lstm_result:
                        config_results[f"{symbol}_LSTM"] = lstm_result
                        logger.info(f"    ‚úÖ LSTM: {lstm_result['monthly_return']:.2f}% –≤ –º–µ—Å—è—Ü")
                    
                except Exception as e:
                    logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
            
            all_results[config['name']] = config_results
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._compare_optimization_results(all_results)
        
        return all_results
    
    def _compare_optimization_results(self, results: dict):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        logger.info("=" * 50)
        
        if 'Optimized' not in results or 'Standard' not in results:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return
        
        optimized = results['Optimized']
        standard = results['Standard']
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        common_strategies = set(optimized.keys()) & set(standard.keys())
        
        if not common_strategies:
            logger.warning("–ù–µ—Ç –æ–±—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return
        
        logger.info("üìà –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–°–Ø–ß–ù–û–ô –î–û–•–û–î–ù–û–°–¢–ò:")
        logger.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è | –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è | –†–∞–∑–Ω–∏—Ü–∞")
        logger.info("-" * 60)
        
        improvements = []
        for strategy in sorted(common_strategies):
            opt_return = optimized[strategy]['monthly_return']
            std_return = standard[strategy]['monthly_return']
            difference = opt_return - std_return
            
            improvements.append(difference)
            
            logger.info(f"{strategy:15} | {opt_return:8.2f}% | {std_return:7.2f}% | {difference:+6.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
        avg_improvement = np.mean(improvements)
        positive_improvements = sum(1 for x in improvements if x > 0)
        total_strategies = len(improvements)
        
        logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô:")
        logger.info(f"  –°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {avg_improvement:+.2f}%")
        logger.info(f"  –£–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {positive_improvements}/{total_strategies}")
        logger.info(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–∏–π: {positive_improvements/total_strategies*100:.1f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IndicatorTester()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    optimization_results = tester.test_indicator_optimization()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    ml_results = tester.test_ml_strategies_with_optimization()
    
    logger.info("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ò–ù–î–ò–ö–ê–¢–û–†–û–í –ó–ê–í–ï–†–®–ï–ù–û!")

if __name__ == "__main__":
    main()
