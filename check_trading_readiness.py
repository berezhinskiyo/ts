#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
"""

import os
import sys
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from env_loader import load_env_file
from telegram_notifications import TradingNotifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TradingReadinessChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ"""
    
    def __init__(self, config_file: str = None):
        self.config_file = config_file
        self.checks_passed = 0
        self.checks_failed = 0
        self.issues = []
        self.warnings = []
        
    def load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        try:
            if self.config_file:
                load_env_file(self.config_file)
                logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {self.config_file}")
            else:
                # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞
                env_paths = ['.env', 'config/.env', 'config/environments/.env']
                for path in env_paths:
                    if os.path.exists(path):
                        load_env_file(path)
                        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {path}")
                        break
                else:
                    self.add_issue("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª")
                    return False
            
            return True
        except Exception as e:
            self.add_issue(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def add_issue(self, issue: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã"""
        self.issues.append(issue)
        self.checks_failed += 1
        logger.error(issue)
    
    def add_warning(self, warning: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        self.warnings.append(warning)
        logger.warning(warning)
    
    def add_success(self, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.checks_passed += 1
        logger.info(f"‚úÖ {message}")
    
    def check_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = {
            'TBANK_TOKEN': '–¢–æ–∫–µ–Ω T-Bank API',
            'TELEGRAM_BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
            'TELEGRAM_CHAT_ID': 'Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        }
        
        for var, description in required_vars.items():
            value = os.getenv(var)
            if not value:
                self.add_issue(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {var} ({description})")
            else:
                self.add_success(f"{var} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_vars = {
            'INITIAL_CAPITAL': (100000, '–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª'),
            'MAX_RISK_PER_TRADE': (0.02, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É'),
            'STOP_LOSS_PERCENTAGE': (0.05, '–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞'),
            'TAKE_PROFIT_PERCENTAGE': (0.15, '–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞'),
            'TRADING_SYMBOLS': ('GAZP,SBER,PIKK,IRAO,SGZH', '–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏'),
            'TRADING_PERIOD': ('1Y', '–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'),
            'MIN_DATA_DAYS': (100, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö')
        }
        
        for var, (default, description) in trading_vars.items():
            value = os.getenv(var)
            if value:
                # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                if var in ['INITIAL_CAPITAL', 'MAX_RISK_PER_TRADE', 'STOP_LOSS_PERCENTAGE', 'TAKE_PROFIT_PERCENTAGE', 'MIN_DATA_DAYS']:
                    try:
                        float_value = float(value)
                        self.add_success(f"{var}: {float_value} ({description})")
                    except ValueError:
                        self.add_issue(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {var}: {value}")
                else:
                    # –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    self.add_success(f"{var}: {value} ({description})")
            else:
                self.add_warning(f"‚ö†Ô∏è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
    
    def check_trading_mode(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        logger.info("\nüö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        use_sandbox = os.getenv('USE_SANDBOX', 'True').lower()
        
        if use_sandbox == 'false':
            self.add_success("–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∫–ª—é—á–µ–Ω (USE_SANDBOX=False)")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            initial_capital = float(os.getenv('INITIAL_CAPITAL', 100000))
            if initial_capital > 1000000:
                self.add_warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {initial_capital:,.0f} ‚ÇΩ")
            
            max_risk = float(os.getenv('MAX_RISK_PER_TRADE', 0.02))
            if max_risk > 0.05:
                self.add_warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {max_risk*100:.1f}%")
                
        else:
            self.add_issue("‚ùå –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã (USE_SANDBOX=True). –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_SANDBOX=False")
    
    def check_risk_management(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        logger.info("\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        stop_loss = float(os.getenv('STOP_LOSS_PERCENTAGE', 0.05))
        if stop_loss <= 0 or stop_loss > 0.2:
            self.add_issue(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss*100:.1f}% (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0-20%)")
        else:
            self.add_success(f"–°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss*100:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        take_profit = float(os.getenv('TAKE_PROFIT_PERCENTAGE', 0.15))
        if take_profit <= 0 or take_profit > 1.0:
            self.add_issue(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_profit*100:.1f}% (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0-100%)")
        else:
            self.add_success(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_profit*100:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        if take_profit / stop_loss < 1.5:
            self.add_warning(f"‚ö†Ô∏è –ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: {take_profit/stop_loss:.1f}")
        else:
            self.add_success(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: {take_profit/stop_loss:.1f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        max_risk = float(os.getenv('MAX_RISK_PER_TRADE', 0.02))
        if max_risk > 0.05:
            self.add_issue(f"‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {max_risk*100:.1f}% (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ‚â§5%)")
        else:
            self.add_success(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {max_risk*100:.1f}%")
    
    async def check_telegram_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        try:
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            chat_id = os.getenv('TELEGRAM_CHAT_ID')
            
            if not bot_token or not chat_id:
                self.add_issue("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Telegram —Ç–æ–∫–µ–Ω—ã")
                return
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç–µ–ª—å
            notifier = TradingNotifier(bot_token=bot_token, chat_id=chat_id)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await notifier.notify_alert(
                alert_type='INFO',
                title='üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                message=f'–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n–í—Ä–µ–º—è: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}',
                severity='LOW'
            )
            
            self.add_success("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        except Exception as e:
            self.add_issue(f"‚ùå –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_packages = [
            'pandas', 'numpy', 'sklearn', 'statsmodels', 
            'aiohttp', 'dotenv'
        ]
        
        optional_packages = [
            'tensorflow', 'keras'
        ]
        
        for package in required_packages:
            try:
                __import__(package)
                self.add_success(f"–ü–∞–∫–µ—Ç {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                self.add_issue(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç: {package}")
        
        for package in optional_packages:
            try:
                __import__(package)
                self.add_success(f"–ü–∞–∫–µ—Ç {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
            except ImportError:
                self.add_warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç: {package} (LSTM —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")
    
    def check_file_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        logger.info("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        
        files_to_check = [
            'live_trading_ml.py',
            'advanced_ml_strategies.py',
            'telegram_notifications.py',
            'env_loader.py'
        ]
        
        for file_path in files_to_check:
            if os.path.exists(file_path):
                if os.access(file_path, os.R_OK):
                    self.add_success(f"–§–∞–π–ª {file_path} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è")
                else:
                    self.add_issue(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
            else:
                self.add_issue(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    def check_trading_instruments(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        logger.info("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            trading_symbols = os.getenv('TRADING_SYMBOLS', 'GAZP,SBER,PIKK,IRAO,SGZH').split(',')
            trading_period = os.getenv('TRADING_PERIOD', '1Y')
            min_data_days = int(os.getenv('MIN_DATA_DAYS', '100'))
            
            self.add_success(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(trading_symbols)}")
            self.add_success(f"–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {trading_period}")
            self.add_success(f"–ú–∏–Ω–∏–º—É–º –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö: {min_data_days}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            data_dir = 'data/tbank_real'
            if not os.path.exists(data_dir):
                self.add_issue(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
                return
            
            available_instruments = []
            for symbol in trading_symbols:
                filename = f"{symbol}_{trading_period}_tbank.csv"
                filepath = os.path.join(data_dir, filename)
                
                if os.path.exists(filepath):
                    try:
                        import pandas as pd
                        df = pd.read_csv(filepath, index_col='date', parse_dates=True)
                        if len(df) >= min_data_days:
                            available_instruments.append(symbol)
                            self.add_success(f"‚úÖ {symbol}: {len(df)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            self.add_warning(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(df)} < {min_data_days})")
                    except Exception as e:
                        self.add_issue(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
                else:
                    self.add_issue(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
            
            if available_instruments:
                self.add_success(f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {', '.join(available_instruments)}")
            else:
                self.add_issue("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                
        except Exception as e:
            self.add_issue(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
    
    def check_logging_setup(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        log_files = ['live_trading.log', 'trading.log']
        
        for log_file in log_files:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç—å/–∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥ —Ñ–∞–π–ª
                with open(log_file, 'a') as f:
                    f.write(f"# Test log entry - {datetime.now()}\n")
                self.add_success(f"–õ–æ–≥ —Ñ–∞–π–ª {log_file} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
            except Exception as e:
                self.add_warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥ —Ñ–∞–π–ª–æ–º {log_file}: {e}")
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        logger.info("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if self.checks_failed == 0:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!")
        else:
            recommendations.append("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        initial_capital = float(os.getenv('INITIAL_CAPITAL', 100000))
        if initial_capital > 500000:
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å –º–µ–Ω—å—à–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        max_risk = float(os.getenv('MAX_RISK_PER_TRADE', 0.02))
        if max_risk > 0.03:
            recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –¥–æ 2-3%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
        recommendations.append("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        recommendations.append("üí° –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π")
        
        for rec in recommendations:
            logger.info(rec)
        
        return recommendations
    
    async def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        logger.info("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –ö –¢–û–†–ì–û–í–õ–ï")
        logger.info("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.load_configuration():
            return False
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_environment_variables()
        self.check_trading_mode()
        self.check_risk_management()
        await self.check_telegram_notifications()
        self.check_dependencies()
        self.check_file_permissions()
        self.check_trading_instruments()
        self.check_logging_setup()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self.generate_recommendations()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()
        
        return self.checks_failed == 0
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        logger.info("=" * 60)
        
        logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.checks_passed}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.checks_failed}")
        logger.info(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")
        
        if self.issues:
            logger.info("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in self.issues:
                logger.info(f"  {issue}")
        
        if self.warnings:
            logger.info("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                logger.info(f"  {warning}")
        
        if self.checks_failed == 0:
            logger.info("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –¢–û–†–ì–û–í–õ–ï!")
            logger.info("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python live_trading_ml.py --config config/environments/.env --strategy ensemble")
        else:
            logger.info("\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –¢–û–†–ì–û–í–õ–ï")
            logger.info("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ')
    parser.add_argument('--config', '-c', help='–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É')
    
    args = parser.parse_args()
    
    checker = TradingReadinessChecker(config_file=args.config)
    success = await checker.run_all_checks()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    asyncio.run(main())
