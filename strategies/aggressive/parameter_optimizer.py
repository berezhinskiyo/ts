#!/usr/bin/env python3
"""
Parameter Optimizer for Aggressive Strategy
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
import json
import os
import sys
from typing import Dict, List, Optional, Tuple
import optuna
from optuna.samplers import TPESampler

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ParameterOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, config_path: str = "config/parameters/aggressive_config.py"):
        self.config = self._load_config(config_path)
        self.optimization_history = []
        self.best_parameters = {}
        
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
            return {
                'leverage_range': (5.0, 50.0),
                'profit_target_range': (0.005, 0.05),
                'stop_loss_range': (0.002, 0.02),
                'trend_threshold_range': (0.01, 0.05),
                'volatility_threshold_range': (0.02, 0.05),
                'position_size_range': (0.05, 0.2),
                'optimization_trials': 100,
                'optimization_metric': 'sharpe_ratio',
                'backtest_period': 252,  # 1 –≥–æ–¥
                'min_trades': 10
            }
        except Exception as e:
            logger.error(f"Error loading config: {e}")
            return {}
    
    def generate_test_data(self, days: int = 252) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info(f"üìä Generating {days} days of test data")
        
        try:
            np.random.seed(42)
            
            dates = pd.date_range(
                start=datetime.now() - timedelta(days=days),
                end=datetime.now(),
                freq='D'
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
            data = []
            base_price = 100
            
            for i, date in enumerate(dates):
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                if i < days // 3:
                    # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                    trend = 0.002
                    volatility = 0.02
                elif i < 2 * days // 3:
                    # –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥
                    trend = 0.000
                    volatility = 0.015
                else:
                    # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                    trend = -0.001
                    volatility = 0.025
                
                price_change = np.random.normal(trend, volatility)
                base_price *= (1 + price_change)
                
                data.append({
                    'date': date,
                    'open': base_price * (1 + np.random.normal(0, 0.003)),
                    'high': base_price * (1 + abs(np.random.normal(0, 0.008))),
                    'low': base_price * (1 - abs(np.random.normal(0, 0.008))),
                    'close': base_price,
                    'volume': int(1000000 * np.random.uniform(0.5, 2.0))
                })
            
            df = pd.DataFrame(data)
            df.set_index('date', inplace=True)
            
            logger.info(f"‚úÖ Generated {len(df)} data points")
            return df
            
        except Exception as e:
            logger.error(f"Error generating test data: {e}")
            return pd.DataFrame()
    
    def backtest_strategy(self, parameters: Dict, data: pd.DataFrame) -> Dict:
        """–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            leverage = parameters['leverage']
            profit_target = parameters['profit_target']
            stop_loss = parameters['stop_loss']
            trend_threshold = parameters['trend_threshold']
            volatility_threshold = parameters['volatility_threshold']
            position_size = parameters['position_size']
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            capital = 100000  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
            positions = {}
            trades = []
            daily_values = []
            
            # –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            data['sma_short'] = data['close'].rolling(10).mean()
            data['sma_long'] = data['close'].rolling(30).mean()
            data['volatility'] = data['close'].pct_change().rolling(20).std()
            
            # –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            for i in range(30, len(data)):  # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ 30 –¥–Ω–µ–π
                current_date = data.index[i]
                current_price = data['close'].iloc[i]
                
                # –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞
                sma_short = data['sma_short'].iloc[i]
                sma_long = data['sma_long'].iloc[i]
                trend_strength = (sma_short - sma_long) / sma_long
                
                # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                volatility = data['volatility'].iloc[i]
                
                # –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
                if (abs(trend_strength) > trend_threshold and 
                    volatility < volatility_threshold):
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
                    if trend_strength > 0:
                        action = 'buy'
                    else:
                        action = 'sell'
                    
                    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                    position_value = capital * position_size * leverage
                    quantity = int(position_value / current_price)
                    
                    if quantity > 0:
                        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                        if action == 'buy':
                            capital -= quantity * current_price
                            positions[current_date] = {
                                'action': 'buy',
                                'quantity': quantity,
                                'price': current_price,
                                'leverage': leverage
                            }
                        else:
                            capital += quantity * current_price
                            positions[current_date] = {
                                'action': 'sell',
                                'quantity': quantity,
                                'price': current_price,
                                'leverage': leverage
                            }
                        
                        trades.append({
                            'date': current_date,
                            'action': action,
                            'price': current_price,
                            'quantity': quantity,
                            'leverage': leverage
                        })
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
                for pos_date, position in list(positions.items()):
                    days_held = (current_date - pos_date).days
                    
                    # Take profit
                    if position['action'] == 'buy':
                        current_return = (current_price - position['price']) / position['price']
                        if current_return > profit_target:
                            capital += position['quantity'] * current_price
                            del positions[pos_date]
                    else:
                        current_return = (position['price'] - current_price) / position['price']
                        if current_return > profit_target:
                            capital -= position['quantity'] * current_price
                            del positions[pos_date]
                    
                    # Stop loss
                    if position['action'] == 'buy':
                        current_return = (current_price - position['price']) / position['price']
                        if current_return < -stop_loss:
                            capital += position['quantity'] * current_price
                            del positions[pos_date]
                    else:
                        current_return = (position['price'] - current_price) / position['price']
                        if current_return < -stop_loss:
                            capital -= position['quantity'] * current_price
                            del positions[pos_date]
                
                # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                portfolio_value = capital
                for pos_date, position in positions.items():
                    if position['action'] == 'buy':
                        portfolio_value += position['quantity'] * current_price
                    else:
                        portfolio_value -= position['quantity'] * current_price
                
                daily_values.append({
                    'date': current_date,
                    'value': portfolio_value
                })
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            if len(daily_values) > 1:
                final_value = daily_values[-1]['value']
                total_return = (final_value - 100000) / 100000
                
                # –†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
                daily_returns = []
                for i in range(1, len(daily_values)):
                    daily_return = (daily_values[i]['value'] - daily_values[i-1]['value']) / daily_values[i-1]['value']
                    daily_returns.append(daily_return)
                
                if daily_returns:
                    avg_daily_return = np.mean(daily_returns)
                    daily_volatility = np.std(daily_returns)
                    sharpe_ratio = (avg_daily_return / daily_volatility) * np.sqrt(252) if daily_volatility > 0 else 0
                else:
                    sharpe_ratio = 0
                
                # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
                peak_value = 100000
                max_drawdown = 0
                for dv in daily_values:
                    if dv['value'] > peak_value:
                        peak_value = dv['value']
                    else:
                        drawdown = (peak_value - dv['value']) / peak_value
                        max_drawdown = max(max_drawdown, drawdown)
                
                # –†–∞—Å—á–µ—Ç win rate
                profitable_trades = 0
                for i in range(1, len(trades)):
                    if trades[i]['action'] == 'sell' and trades[i-1]['action'] == 'buy':
                        if trades[i]['price'] > trades[i-1]['price']:
                            profitable_trades += 1
                    elif trades[i]['action'] == 'buy' and trades[i-1]['action'] == 'sell':
                        if trades[i]['price'] < trades[i-1]['price']:
                            profitable_trades += 1
                
                win_rate = profitable_trades / max(1, len(trades) - 1)
                
                return {
                    'total_return': total_return,
                    'sharpe_ratio': sharpe_ratio,
                    'max_drawdown': max_drawdown,
                    'win_rate': win_rate,
                    'total_trades': len(trades),
                    'final_value': final_value
                }
            else:
                return {
                    'total_return': 0,
                    'sharpe_ratio': 0,
                    'max_drawdown': 0,
                    'win_rate': 0,
                    'total_trades': 0,
                    'final_value': 100000
                }
                
        except Exception as e:
            logger.error(f"Error in backtest: {e}")
            return {
                'total_return': 0,
                'sharpe_ratio': 0,
                'max_drawdown': 0,
                'win_rate': 0,
                'total_trades': 0,
                'final_value': 100000
            }
    
    def objective_function(self, trial, data: pd.DataFrame) -> float:
        """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            parameters = {
                'leverage': trial.suggest_float('leverage', *self.config['leverage_range']),
                'profit_target': trial.suggest_float('profit_target', *self.config['profit_target_range']),
                'stop_loss': trial.suggest_float('stop_loss', *self.config['stop_loss_range']),
                'trend_threshold': trial.suggest_float('trend_threshold', *self.config['trend_threshold_range']),
                'volatility_threshold': trial.suggest_float('volatility_threshold', *self.config['volatility_threshold_range']),
                'position_size': trial.suggest_float('position_size', *self.config['position_size_range'])
            }
            
            # –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
            results = self.backtest_strategy(parameters, data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
            if results['total_trades'] < self.config['min_trades']:
                return 0.0
            
            # –í–æ–∑–≤—Ä–∞—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            metric = self.config['optimization_metric']
            return results.get(metric, 0.0)
            
        except Exception as e:
            logger.error(f"Error in objective function: {e}")
            return 0.0
    
    def optimize_parameters(self, data: pd.DataFrame = None) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        logger.info("üîß Starting parameter optimization")
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
            if data is None:
                data = self.generate_test_data(self.config['backtest_period'])
            
            if data.empty:
                logger.error("No data available for optimization")
                return {}
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Optuna
            study = optuna.create_study(
                direction='maximize',
                sampler=TPESampler(seed=42)
            )
            
            # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            study.optimize(
                lambda trial: self.objective_function(trial, data),
                n_trials=self.config['optimization_trials']
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            best_params = study.best_params
            best_value = study.best_value
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            detailed_results = self.backtest_strategy(best_params, data)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            optimization_result = {
                'timestamp': datetime.now(),
                'best_parameters': best_params,
                'best_value': best_value,
                'detailed_results': detailed_results,
                'optimization_trials': self.config['optimization_trials'],
                'study_summary': {
                    'n_trials': len(study.trials),
                    'best_trial': study.best_trial.number
                }
            }
            
            self.optimization_history.append(optimization_result)
            self.best_parameters = best_params
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            self._save_optimization_results(optimization_result)
            
            logger.info(f"‚úÖ Optimization completed: {self.config['optimization_metric']} = {best_value:.3f}")
            logger.info(f"Best parameters: {best_params}")
            
            return optimization_result
            
        except Exception as e:
            logger.error(f"Error in optimization: {e}")
            return {}
    
    def _save_optimization_results(self, results: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"strategies/aggressive/optimization_results_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, default=str, ensure_ascii=False)
            
            logger.info(f"üíæ Optimization results saved to {filename}")
            
        except Exception as e:
            logger.error(f"Error saving optimization results: {e}")
    
    def get_optimization_report(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.optimization_history:
            return {'error': 'No optimization history available'}
        
        latest_optimization = self.optimization_history[-1]
        
        report = {
            'latest_optimization': latest_optimization,
            'total_optimizations': len(self.optimization_history),
            'best_parameters': self.best_parameters,
            'optimization_trend': self._analyze_optimization_trend()
        }
        
        return report
    
    def _analyze_optimization_trend(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if len(self.optimization_history) < 2:
            return {'trend': 'insufficient_data'}
        
        # –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏
        values = [opt['best_value'] for opt in self.optimization_history]
        
        if values[-1] > values[0]:
            trend = 'improving'
            improvement = values[-1] - values[0]
        else:
            trend = 'declining'
            improvement = values[-1] - values[0]
        
        return {
            'trend': trend,
            'improvement': improvement,
            'latest_value': values[-1],
            'initial_value': values[0]
        }
    
    def apply_best_parameters(self, config_path: str = None):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.best_parameters:
            logger.warning("No best parameters available")
            return False
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            logger.info("üîÑ Applying best parameters to configuration")
            logger.info(f"New parameters: {self.best_parameters}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if config_path:
                with open(config_path, 'w', encoding='utf-8') as f:
                    json.dump(self.best_parameters, f, indent=2, ensure_ascii=False)
            
            logger.info("‚úÖ Best parameters applied successfully")
            return True
            
        except Exception as e:
            logger.error(f"Error applying parameters: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    optimizer = ParameterOptimizer()
    
    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    logger.info("üß™ Running parameter optimization test")
    results = optimizer.optimize_parameters()
    
    if results:
        logger.info("‚úÖ Optimization test completed successfully")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = optimizer.get_optimization_report()
        print("\nüìä OPTIMIZATION REPORT")
        print("="*50)
        print(f"Best {optimizer.config['optimization_metric']}: {results['best_value']:.3f}")
        print(f"Best parameters: {results['best_parameters']}")
        print(f"Total return: {results['detailed_results']['total_return']:.2%}")
        print(f"Sharpe ratio: {results['detailed_results']['sharpe_ratio']:.3f}")
        print(f"Max drawdown: {results['detailed_results']['max_drawdown']:.2%}")
        print(f"Win rate: {results['detailed_results']['win_rate']:.2%}")
        print(f"Total trades: {results['detailed_results']['total_trades']}")
        
    else:
        logger.error("‚ùå Optimization test failed")

if __name__ == "__main__":
    main()

