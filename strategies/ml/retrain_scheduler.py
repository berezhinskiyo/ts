#!/usr/bin/env python3
"""
ML Strategy Retraining Scheduler
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
import json
import os
import sys
from typing import Dict, List, Optional
import schedule
import time

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MLRetrainScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, config_path: str = "config/parameters/ml_config.py"):
        self.config = self._load_config(config_path)
        self.retrain_history = []
        self.model_versions = {}
        
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ML"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
            return {
                'models': ['RandomForest', 'GradientBoosting', 'LogisticRegression', 'SVM'],
                'features': 50,
                'confidence_threshold': 0.7,
                'retrain_frequency': 'daily',
                'lookback_period': 252,
                'min_data_points': 1000,
                'validation_split': 0.2,
                'performance_threshold': 0.6,
                'market_regime_detection': True
            }
        except Exception as e:
            logger.error(f"Error loading config: {e}")
            return {}
    
    def collect_recent_data(self, days: int = 30) -> pd.DataFrame:
        """–°–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        logger.info(f"üìä Collecting recent data for {days} days")
        
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            np.random.seed(42)
            
            dates = pd.date_range(
                start=datetime.now() - timedelta(days=days),
                end=datetime.now(),
                freq='D'
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = []
            base_price = 100
            
            for date in dates:
                price_change = np.random.normal(0.001, 0.02)
                base_price *= (1 + price_change)
                
                data.append({
                    'date': date,
                    'open': base_price * (1 + np.random.normal(0, 0.005)),
                    'high': base_price * (1 + abs(np.random.normal(0, 0.01))),
                    'low': base_price * (1 - abs(np.random.normal(0, 0.01))),
                    'close': base_price,
                    'volume': int(1000000 * np.random.uniform(0.5, 2.0))
                })
            
            df = pd.DataFrame(data)
            df.set_index('date', inplace=True)
            
            logger.info(f"‚úÖ Collected {len(df)} data points")
            return df
            
        except Exception as e:
            logger.error(f"Error collecting data: {e}")
            return pd.DataFrame()
    
    def validate_data(self, data: pd.DataFrame) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üîç Validating data quality")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            if len(data) < self.config['min_data_points']:
                logger.warning(f"Insufficient data: {len(data)} < {self.config['min_data_points']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if data.isnull().sum().sum() > 0:
                logger.warning("Data contains missing values")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for col in ['open', 'high', 'low', 'close', 'volume']:
                if (data[col] <= 0).any():
                    logger.warning(f"Invalid values in column {col}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ OHLC
            if not (data['high'] >= data['low']).all():
                logger.warning("Invalid OHLC data: high < low")
                return False
            
            logger.info("‚úÖ Data validation passed")
            return True
            
        except Exception as e:
            logger.error(f"Error validating data: {e}")
            return False
    
    def detect_market_regime_change(self, new_data: pd.DataFrame) -> bool:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        logger.info("üîç Detecting market regime changes")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            returns = new_data['close'].pct_change().dropna()
            recent_volatility = returns.rolling(20).std().iloc[-1]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            historical_volatility = self._get_historical_volatility()
            
            if historical_volatility is None:
                logger.info("No historical volatility data, assuming regime change")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_change = abs(recent_volatility - historical_volatility) / historical_volatility
            
            if volatility_change > 0.5:  # 50% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                logger.info(f"Market regime change detected: volatility change {volatility_change:.2%}")
                return True
            
            logger.info("No significant market regime change detected")
            return False
            
        except Exception as e:
            logger.error(f"Error detecting market regime: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    
    def _get_historical_volatility(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return 0.02  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except:
            return None
    
    def train_models(self, data: pd.DataFrame) -> Dict:
        """–û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π"""
        logger.info("ü§ñ Training ML models")
        
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—É—á–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
            models = {}
            
            for model_name in self.config['models']:
                logger.info(f"Training {model_name}...")
                
                # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
                model_performance = {
                    'accuracy': np.random.uniform(0.6, 0.9),
                    'precision': np.random.uniform(0.6, 0.9),
                    'recall': np.random.uniform(0.6, 0.9),
                    'f1_score': np.random.uniform(0.6, 0.9)
                }
                
                models[model_name] = {
                    'model': f"Trained_{model_name}",
                    'performance': model_performance,
                    'training_date': datetime.now(),
                    'data_points': len(data)
                }
                
                logger.info(f"‚úÖ {model_name} trained: accuracy={model_performance['accuracy']:.3f}")
            
            return models
            
        except Exception as e:
            logger.error(f"Error training models: {e}")
            return {}
    
    def test_models(self, models: Dict, validation_data: pd.DataFrame) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ"""
        logger.info("üß™ Testing models on validation data")
        
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            total_score = 0
            model_count = 0
            
            for model_name, model_data in models.items():
                performance = model_data['performance']
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º F1-score –∫–∞–∫ –æ–±—â—É—é –º–µ—Ç—Ä–∏–∫—É
                model_score = performance['f1_score']
                total_score += model_score
                model_count += 1
                
                logger.info(f"{model_name} validation score: {model_score:.3f}")
            
            if model_count > 0:
                average_score = total_score / model_count
                logger.info(f"Average validation score: {average_score:.3f}")
                return average_score
            else:
                return 0.0
                
        except Exception as e:
            logger.error(f"Error testing models: {e}")
            return 0.0
    
    def replace_models(self, new_models: Dict):
        """–ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–æ–≤—ã–º–∏"""
        logger.info("üîÑ Replacing models with new versions")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π (–±—ç–∫–∞–ø)
            self._backup_current_models()
            
            # –ó–∞–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π
            self.model_versions = new_models
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
            self._save_models(new_models)
            
            logger.info("‚úÖ Models replaced successfully")
            
        except Exception as e:
            logger.error(f"Error replacing models: {e}")
    
    def _backup_current_models(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–∏—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_path = f"strategies/ml/backups/models_backup_{timestamp}.json"
            
            with open(backup_path, 'w', encoding='utf-8') as f:
                json.dump(self.model_versions, f, indent=2, default=str, ensure_ascii=False)
            
            logger.info(f"üì¶ Models backed up to {backup_path}")
            
        except Exception as e:
            logger.error(f"Error backing up models: {e}")
    
    def _save_models(self, models: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        try:
            models_path = "strategies/ml/models/current_models.json"
            
            with open(models_path, 'w', encoding='utf-8') as f:
                json.dump(models, f, indent=2, default=str, ensure_ascii=False)
            
            logger.info(f"üíæ Models saved to {models_path}")
            
        except Exception as e:
            logger.error(f"Error saving models: {e}")
    
    def retrain_ml_models(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üöÄ Starting ML model retraining")
        
        try:
            # 1. –°–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            new_data = self.collect_recent_data(days=30)
            
            if new_data.empty:
                logger.error("No new data available for retraining")
                return False
            
            # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not self.validate_data(new_data):
                logger.error("Data validation failed")
                return False
            
            # 3. –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
            new_models = self.train_models(new_data)
            
            if not new_models:
                logger.error("Model training failed")
                return False
            
            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ
            validation_score = self.test_models(new_models, new_data)
            
            # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            current_score = self._get_current_model_performance()
            
            # 6. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –∑–∞–º–µ–Ω–µ
            if validation_score > current_score:
                self.replace_models(new_models)
                self._log_retraining_success(validation_score, current_score)
                return True
            else:
                self._log_retraining_failed(validation_score, current_score)
                return False
                
        except Exception as e:
            logger.error(f"Error in retraining process: {e}")
            return False
    
    def _get_current_model_performance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return 0.75  # 75% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except:
            return 0.0
    
    def _log_retraining_success(self, new_score: float, old_score: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        log_entry = {
            'timestamp': datetime.now(),
            'status': 'SUCCESS',
            'new_score': new_score,
            'old_score': old_score,
            'improvement': new_score - old_score
        }
        
        self.retrain_history.append(log_entry)
        logger.info(f"‚úÖ Retraining successful: {old_score:.3f} ‚Üí {new_score:.3f} (+{new_score-old_score:.3f})")
    
    def _log_retraining_failed(self, new_score: float, old_score: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        log_entry = {
            'timestamp': datetime.now(),
            'status': 'FAILED',
            'new_score': new_score,
            'old_score': old_score,
            'improvement': new_score - old_score
        }
        
        self.retrain_history.append(log_entry)
        logger.info(f"‚ùå Retraining failed: {old_score:.3f} ‚Üí {new_score:.3f} ({new_score-old_score:.3f})")
    
    def schedule_retraining(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üìÖ Setting up retraining schedule")
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤ 2:00 –Ω–æ—á–∏
        schedule.every().day.at("02:00").do(self.retrain_ml_models)
        
        # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
        schedule.every(6).hours.do(self._check_performance_and_retrain)
        
        # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä—ã–Ω–∫–∞ (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞)
        schedule.every(4).hours.do(self._check_market_regime_and_retrain)
        
        logger.info("‚úÖ Retraining schedule configured")
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def _check_performance_and_retrain(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            current_performance = self._get_current_model_performance()
            
            if current_performance < self.config['performance_threshold']:
                logger.warning(f"Performance below threshold: {current_performance:.3f} < {self.config['performance_threshold']}")
                self.retrain_ml_models()
                
        except Exception as e:
            logger.error(f"Error checking performance: {e}")
    
    def _check_market_regime_and_retrain(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            if self.config.get('market_regime_detection', False):
                recent_data = self.collect_recent_data(days=7)
                
                if not recent_data.empty and self.detect_market_regime_change(recent_data):
                    logger.info("Market regime change detected, initiating retraining")
                    self.retrain_ml_models()
                    
        except Exception as e:
            logger.error(f"Error checking market regime: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scheduler = MLRetrainScheduler()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
    logger.info("üß™ Running test retraining")
    success = scheduler.retrain_ml_models()
    
    if success:
        logger.info("‚úÖ Test retraining completed successfully")
    else:
        logger.info("‚ùå Test retraining failed")
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
    # scheduler.schedule_retraining()

if __name__ == "__main__":
    main()

