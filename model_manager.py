#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

import os
import pickle
import joblib
import json
import pandas as pd
from datetime import datetime
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class ModelManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    
    def __init__(self, models_dir="models"):
        self.models_dir = models_dir
        self.ensure_directories()
    
    def ensure_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            self.models_dir,
            os.path.join(self.models_dir, "arima"),
            os.path.join(self.models_dir, "lstm"),
            os.path.join(self.models_dir, "ensemble"),
            os.path.join(self.models_dir, "sarima"),
            os.path.join(self.models_dir, "metadata")
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
    
    def save_model(self, model, model_name: str, symbol: str, strategy_type: str, 
                   metadata: Dict[str, Any] = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{symbol}_{model_name}_{timestamp}.pkl"
            filepath = os.path.join(self.models_dir, strategy_type, filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            with open(filepath, 'wb') as f:
                pickle.dump(model, f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if metadata is None:
                metadata = {}
            
            metadata.update({
                'model_name': model_name,
                'symbol': symbol,
                'strategy_type': strategy_type,
                'timestamp': timestamp,
                'filepath': filepath,
                'created_at': datetime.now().isoformat()
            })
            
            metadata_file = os.path.join(self.models_dir, "metadata", f"{filename}.json")
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return None
    
    def load_model(self, filepath: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        try:
            with open(filepath, 'rb') as f:
                model = pickle.load(f)
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {filepath}")
            return model
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {filepath}: {e}")
            return None
    
    def load_latest_model(self, symbol: str, strategy_type: str, model_name: str = None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            strategy_dir = os.path.join(self.models_dir, strategy_type)
            
            if not os.path.exists(strategy_dir):
                logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {strategy_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            pattern = f"{symbol}_{model_name}" if model_name else symbol
            files = [f for f in os.listdir(strategy_dir) if f.startswith(pattern) and f.endswith('.pkl')]
            
            if not files:
                logger.warning(f"–ú–æ–¥–µ–ª–∏ –¥–ª—è {symbol} ({strategy_type}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
            files.sort(reverse=True)
            latest_file = files[0]
            filepath = os.path.join(strategy_dir, latest_file)
            
            return self.load_model(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏ {symbol} ({strategy_type}): {e}")
            return None
    
    def list_models(self, symbol: str = None, strategy_type: str = None) -> pd.DataFrame:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            models_data = []
            
            for strategy in os.listdir(self.models_dir):
                if strategy == "metadata":
                    continue
                
                if strategy_type and strategy != strategy_type:
                    continue
                
                strategy_path = os.path.join(self.models_dir, strategy)
                if not os.path.isdir(strategy_path):
                    continue
                
                for filename in os.listdir(strategy_path):
                    if not filename.endswith('.pkl'):
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –∏–º—è —Ñ–∞–π–ª–∞: SYMBOL_MODELNAME_TIMESTAMP.pkl
                    parts = filename.replace('.pkl', '').split('_')
                    if len(parts) >= 3:
                        file_symbol = parts[0]
                        model_name = '_'.join(parts[1:-1])
                        timestamp = parts[-1]
                        
                        if symbol and file_symbol != symbol:
                            continue
                        
                        filepath = os.path.join(strategy_path, filename)
                        file_size = os.path.getsize(filepath)
                        created_time = datetime.fromtimestamp(os.path.getctime(filepath))
                        
                        models_data.append({
                            'symbol': file_symbol,
                            'strategy': strategy,
                            'model_name': model_name,
                            'timestamp': timestamp,
                            'filepath': filepath,
                            'size_mb': round(file_size / 1024 / 1024, 2),
                            'created': created_time.strftime('%Y-%m-%d %H:%M:%S')
                        })
            
            if models_data:
                df = pd.DataFrame(models_data)
                return df.sort_values(['symbol', 'strategy', 'created'], ascending=[True, True, False])
            else:
                return pd.DataFrame()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            return pd.DataFrame()
    
    def delete_old_models(self, keep_count: int = 5):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"""
        try:
            models_df = self.list_models()
            
            if models_df.empty:
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            for (symbol, strategy), group in models_df.groupby(['symbol', 'strategy']):
                if len(group) > keep_count:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
                    group_sorted = group.sort_values('created', ascending=False)
                    to_delete = group_sorted.iloc[keep_count:]
                    
                    for _, model_info in to_delete.iterrows():
                        try:
                            os.remove(model_info['filepath'])
                            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å: {model_info['filepath']}")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {model_info['filepath']}: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π: {e}")
    
    def get_model_info(self, filepath: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
        try:
            # –ò—â–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_file = os.path.join(self.models_dir, "metadata", f"{os.path.basename(filepath)}.json")
            
            if os.path.exists(metadata_file):
                with open(metadata_file, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                return metadata
            else:
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞
                stat = os.stat(filepath)
                return {
                    'filepath': filepath,
                    'size_mb': round(stat.st_size / 1024 / 1024, 2),
                    'created_at': datetime.fromtimestamp(stat.st_ctime).isoformat(),
                    'modified_at': datetime.fromtimestamp(stat.st_mtime).isoformat()
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ {filepath}: {e}")
            return {}

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã ModelManager"""
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MODEL MANAGER")
    print("=" * 50)
    
    manager = ModelManager()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    for root, dirs, files in os.walk(manager.models_dir):
        level = root.replace(manager.models_dir, '').count(os.sep)
        indent = ' ' * 2 * level
        print(f"{indent}{os.path.basename(root)}/")
        subindent = ' ' * 2 * (level + 1)
        for file in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
            print(f"{subindent}{file}")
        if len(files) > 5:
            print(f"{subindent}... –∏ –µ—â–µ {len(files) - 5} —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    print("\nüìä –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π:")
    models_df = manager.list_models()
    if not models_df.empty:
        print(models_df.to_string(index=False))
    else:
        print("–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(models_df)}")
    if not models_df.empty:
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {models_df['size_mb'].sum():.2f} MB")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {models_df['symbol'].nunique()}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {models_df['strategy'].nunique()}")

if __name__ == "__main__":
    main()
