#!/usr/bin/env python3
"""
Portfolio Test Results - Direct execution
"""

import pandas as pd
import numpy as np
from datetime import datetime
import json

# Generate realistic data for portfolio
np.random.seed(42)

portfolio = {
    'SBER': {'price': 250, 'volatility': 0.025},
    'GAZP': {'price': 150, 'volatility': 0.030},
    'LKOH': {'price': 5500, 'volatility': 0.035},
    'YNDX': {'price': 2500, 'volatility': 0.040},
    'ROSN': {'price': 450, 'volatility': 0.032},
    'NVTK': {'price': 1200, 'volatility': 0.028},
    'MTSS': {'price': 300, 'volatility': 0.020},
    'MGNT': {'price': 5000, 'volatility': 0.022}
}

# Generate 252 days of data
dates = pd.date_range(start='2023-01-01', periods=252, freq='D')

market_data = {}
for symbol, params in portfolio.items():
    prices = [params['price']]
    returns = np.random.normal(0.0005, params['volatility'], 252)
    
    for ret in returns[1:]:
        prices.append(prices[-1] * (1 + ret))
    
    df = pd.DataFrame({
        'close': prices,
        'volume': np.random.randint(500000, 2000000, 252)
    }, index=dates)
    
    market_data[symbol] = df

# Simple RSI Strategy Test
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Backtest parameters
initial_capital = 100000
capital = initial_capital
positions = {}
trades = []
commission_rate = 0.003  # 0.3%

def execute_trade(symbol, action, price, quantity, date):
    global capital, positions
    
    trade_value = price * quantity
    commission = max(trade_value * commission_rate, 1.0)
    
    if action == 'buy':
        total_cost = trade_value + commission
        if total_cost <= capital:
            capital -= total_cost
            if symbol in positions:
                positions[symbol] += quantity
            else:
                positions[symbol] = quantity
            
            trades.append({
                'date': date,
                'symbol': symbol,
                'action': 'buy',
                'price': price,
                'quantity': quantity,
                'cost': total_cost
            })
            return True
    elif action == 'sell':
        if symbol in positions and positions[symbol] >= quantity:
            proceeds = trade_value - commission
            capital += proceeds
            positions[symbol] -= quantity
            
            if positions[symbol] == 0:
                del positions[symbol]
            
            trades.append({
                'date': date,
                'symbol': symbol,
                'action': 'sell',
                'price': price,
                'quantity': quantity,
                'proceeds': proceeds
            })
            return True
    return False

# Run backtest
for i, date in enumerate(dates[30:], 30):  # Start after 30 periods
    current_prices = {}
    
    for symbol, df in market_data.items():
        current_prices[symbol] = df['close'].iloc[i]
        
        # Calculate RSI
        rsi = calculate_rsi(df['close'].iloc[:i+1])
        current_rsi = rsi.iloc[-1]
        
        if pd.isna(current_rsi):
            continue
        
        price = current_prices[symbol]
        
        # RSI Strategy: Buy when oversold, sell when overbought
        if current_rsi < 30 and symbol not in positions:
            # Buy 10% of available capital
            target_value = capital * 0.1
            quantity = int(target_value / price)
            if quantity > 0:
                execute_trade(symbol, 'buy', price, quantity, date)
        
        elif current_rsi > 70 and symbol in positions:
            # Sell all position
            quantity = positions[symbol]
            execute_trade(symbol, 'sell', price, quantity, date)

# Calculate final portfolio value
final_value = capital
for symbol, quantity in positions.items():
    final_value += quantity * market_data[symbol]['close'].iloc[-1]

total_return = (final_value - initial_capital) / initial_capital

# Calculate transaction costs
total_commission = 0
for trade in trades:
    if trade['action'] == 'buy':
        total_commission += trade['cost'] - (trade['price'] * trade['quantity'])
    else:
        total_commission += (trade['price'] * trade['quantity']) - trade['proceeds']

# Results
results = {
    'timestamp': datetime.now().isoformat(),
    'initial_capital': initial_capital,
    'final_value': final_value,
    'total_return': total_return,
    'annualized_return': (1 + total_return) ** (252/252) - 1,
    'monthly_return': (1 + total_return) ** (1/12) - 1,
    'total_trades': len(trades),
    'transaction_costs': total_commission,
    'transaction_cost_ratio': total_commission / initial_capital,
    'portfolio_symbols': list(portfolio.keys()),
    'meets_target': (1 + total_return) ** (1/12) - 1 >= 0.20,
    'max_positions': len(positions),
    'portfolio_analysis': {
        symbol: {
            'start_price': df['close'].iloc[0],
            'end_price': df['close'].iloc[-1],
            'total_return': (df['close'].iloc[-1] / df['close'].iloc[0] - 1),
            'volatility': df['close'].pct_change().std() * np.sqrt(252)
        }
        for symbol, df in market_data.items()
    }
}

# Save results
with open('portfolio_test_results.json', 'w') as f:
    json.dump(results, f, indent=2)

# Create report
report = f"""
üéØ –ü–û–†–¢–§–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–´–ú–ò –ò–ó–î–ï–†–ñ–ö–ê–ú–ò
{'='*80}

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 2023 –≥–æ–¥ (252 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è)
- –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {initial_capital:,.0f} ‚ÇΩ
- –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: {final_value:,.0f} ‚ÇΩ
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {len(portfolio)}
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: RSI (–ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ RSI < 30, –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ RSI > 70)

üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}
- –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['annualized_return']:.2%}
- –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['monthly_return']:.2%}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(trades)}
- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏: {total_commission:.2f} ‚ÇΩ ({results['transaction_cost_ratio']:.2%})
- –û—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(positions)}

üìä –ê–ù–ê–õ–ò–ó –ü–û–†–¢–§–ï–õ–Ø:
{'-'*60}
"""

for symbol, analysis in results['portfolio_analysis'].items():
    report += f"{symbol}: {analysis['start_price']:.0f} ‚Üí {analysis['end_price']:.0f} ({analysis['total_return']:.2%})\n"

# Goal analysis
monthly_target = 0.20
meets_target = "‚úÖ" if results['meets_target'] else "‚ùå"

report += f"""

üéØ –î–û–°–¢–ò–ñ–ï–ù–ò–ï –¶–ï–õ–ò 20% –í –ú–ï–°–Ø–¶:
{'-'*60}
–¶–µ–ª—å: {monthly_target:.0%} –≤ –º–µ—Å—è—Ü
–†–µ–∑—É–ª—å—Ç–∞—Ç: {results['monthly_return']:.2%} –≤ –º–µ—Å—è—Ü {meets_target}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –¶–ï–õ–ò:
1. –£–≤–µ–ª–∏—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ (leverage)
2. –¢–æ—Ä–≥–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã)
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
5. –°–Ω–∏–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏
6. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏

üèÜ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
{'-'*60}
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ, —á—Ç–æ –ø—Ä–æ—Å—Ç–∞—è RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–∑ {len(portfolio)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –∏–∑–¥–µ—Ä–∂–∫–∞–º–∏ T-Bank (0.3% –∫–æ–º–∏—Å—Å–∏—è) –¥–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {results['monthly_return']:.2%} –≤ –º–µ—Å—è—Ü.

‚ö†Ô∏è  –í–ê–ñ–ù–û: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –∏–∑–¥–µ—Ä–∂–∫–∞–º–∏.
    –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.
"""

# Save report
with open('portfolio_test_report.txt', 'w', encoding='utf-8') as f:
    f.write(report)

print("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print("üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ portfolio_test_report.txt")
print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ portfolio_test_results.json")
