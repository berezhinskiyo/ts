#!/usr/bin/env python3
"""
Update Test Data from T-Bank API
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ T-Bank API
"""

import asyncio
import os
import requests
import pandas as pd
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config/environments/.env')

class TBankDataUpdater:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ T-Bank API"""
    
    def __init__(self):
        self.token = os.getenv('TBANK_TOKEN')
        self.base_url = "https://invest-public-api.tinkoff.ru/rest/"
        self.headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        
        # FIGI –∫–æ–¥—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π
        self.figi_mapping = {
            'SBER': 'BBG004730N88',     # –°–±–µ—Ä–±–∞–Ω–∫
            'GAZP': 'BBG004730ZJ9',     # –ì–∞–∑–ø—Ä–æ–º
            'LKOH': 'BBG004730JJ5',     # –õ–£–ö–û–ô–õ
            'YNDX': 'BBG006L8G4H1',     # –Ø–Ω–¥–µ–∫—Å
            'ROSN': 'BBG0047315Y7',     # –†–æ—Å–Ω–µ—Ñ—Ç—å
            'NVTK': 'BBG00475KKY8',     # –ù–û–í–ê–¢–≠–ö
            'TATN': 'BBG004RVFFC0',     # –¢–∞—Ç–Ω–µ—Ñ—Ç—å
            'MTSS': 'BBG004730N88',     # –ú–¢–°
            'MGNT': 'BBG004RVFFC0',     # –ú–∞–≥–Ω–∏—Ç
            'RTKM': 'BBG004RVFFC0',     # –†–æ—Å—Ç–µ–ª–µ–∫–æ–º
            'OZON': 'BBG006L8G4H1',     # OZON
            'FIVE': 'BBG004RVFFC0'      # X5 Retail Group
        }
        
        print(f"üîß T-Bank Data Updater initialized")
        print(f"üîë Token: {self.token[:20]}...")
        print(f"üìä Instruments: {len(self.figi_mapping)}")
    
    def make_request(self, endpoint, payload=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        url = f"{self.base_url}{endpoint}"
        try:
            response = requests.post(url, headers=self.headers, json=payload or {})
            return response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def get_historical_data(self, figi, days=252):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {figi} –∑–∞ {days} –¥–Ω–µ–π...")
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        payload = {
            "figi": figi,
            "from": start_date.isoformat() + "Z",
            "to": end_date.isoformat() + "Z",
            "interval": "CANDLE_INTERVAL_DAY"
        }
        
        response = self.make_request("tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles", payload)
        
        if response and response.status_code == 200:
            try:
                data = response.json()
                if 'candles' in data and data['candles']:
                    candles = []
                    for candle in data['candles']:
                        candles.append({
                            'date': candle['time'][:10],  # YYYY-MM-DD
                            'open': float(candle['open']['units']),
                            'high': float(candle['high']['units']),
                            'low': float(candle['low']['units']),
                            'close': float(candle['close']['units']),
                            'volume': int(candle['volume'])
                        })
                    
                    df = pd.DataFrame(candles)
                    df['date'] = pd.to_datetime(df['date'])
                    df.set_index('date', inplace=True)
                    df.sort_index(inplace=True)
                    
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
                    return df
                else:
                    print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code if response else 'No response'}")
            return None
    
    def get_last_prices(self, figis):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω"""
        print(f"üí≤ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –¥–ª—è {len(figis)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        payload = {"figi": figis}
        response = self.make_request("tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices", payload)
        
        if response and response.status_code == 200:
            try:
                data = response.json()
                prices = {}
                if 'lastPrices' in data:
                    for price in data['lastPrices']:
                        prices[price['figi']] = float(price['price']['units'])
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω: {len(prices)}")
                return prices
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω: {e}")
                return {}
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code if response else 'No response'}")
            return {}
    
    def update_all_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ T-Bank API...")
        print("=" * 60)
        
        all_data = {}
        last_prices = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        for ticker, figi in self.figi_mapping.items():
            print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {ticker} ({figi})...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = self.get_historical_data(figi, days=252)  # 1 –≥–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            
            if df is not None:
                all_data[ticker] = df
                print(f"‚úÖ {ticker}: {len(df)} –¥–Ω–µ–π, —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.2f} —Ä—É–±.")
            else:
                print(f"‚ùå {ticker}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        print(f"\nüí≤ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω...")
        figis = list(self.figi_mapping.values())
        last_prices = self.get_last_prices(figis)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ FIGI -> Ticker
        figi_to_ticker = {v: k for k, v in self.figi_mapping.items()}
        
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã:")
        for figi, price in last_prices.items():
            ticker = figi_to_ticker.get(figi, 'Unknown')
            print(f"  {ticker}: {price:.2f} —Ä—É–±.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_data(all_data, last_prices)
        
        return all_data, last_prices
    
    def save_data(self, all_data, last_prices):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        os.makedirs('data/real_time', exist_ok=True)
        os.makedirs('data/historical', exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        for ticker, df in all_data.items():
            filename = f"data/historical/{ticker}_tbank.csv"
            df.to_csv(filename)
            print(f"‚úÖ {ticker}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        prices_data = {
            'timestamp': datetime.now().isoformat(),
            'prices': last_prices,
            'figi_mapping': self.figi_mapping
        }
        
        with open('data/real_time/last_prices.json', 'w', encoding='utf-8') as f:
            json.dump(prices_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/real_time/last_prices.json")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        self.create_summary_report(all_data, last_prices)
    
    def create_summary_report(self, all_data, last_prices):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'data_source': 'T-Bank API',
            'instruments': {},
            'summary': {
                'total_instruments': len(all_data),
                'successful_downloads': len([d for d in all_data.values() if d is not None]),
                'total_data_points': sum(len(df) for df in all_data.values() if df is not None)
            }
        }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
        for ticker, df in all_data.items():
            if df is not None:
                report['instruments'][ticker] = {
                    'figi': self.figi_mapping[ticker],
                    'data_points': len(df),
                    'date_range': {
                        'start': df.index[0].isoformat(),
                        'end': df.index[-1].isoformat()
                    },
                    'price_range': {
                        'min': float(df['low'].min()),
                        'max': float(df['high'].max()),
                        'last': float(df['close'].iloc[-1])
                    },
                    'volume_avg': int(df['volume'].mean())
                }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('data/real_time/data_summary.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ data/real_time/data_summary.json")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
        print(f"  üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {report['summary']['total_instruments']}")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {report['summary']['successful_downloads']}")
        print(f"  üìÖ –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {report['summary']['total_data_points']}")
        
        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ T-Bank Data Updater")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä
    updater = TBankDataUpdater()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    all_data, last_prices = updater.update_all_data()
    
    print(f"\nüéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ T-Bank API")
    print(f"üìä –ì–æ—Ç–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    
    return all_data, last_prices

if __name__ == "__main__":
    main()
