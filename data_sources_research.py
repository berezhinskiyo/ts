#!/usr/bin/env python3
"""
–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ú–ú–í–ë
"""

import requests
import pandas as pd
import json
from datetime import datetime, timedelta
import os
import time

class MOEXDataSources:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –ú–ú–í–ë"""
    
    def __init__(self):
        self.sources = {
            'moex_official': {
                'name': '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π)',
                'url': 'https://iss.moex.com/iss/',
                'description': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏',
                'tick_data': True,
                'cost': '–ü–ª–∞—Ç–Ω—ã–π',
                'api_docs': 'https://iss.moex.com/iss/reference/'
            },
            'finam': {
                'name': '–§–∏–Ω–∞–º',
                'url': 'https://www.finam.ru/',
                'description': '–ë—Ä–æ–∫–µ—Ä —Å API –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
                'tick_data': True,
                'cost': '–ü–ª–∞—Ç–Ω—ã–π',
                'api_docs': 'https://www.finam.ru/profile/moex-akcii/'
            },
            'quik': {
                'name': 'QUIK',
                'url': 'https://www.quik.ru/',
                'description': '–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
                'tick_data': True,
                'cost': '–ü–ª–∞—Ç–Ω—ã–π',
                'api_docs': 'https://www.quik.ru/support/api'
            },
            'ticktrack': {
                'name': 'TickTrack',
                'url': 'https://ticktrack.ru/',
                'description': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                'tick_data': True,
                'cost': '–ü–ª–∞—Ç–Ω—ã–π',
                'api_docs': 'https://ticktrack.ru/ru'
            },
            'xtick': {
                'name': 'XTick',
                'url': 'https://xtick.plan.ru/',
                'description': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
                'tick_data': True,
                'cost': '–ü–ª–∞—Ç–Ω—ã–π',
                'api_docs': 'https://xtick.plan.ru/tikker.html'
            },
            'smart_lab': {
                'name': 'Smart-Lab',
                'url': 'https://smart-lab.ru/',
                'description': '–§–æ—Ä—É–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Å –æ–±–º–µ–Ω–æ–º –¥–∞–Ω–Ω—ã–º–∏',
                'tick_data': True,
                'cost': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)',
                'api_docs': 'https://smart-lab.ru/blog/752317.php'
            }
        }
    
    def get_moex_instruments(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ú–ú–í–ë"""
        try:
            url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities.json"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                securities = data['securities']['data']
                columns = data['securities']['columns']
                
                df = pd.DataFrame(securities, columns=columns)
                return df[['SECID', 'SHORTNAME', 'LOTSIZE', 'MINSTEP']].head(20)
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ú–ú–í–ë: {e}")
            return None
    
    def test_moex_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ú–ú–í–ë"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ SBER
            url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/SBER/candles.json"
            params = {
                'from': '2024-09-01',
                'till': '2024-09-15',
                'interval': 1  # 1 –º–∏–Ω—É—Ç–∞
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                candles = data['candles']['data']
                columns = data['candles']['columns']
                
                if candles:
                    df = pd.DataFrame(candles, columns=columns)
                    print(f"‚úÖ API –ú–ú–í–ë –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –ø–æ SBER")
                    return True
                else:
                    print("‚ö†Ô∏è API –ú–ú–í–ë –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ")
                    return False
            else:
                print(f"‚ùå API –ú–ú–í–ë –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ú–ú–í–ë: {e}")
            return False
    
    def get_tick_data_sources(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –ò–°–¢–û–ß–ù–ò–ö–ò –¢–ò–ö–û–í–´–• –î–ê–ù–ù–´–• –ú–ú–í–ë:")
        print("=" * 60)
        
        for key, source in self.sources.items():
            print(f"\nüîπ {source['name']}")
            print(f"   URL: {source['url']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {source['description']}")
            print(f"   –¢–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {'‚úÖ' if source['tick_data'] else '‚ùå'}")
            print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {source['cost']}")
            if 'api_docs' in source:
                print(f"   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {source['api_docs']}")
    
    def create_data_download_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        script_content = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ú–ú–í–ë
"""

import requests
import pandas as pd
import json
from datetime import datetime, timedelta
import os
import time

class MOEXTickDataDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ú–ú–í–ë"""
    
    def __init__(self, output_dir="data/tick_data"):
        self.output_dir = output_dir
        self.base_url = "https://iss.moex.com/iss/"
        os.makedirs(output_dir, exist_ok=True)
    
    def download_candles(self, symbol, days=30):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥ —Ç–∏–∫–æ–≤—ã—Ö)"""
        try:
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            url = f"{self.base_url}engines/stock/markets/shares/boards/TQBR/securities/{symbol}/candles.json"
            params = {
                'from': start_date.strftime('%Y-%m-%d'),
                'till': end_date.strftime('%Y-%m-%d'),
                'interval': 1  # 1 –º–∏–Ω—É—Ç–∞
            }
            
            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                candles = data['candles']['data']
                columns = data['candles']['columns']
                
                if candles:
                    df = pd.DataFrame(candles, columns=columns)
                    df['datetime'] = pd.to_datetime(df['begin'])
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    filename = f"{self.output_dir}/{symbol}_1min_{days}d.csv"
                    df.to_csv(filename, index=False)
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ {filename}")
                    return df
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {symbol}: {e}")
            return None
    
    def download_multiple_symbols(self, symbols, days=30):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        results = {}
        
        for symbol in symbols:
            df = self.download_candles(symbol, days)
            if df is not None:
                results[symbol] = df
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return results

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ú–ú–í–ë
    symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'TATN', 'MGNT', 'MTSS']
    
    downloader = MOEXTickDataDownloader()
    results = downloader.download_multiple_symbols(symbols, days=7)
    
    print(f"\\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
'''
        
        with open('download_tick_data.py', 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç download_tick_data.py –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        recommendations = {
            'free_sources': [
                {
                    'name': 'MOEX API (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)',
                    'description': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º',
                    'pros': ['–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫', '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π', '–ù–∞–¥–µ–∂–Ω—ã–π'],
                    'cons': ['–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏', '–ù–µ—Ç —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'Rate limits']
                }
            ],
            'paid_sources': [
                {
                    'name': 'TickTrack',
                    'description': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                    'pros': ['–ü–æ–ª–Ω—ã–µ —Ç–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', 'API –¥–æ—Å—Ç—É–ø'],
                    'cons': ['–ü–ª–∞—Ç–Ω—ã–π', '–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'],
                    'cost': '–û—Ç 5000‚ÇΩ/–º–µ—Å—è—Ü'
                },
                {
                    'name': '–§–∏–Ω–∞–º API',
                    'description': 'API –±—Ä–æ–∫–µ—Ä–∞ –§–∏–Ω–∞–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
                    'pros': ['–î–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º', '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
                    'cons': ['–ü–ª–∞—Ç–Ω—ã–π', '–¢—Ä–µ–±—É–µ—Ç –±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á–µ—Ç'],
                    'cost': '–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞—Ä–∏—Ñ–∞'
                }
            ],
            'alternative_sources': [
                {
                    'name': 'Smart-Lab —Ñ–æ—Ä—É–º',
                    'description': '–°–æ–æ–±—â–µ—Å—Ç–≤–æ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤, –æ–±–º–µ–Ω–∏–≤–∞—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã–º–∏',
                    'pros': ['–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π', '–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', '–°–æ–æ–±—â–µ—Å—Ç–≤–æ'],
                    'cons': ['–ù–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π', '–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–º']
                }
            ]
        }
        
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú –î–ê–ù–ù–´–•:")
        print("=" * 60)
        
        for category, sources in recommendations.items():
            print(f"\nüìÇ {category.upper().replace('_', ' ')}:")
            for source in sources:
                print(f"\nüîπ {source['name']}")
                print(f"   {source['description']}")
                print(f"   ‚úÖ –ü–ª—é—Å—ã: {', '.join(source['pros'])}")
                print(f"   ‚ùå –ú–∏–Ω—É—Å—ã: {', '.join(source['cons'])}")
                if 'cost' in source:
                    print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {source['cost']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–• –ú–ú–í–ë")
    print("=" * 60)
    
    moex = MOEXDataSources()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    moex.get_tick_data_sources()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ú–ú–í–ë
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ú–ú–í–ë:")
    print("-" * 30)
    moex.test_moex_api()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    print("\nüìã –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ú–ú–í–ë:")
    print("-" * 30)
    instruments = moex.get_moex_instruments()
    if instruments is not None:
        print(instruments.to_string(index=False))
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ó–ê–ì–†–£–ó–ö–ò:")
    print("-" * 30)
    moex.create_data_download_script()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    moex.generate_recommendations()
    
    print("\n‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìÅ –°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print("   - models/ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)")
    print("   - data/tick_data/ (–¥–ª—è —Ç–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
    print("   - download_tick_data.py (—Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏)")

if __name__ == "__main__":
    main()
