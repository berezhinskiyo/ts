#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ MOEX API
"""

import requests
import time
import json
from datetime import datetime, timedelta
import pandas as pd
import asyncio
import aiohttp

class MOEXAPILimitsTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π MOEX API"""
    
    def __init__(self):
        self.base_url = "https://iss.moex.com/iss/"
        self.results = {}
    
    def test_rate_limits(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        intervals = [0.1, 0.2, 0.5, 1.0, 2.0]
        url = f"{self.base_url}engines/stock/markets/shares/boards/TQBR/securities/SBER/candles.json"
        params = {
            'from': '2024-09-15',
            'till': '2024-09-16',
            'interval': 1
        }
        
        for interval in intervals:
            print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}—Å...")
            success_count = 0
            error_count = 0
            start_time = time.time()
            
            for i in range(10):  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤
                try:
                    response = requests.get(url, params=params, timeout=10)
                    if response.status_code == 200:
                        success_count += 1
                    else:
                        error_count += 1
                        print(f"    –û—à–∏–±–∫–∞ {response.status_code} –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ {i+1}")
                except Exception as e:
                    error_count += 1
                    print(f"    –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ {i+1}: {e}")
                
                if i < 9:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    time.sleep(interval)
            
            elapsed_time = time.time() - start_time
            success_rate = (success_count / 10) * 100
            
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/10 —É—Å–ø–µ—à–Ω—ã—Ö ({success_rate:.1f}%) –∑–∞ {elapsed_time:.1f}—Å")
            
            self.results[f'rate_limit_{interval}s'] = {
                'success_count': success_count,
                'error_count': error_count,
                'success_rate': success_rate,
                'elapsed_time': elapsed_time
            }
    
    def test_data_limits(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        periods = [1, 7, 30, 90, 365]  # –¥–Ω–∏
        
        for days in periods:
            print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ {days} –¥–Ω–µ–π...")
            
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            url = f"{self.base_url}engines/stock/markets/shares/boards/TQBR/securities/SBER/candles.json"
            params = {
                'from': start_date.strftime('%Y-%m-%d'),
                'till': end_date.strftime('%Y-%m-%d'),
                'interval': 1  # 1 –º–∏–Ω—É—Ç–∞
            }
            
            try:
                start_time = time.time()
                response = requests.get(url, params=params, timeout=30)
                elapsed_time = time.time() - start_time
                
                if response.status_code == 200:
                    data = response.json()
                    candles = data['candles']['data']
                    
                    print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(candles)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {elapsed_time:.2f}—Å")
                    
                    self.results[f'data_limit_{days}d'] = {
                        'success': True,
                        'records_count': len(candles),
                        'response_time': elapsed_time,
                        'status_code': response.status_code
                    }
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
                    self.results[f'data_limit_{days}d'] = {
                        'success': False,
                        'status_code': response.status_code,
                        'response_time': elapsed_time
                    }
                    
            except Exception as e:
                print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                self.results[f'data_limit_{days}d'] = {
                    'success': False,
                    'error': str(e)
                }
    
    def test_concurrent_requests(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        async def make_request(session, symbol, i):
            url = f"{self.base_url}engines/stock/markets/shares/boards/TQBR/securities/{symbol}/candles.json"
            params = {
                'from': '2024-09-15',
                'till': '2024-09-16',
                'interval': 1
            }
            
            try:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        candles = data['candles']['data']
                        return {'success': True, 'records': len(candles), 'request_id': i}
                    else:
                        return {'success': False, 'status': response.status, 'request_id': i}
            except Exception as e:
                return {'success': False, 'error': str(e), 'request_id': i}
        
        async def test_concurrent():
            symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN']
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for concurrent_count in [1, 3, 5, 10]:
                print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º {concurrent_count} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
                
                start_time = time.time()
                
                async with aiohttp.ClientSession() as session:
                    tasks = []
                    for i in range(concurrent_count):
                        symbol = symbols[i % len(symbols)]
                        task = make_request(session, symbol, i)
                        tasks.append(task)
                    
                    results = await asyncio.gather(*tasks)
                
                elapsed_time = time.time() - start_time
                success_count = sum(1 for r in results if r['success'])
                
                print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{concurrent_count} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞ {elapsed_time:.2f}—Å")
                
                self.results[f'concurrent_{concurrent_count}'] = {
                    'success_count': success_count,
                    'total_count': concurrent_count,
                    'success_rate': (success_count / concurrent_count) * 100,
                    'elapsed_time': elapsed_time,
                    'results': results
                }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        try:
            asyncio.run(test_concurrent())
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def test_different_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        endpoints = [
            {
                'name': '–°–≤–µ—á–∏ (candles)',
                'url': 'engines/stock/markets/shares/boards/TQBR/securities/SBER/candles.json',
                'params': {'from': '2024-09-15', 'till': '2024-09-16', 'interval': 1}
            },
            {
                'name': '–ò—Å—Ç–æ—Ä–∏—è (history)',
                'url': 'engines/stock/markets/shares/boards/TQBR/securities/SBER/history.json',
                'params': {'from': '2024-09-15', 'till': '2024-09-16'}
            },
            {
                'name': '–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
                'url': 'engines/stock/markets/shares/boards/TQBR/securities.json',
                'params': {}
            },
            {
                'name': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤',
                'url': 'engines/stock/markets/shares/boards/TQBR/securities/SBER/trades.json',
                'params': {'from': '2024-09-15', 'till': '2024-09-16'}
            }
        ]
        
        for endpoint in endpoints:
            print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º {endpoint['name']}...")
            
            try:
                start_time = time.time()
                response = requests.get(
                    f"{self.base_url}{endpoint['url']}", 
                    params=endpoint['params'], 
                    timeout=10
                )
                elapsed_time = time.time() - start_time
                
                if response.status_code == 200:
                    data = response.json()
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–µ—Ä–≤–æ–º –∫–ª—é—á–µ
                    first_key = list(data.keys())[0] if data else None
                    records_count = len(data[first_key]['data']) if first_key and 'data' in data[first_key] else 0
                    
                    print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ: {records_count} –∑–∞–ø–∏—Å–µ–π –∑–∞ {elapsed_time:.2f}—Å")
                    
                    self.results[f'endpoint_{endpoint["name"].replace(" ", "_").lower()}'] = {
                        'success': True,
                        'records_count': records_count,
                        'response_time': elapsed_time,
                        'status_code': response.status_code
                    }
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
                    self.results[f'endpoint_{endpoint["name"].replace(" ", "_").lower()}'] = {
                        'success': False,
                        'status_code': response.status_code,
                        'response_time': elapsed_time
                    }
                    
            except Exception as e:
                print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                self.results[f'endpoint_{endpoint["name"].replace(" ", "_").lower()}'] = {
                    'success': False,
                    'error': str(e)
                }
    
    def test_historical_depth(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥–æ–¥—ã
        years = [2024, 2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015]
        
        for year in years:
            print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {year} –≥–æ–¥...")
            
            start_date = f"{year}-01-01"
            end_date = f"{year}-01-07"  # –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è –≥–æ–¥–∞
            
            url = f"{self.base_url}engines/stock/markets/shares/boards/TQBR/securities/SBER/candles.json"
            params = {
                'from': start_date,
                'till': end_date,
                'interval': 1
            }
            
            try:
                start_time = time.time()
                response = requests.get(url, params=params, timeout=15)
                elapsed_time = time.time() - start_time
                
                if response.status_code == 200:
                    data = response.json()
                    candles = data['candles']['data']
                    
                    print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(candles)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {elapsed_time:.2f}—Å")
                    
                    self.results[f'historical_{year}'] = {
                        'success': True,
                        'records_count': len(candles),
                        'response_time': elapsed_time,
                        'status_code': response.status_code
                    }
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
                    self.results[f'historical_{year}'] = {
                        'success': False,
                        'status_code': response.status_code,
                        'response_time': elapsed_time
                    }
                    
            except Exception as e:
                print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                self.results[f'historical_{year}'] = {
                    'success': False,
                    'error': str(e)
                }
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"""
        print("\nüìã –û–¢–ß–ï–¢ –ü–û –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú MOEX API")
        print("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        print("\nüîÑ –õ–ò–ú–ò–¢–´ –ó–ê–ü–†–û–°–û–í:")
        rate_limits = {k: v for k, v in self.results.items() if k.startswith('rate_limit_')}
        if rate_limits:
            for interval, result in rate_limits.items():
                interval_val = interval.replace('rate_limit_', '').replace('s', '')
                print(f"  {interval_val}—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {result['success_rate']:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –û–ë–™–ï–ú–ê –î–ê–ù–ù–´–•:")
        data_limits = {k: v for k, v in self.results.items() if k.startswith('data_limit_')}
        if data_limits:
            for period, result in data_limits.items():
                days = period.replace('data_limit_', '').replace('d', '')
                if result['success']:
                    print(f"  {days} –¥–Ω–µ–π: ‚úÖ {result['records_count']} –∑–∞–ø–∏—Å–µ–π –∑–∞ {result['response_time']:.2f}—Å")
                else:
                    print(f"  {days} –¥–Ω–µ–π: ‚ùå –û—à–∏–±–∫–∞ {result.get('status_code', 'Unknown')}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        print("\n‚ö° –û–î–ù–û–í–†–ï–ú–ï–ù–ù–´–ï –ó–ê–ü–†–û–°–´:")
        concurrent = {k: v for k, v in self.results.items() if k.startswith('concurrent_')}
        if concurrent:
            for count, result in concurrent.items():
                req_count = count.replace('concurrent_', '')
                print(f"  {req_count} –∑–∞–ø—Ä–æ—Å–æ–≤: {result['success_rate']:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞ {result['elapsed_time']:.2f}—Å")
        
        # –ê–Ω–∞–ª–∏–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        print("\nüîó –î–û–°–¢–£–ü–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´:")
        endpoints = {k: v for k, v in self.results.items() if k.startswith('endpoint_')}
        if endpoints:
            for endpoint, result in endpoints.items():
                name = endpoint.replace('endpoint_', '').replace('_', ' ').title()
                if result['success']:
                    print(f"  {name}: ‚úÖ {result['records_count']} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"  {name}: ‚ùå –û—à–∏–±–∫–∞ {result.get('status_code', 'Unknown')}")
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìÖ –ì–õ–£–ë–ò–ù–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•:")
        historical = {k: v for k, v in self.results.items() if k.startswith('historical_')}
        if historical:
            available_years = []
            for year, result in historical.items():
                year_val = year.replace('historical_', '')
                if result['success']:
                    available_years.append(int(year_val))
                    print(f"  {year_val}: ‚úÖ {result['records_count']} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"  {year_val}: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            if available_years:
                print(f"\n  üìä –î–æ—Å—Ç—É–ø–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å {min(available_years)} –ø–æ {max(available_years)} –≥–æ–¥")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("  1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–µ–Ω–µ–µ 0.5-1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        print("  2. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ 30-90 –¥–Ω—è–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("  3. –ù–µ –¥–µ–ª–∞–π—Ç–µ –±–æ–ª–µ–µ 3-5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("  4. –ö—ç—à–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("  5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç 'candles' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('moex_api_limits_results.json', 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ moex_api_limits_results.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô MOEX API")
    print("=" * 60)
    
    tester = MOEXAPILimitsTester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tester.test_rate_limits()
    tester.test_data_limits()
    tester.test_concurrent_requests()
    tester.test_different_endpoints()
    tester.test_historical_depth()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    tester.generate_report()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
