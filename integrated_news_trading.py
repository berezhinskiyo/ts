#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
–ó–∞–º–µ–Ω–∞ NewsSentimentAnalyzer –≤ advanced_tensortrade_robots.py
"""

import asyncio
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
import pandas as pd
import numpy as np

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
from enhanced_news_analyzer import EnhancedNewsSentimentAnalyzer, NewsItem

logger = logging.getLogger(__name__)

class IntegratedNewsTradingStrategy:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, symbols: List[str], config_file: str = "news_config.json"):
        self.symbols = symbols
        self.news_analyzer = EnhancedNewsSentimentAnalyzer(config_file)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.sentiment_weight = 0.3
        self.technical_weight = 0.4
        self.pattern_weight = 0.3
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        self.buy_threshold = 0.2
        self.sell_threshold = -0.2
        self.confidence_threshold = 0.4
        
        logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    async def get_trading_signals(self, symbol: str, technical_signals: Dict, 
                                pattern_signals: Dict, days_back: int = 3) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            news = await self.news_analyzer.get_news_for_symbol(symbol, days_back)
            sentiment_analysis = self.news_analyzer.calculate_aggregate_sentiment(news)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            combined_signal = self.combine_signals(
                sentiment_analysis,
                technical_signals,
                pattern_signals
            )
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            trading_decision = self.make_trading_decision(combined_signal, sentiment_analysis)
            
            return {
                'symbol': symbol,
                'action': trading_decision['action'],
                'confidence': trading_decision['confidence'],
                'sentiment_score': sentiment_analysis['sentiment_score'],
                'sentiment_confidence': sentiment_analysis['confidence'],
                'news_count': sentiment_analysis['news_count'],
                'technical_signal': technical_signals.get('signal', 0.0),
                'pattern_signal': pattern_signals.get('signal', 0.0),
                'combined_signal': combined_signal,
                'reasoning': trading_decision['reasoning'],
                'recent_news': news[:3] if news else []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–æ–≤–æ—Å—Ç–∏
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}: {e}")
            return {
                'symbol': symbol,
                'action': 'hold',
                'confidence': 0.0,
                'error': str(e)
            }
    
    def combine_signals(self, sentiment: Dict, technical: Dict, pattern: Dict) -> float:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [-1, 1]
        sentiment_signal = np.clip(sentiment['sentiment_score'], -1, 1)
        technical_signal = np.clip(technical.get('signal', 0.0), -1, 1)
        pattern_signal = np.clip(pattern.get('signal', 0.0), -1, 1)
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
        combined = (
            sentiment_signal * self.sentiment_weight +
            technical_signal * self.technical_weight +
            pattern_signal * self.pattern_weight
        )
        
        return np.clip(combined, -1, 1)
    
    def make_trading_decision(self, combined_signal: float, sentiment: Dict) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        
        # –ë–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É
        if combined_signal > self.buy_threshold:
            base_action = 'buy'
            base_confidence = min(combined_signal, 1.0)
        elif combined_signal < self.sell_threshold:
            base_action = 'sell'
            base_confidence = min(abs(combined_signal), 1.0)
        else:
            base_action = 'hold'
            base_confidence = 0.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_quality_factor = min(sentiment['news_count'] / 10.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 10 –Ω–æ–≤–æ—Å—Ç—è–º
        sentiment_confidence_factor = sentiment['confidence']
        
        final_confidence = base_confidence * news_quality_factor * sentiment_confidence_factor
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        reasoning = self.generate_reasoning(combined_signal, sentiment, base_action, final_confidence)
        
        return {
            'action': base_action,
            'confidence': final_confidence,
            'reasoning': reasoning
        }
    
    def generate_reasoning(self, signal: float, sentiment: Dict, action: str, confidence: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        
        reasoning_parts = []
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞
        if abs(signal) > 0.5:
            reasoning_parts.append(f"–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª ({signal:.2f})")
        elif abs(signal) > 0.2:
            reasoning_parts.append(f"–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª ({signal:.2f})")
        else:
            reasoning_parts.append(f"–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª ({signal:.2f})")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        if sentiment['news_count'] > 0:
            if sentiment['sentiment_score'] > 0.2:
                reasoning_parts.append(f"–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ({sentiment['news_count']} —Å—Ç–∞—Ç–µ–π)")
            elif sentiment['sentiment_score'] < -0.2:
                reasoning_parts.append(f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ({sentiment['news_count']} —Å—Ç–∞—Ç–µ–π)")
            else:
                reasoning_parts.append(f"–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ({sentiment['news_count']} —Å—Ç–∞—Ç–µ–π)")
        else:
            reasoning_parts.append("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence > 0.7:
            reasoning_parts.append("–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        elif confidence > 0.4:
            reasoning_parts.append("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        else:
            reasoning_parts.append("–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        
        return f"{action.upper()}: " + ", ".join(reasoning_parts)
    
    async def backtest_with_news(self, historical_data: Dict[str, pd.DataFrame], 
                               days_back: int = 7) -> Dict[str, Any]:
        """–ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π"""
        
        results = {}
        
        for symbol in self.symbols:
            if symbol not in historical_data:
                continue
            
            logger.info(f"üîÑ –ë—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol} —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π...")
            
            df = historical_data[symbol]
            trades = []
            equity_history = []
            capital = 100000  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
            position = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            news = await self.news_analyzer.get_news_for_symbol(symbol, days_back)
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
            for i in range(60, len(df)):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 60-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                current_data = df.iloc[:i+1]
                current_price = df['close'].iloc[i]
                current_time = df['begin'].iloc[i]
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                relevant_news = [
                    n for n in news 
                    if abs((current_time - n.published_at).total_seconds()) < 24 * 3600  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                ]
                
                if relevant_news:
                    sentiment = self.news_analyzer.calculate_aggregate_sentiment(relevant_news)
                else:
                    sentiment = {'sentiment_score': 0.0, 'confidence': 0.0, 'news_count': 0}
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                technical_signals = self.generate_technical_signals(current_data)
                pattern_signals = {'signal': 0.0}  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                signal = await self.get_trading_signals(
                    symbol, technical_signals, pattern_signals, days_back=1
                )
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                if signal['action'] == 'buy' and position == 0 and signal['confidence'] > self.confidence_threshold:
                    position = capital / current_price
                    capital = 0
                    trades.append({
                        'type': 'buy',
                        'price': current_price,
                        'time': current_time,
                        'confidence': signal['confidence'],
                        'sentiment': sentiment['sentiment_score'],
                        'news_count': sentiment['news_count']
                    })
                
                elif signal['action'] == 'sell' and position > 0 and signal['confidence'] > self.confidence_threshold:
                    capital = position * current_price
                    position = 0
                    trades.append({
                        'type': 'sell',
                        'price': current_price,
                        'time': current_time,
                        'confidence': signal['confidence'],
                        'sentiment': sentiment['sentiment_score'],
                        'news_count': sentiment['news_count']
                    })
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                current_equity = capital + (position * current_price if position > 0 else 0)
                equity_history.append({
                    'time': current_time,
                    'equity': current_equity,
                    'price': current_price,
                    'sentiment': sentiment['sentiment_score']
                })
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            final_equity = capital + (position * df['close'].iloc[-1] if position > 0 else 0)
            total_return = (final_equity - 100000) / 100000 * 100
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            equity_values = [e['equity'] for e in equity_history]
            if equity_values:
                rolling_max = pd.Series(equity_values).expanding().max()
                drawdown = (pd.Series(equity_values) - rolling_max) / rolling_max * 100
                max_drawdown = drawdown.min()
            else:
                max_drawdown = 0.0
            
            results[symbol] = {
                'total_return': total_return,
                'max_drawdown': max_drawdown,
                'total_trades': len(trades),
                'trades': trades,
                'equity_history': equity_history,
                'final_equity': final_equity
            }
            
            logger.info(f"‚úÖ {symbol}: –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å={total_return:.2f}%, –ü—Ä–æ—Å–∞–¥–∫–∞={max_drawdown:.2f}%, –°–¥–µ–ª–æ–∫={len(trades)}")
        
        return results
    
    def generate_technical_signals(self, df: pd.DataFrame) -> Dict[str, float]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        
        if len(df) < 20:
            return {'signal': 0.0}
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        sma_20 = df['close'].rolling(20).mean().iloc[-1]
        current_price = df['close'].iloc[-1]
        
        # RSI (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        price_changes = df['close'].diff().dropna()
        gains = price_changes.where(price_changes > 0, 0).rolling(14).mean().iloc[-1]
        losses = (-price_changes.where(price_changes < 0, 0)).rolling(14).mean().iloc[-1]
        rsi = 100 - (100 / (1 + gains / losses)) if losses > 0 else 50
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        signal = 0.0
        
        # –°–∏–≥–Ω–∞–ª –ø–æ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π
        if current_price > sma_20 * 1.02:  # –¶–µ–Ω–∞ –Ω–∞ 2% –≤—ã—à–µ SMA
            signal += 0.3
        elif current_price < sma_20 * 0.98:  # –¶–µ–Ω–∞ –Ω–∞ 2% –Ω–∏–∂–µ SMA
            signal -= 0.3
        
        # –°–∏–≥–Ω–∞–ª –ø–æ RSI
        if rsi > 70:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            signal -= 0.2
        elif rsi < 30:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            signal += 0.2
        
        return {'signal': np.clip(signal, -1, 1)}
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        await self.news_analyzer.close()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    symbols = ['AAPL', 'GOOGL', 'MSFT']
    strategy = IntegratedNewsTradingStrategy(symbols)
    
    # –ü—Ä–∏–º–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏ –ø–∞—Ç—Ç–µ—Ä–Ω —Å–∏–≥–Ω–∞–ª–æ–≤
    technical_signals = {'signal': 0.3}
    pattern_signals = {'signal': 0.1}
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    for symbol in symbols:
        signal = await strategy.get_trading_signals(symbol, technical_signals, pattern_signals)
        
        print(f"\nüìä –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}:")
        print(f"  –î–µ–π—Å—Ç–≤–∏–µ: {signal['action']}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.3f}")
        print(f"  –°–µ–Ω—Ç–∏–º–µ–Ω—Ç: {signal['sentiment_score']:.3f}")
        print(f"  –ù–æ–≤–æ—Å—Ç–µ–π: {signal['news_count']}")
        print(f"  –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal['reasoning']}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await strategy.close()

if __name__ == "__main__":
    asyncio.run(main())
