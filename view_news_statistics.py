#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ 3 –≥–æ–¥–∞
"""

import os
import json
import pandas as pd
from news_data_manager import NewsDataManager

def main():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–û–í–û–°–¢–ï–ô –ó–ê 3 –ì–û–î–ê")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = NewsDataManager()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = manager.load_metadata()
    if metadata:
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {metadata['date_range']['start']} - {metadata['date_range']['end']}")
        print(f"üìä –°–∏–º–≤–æ–ª–æ–≤: {metadata['total_symbols']}")
        print(f"üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {metadata['total_news']}")
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ: {metadata['created_at']}")
        print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = manager.get_news_statistics()
    if not stats:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:")
    print("-" * 60)
    
    for symbol, symbol_stats in stats['symbols'].items():
        print(f"\n{symbol}:")
        print(f"  üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: {symbol_stats['total_news']}")
        print(f"  üìä –°—Ä–µ–¥–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {symbol_stats['avg_sentiment']:.3f}")
        print(f"  üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {symbol_stats['avg_confidence']:.3f}")
        
        print(f"  üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é:")
        for category, count in symbol_stats['sentiment_distribution'].items():
            percentage = (count / symbol_stats['total_news']) * 100
            print(f"    {category}: {count} ({percentage:.1f}%)")
        
        print(f"  üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–ª–∏—è–Ω–∏—é:")
        for impact, count in symbol_stats['impact_distribution'].items():
            percentage = (count / symbol_stats['total_news']) * 100
            print(f"    {impact}: {count} ({percentage:.1f}%)")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 60)
    
    total_news = stats['total_news']
    total_symbols = stats['total_symbols']
    
    # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    all_sentiments = []
    all_confidences = []
    all_categories = {'very_positive': 0, 'positive': 0, 'neutral': 0, 'negative': 0, 'very_negative': 0}
    all_impacts = {'very_high': 0, 'high': 0, 'medium': 0, 'low': 0}
    
    for symbol_stats in stats['symbols'].values():
        all_sentiments.append(symbol_stats['avg_sentiment'])
        all_confidences.append(symbol_stats['avg_confidence'])
        
        for category, count in symbol_stats['sentiment_distribution'].items():
            all_categories[category] += count
        
        for impact, count in symbol_stats['impact_distribution'].items():
            all_impacts[impact] += count
    
    print(f"üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}")
    print(f"üìä –°–∏–º–≤–æ–ª–æ–≤: {total_symbols}")
    print(f"üìà –°—Ä–µ–¥–Ω–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sum(all_sentiments) / len(all_sentiments):.3f}")
    print(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sum(all_confidences) / len(all_confidences):.3f}")
    
    print(f"\nüìà –û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é:")
    for category, count in all_categories.items():
        percentage = (count / total_news) * 100
        print(f"  {category}: {count} ({percentage:.1f}%)")
    
    print(f"\nüéØ –û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–ª–∏—è–Ω–∏—é:")
    for impact, count in all_impacts.items():
        percentage = (count / total_news) * 100
        print(f"  {impact}: {count} ({percentage:.1f}%)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π
    print(f"\nüì∞ –ü–†–ò–ú–ï–†–´ –ù–û–í–û–°–¢–ï–ô:")
    print("-" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    news_data = manager.load_news_data()
    if news_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è SBER
        if 'SBER' in news_data:
            sber_news = news_data['SBER']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {}
            for news in sber_news:
                category = news.get('category', 'neutral')
                if category not in categories:
                    categories[category] = news
            
            for category, news in categories.items():
                print(f"\n{category.upper()}:")
                print(f"  üì∞ {news['title']}")
                print(f"  üìù {news['content']}")
                print(f"  üìÖ {news['published_at']}")
                print(f"  üìä –°–µ–Ω—Ç–∏–º–µ–Ω—Ç: {news['sentiment_score']:.2f}")
                print(f"  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {news['confidence']:.2f}")
                print(f"  üí• –í–ª–∏—è–Ω–∏–µ: {news['impact']}")

if __name__ == "__main__":
    main()
