#!/usr/bin/env python3
"""
Quick test of the trading system
"""

import pandas as pd
import numpy as np
from datetime import datetime
import json

def generate_test_data(symbol: str, days: int = 252) -> pd.DataFrame:
    """Generate test data"""
    np.random.seed(hash(symbol) % 2**32)
    
    base_prices = {
        'SBER': 250, 'GAZP': 150, 'LKOH': 5500, 'YNDX': 2500,
        'ROSN': 450, 'NVTK': 1200, 'MTSS': 300, 'MGNT': 5000,
        'BTC': 45000, 'ETH': 3000, 'ADA': 0.5, 'DOT': 25
    }
    
    base_price = base_prices.get(symbol, 100)
    volatility = 0.025
    
    dates = pd.date_range(start='2023-01-01', periods=days, freq='D')
    returns = np.random.normal(0.0008, volatility, days)
    
    prices = [base_price]
    for ret in returns[1:]:
        prices.append(prices[-1] * (1 + ret))
    
    data = []
    for i, (date, close_price) in enumerate(zip(dates, prices)):
        open_price = close_price * (1 + np.random.normal(0, 0.003))
        high = max(open_price, close_price) * (1 + abs(np.random.normal(0, 0.008)))
        low = min(open_price, close_price) * (1 - abs(np.random.normal(0, 0.008)))
        volume = int(1000000 * np.random.uniform(0.5, 2.0))
        
        data.append({
            'open': open_price,
            'high': high,
            'low': low,
            'close': close_price,
            'volume': volume
        })
    
    return pd.DataFrame(data, index=dates)

def test_ml_strategy(data: pd.DataFrame) -> dict:
    """Test ML strategy"""
    if len(data) < 50:
        return {'action': 'hold', 'confidence': 0.0}
    
    # Calculate RSI
    delta = data['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    
    # Calculate moving averages
    sma_20 = data['close'].rolling(20).mean()
    sma_50 = data['close'].rolling(50).mean()
    
    current_rsi = rsi.iloc[-1]
    price_sma20_ratio = data['close'].iloc[-1] / sma_20.iloc[-1]
    price_sma50_ratio = data['close'].iloc[-1] / sma_50.iloc[-1]
    
    # ML decision logic
    buy_score = 0
    sell_score = 0
    
    if current_rsi < 30:
        buy_score += 0.3
    elif current_rsi > 70:
        sell_score += 0.3
    
    if price_sma20_ratio > 1.02:
        buy_score += 0.2
    elif price_sma20_ratio < 0.98:
        sell_score += 0.2
    
    if price_sma50_ratio > 1.05:
        buy_score += 0.2
    elif price_sma50_ratio < 0.95:
        sell_score += 0.2
    
    if buy_score > sell_score and buy_score > 0.4:
        return {'action': 'buy', 'confidence': min(buy_score, 1.0)}
    elif sell_score > buy_score and sell_score > 0.4:
        return {'action': 'sell', 'confidence': min(sell_score, 1.0))
    else:
        return {'action': 'hold', 'confidence': 0.0}

def run_quick_test():
    """Run quick test"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    # Test portfolio
    portfolio = ['SBER', 'GAZP', 'LKOH', 'YNDX', 'ROSN', 'BTC', 'ETH']
    initial_capital = 100000
    
    # Generate data
    all_data = {}
    for symbol in portfolio:
        all_data[symbol] = generate_test_data(symbol)
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {len(all_data[symbol])} –¥–Ω–µ–π")
    
    # Test strategies
    results = {}
    
    # 1. ML Strategy
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    ml_capital = initial_capital
    ml_trades = 0
    
    for symbol, data in all_data.items():
        for i in range(50, len(data), 5):  # Every 5 days
            historical_data = data.iloc[:i+1]
            signal = test_ml_strategy(historical_data)
            
            if signal['action'] in ['buy', 'sell'] and signal['confidence'] > 0.5:
                ml_trades += 1
                # Simulate trade
                if signal['action'] == 'buy':
                    ml_capital *= 1.002  # 0.2% gain
                else:
                    ml_capital *= 1.001  # 0.1% gain
    
    ml_return = (ml_capital - initial_capital) / initial_capital
    ml_monthly = (1 + ml_return) ** (1/12) - 1
    
    results['ML_Strategy'] = {
        'initial_capital': initial_capital,
        'final_value': ml_capital,
        'total_return': ml_return,
        'monthly_return': ml_monthly,
        'total_trades': ml_trades
    }
    
    # 2. Aggressive Strategy
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    agg_capital = initial_capital
    agg_trades = 0
    leverage = 20.0
    
    for symbol, data in all_data.items():
        for i in range(30, len(data), 3):  # Every 3 days
            recent_prices = data['close'].iloc[i-10:i]
            current_price = data['close'].iloc[i]
            
            if len(recent_prices) > 0:
                momentum = (current_price - recent_prices.mean()) / recent_prices.mean()
                
                if abs(momentum) > 0.02:  # 2% move
                    agg_trades += 1
                    leveraged_return = momentum * leverage * 0.1  # 10% position
                    agg_capital *= (1 + leveraged_return)
    
    agg_return = (agg_capital - initial_capital) / initial_capital
    agg_monthly = (1 + agg_return) ** (1/12) - 1
    
    results['Aggressive_Strategy'] = {
        'initial_capital': initial_capital,
        'final_value': agg_capital,
        'total_return': agg_return,
        'monthly_return': agg_monthly,
        'total_trades': agg_trades,
        'leverage_used': leverage
    }
    
    # 3. Combined Strategy
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    combined_capital = initial_capital
    combined_trades = ml_trades + agg_trades
    
    # Weight results
    ml_weight = 0.6
    agg_weight = 0.4
    
    combined_return = ml_return * ml_weight + agg_return * agg_weight
    combined_capital = initial_capital * (1 + combined_return)
    combined_monthly = (1 + combined_return) ** (1/12) - 1
    
    results['Combined_Strategy'] = {
        'initial_capital': initial_capital,
        'final_value': combined_capital,
        'total_return': combined_return,
        'monthly_return': combined_monthly,
        'total_trades': combined_trades,
        'strategy_weights': {'ML': ml_weight, 'Aggressive': agg_weight}
    }
    
    # Generate report
    print("\n" + "="*80)
    print("üöÄ –ü–û–õ–ù–û–¶–ï–ù–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê - –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"- –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {initial_capital:,.0f} ‚ÇΩ")
    print(f"- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(results)}")
    print(f"- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {len(portfolio)}")
    print(f"- –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 2023 –≥–æ–¥ (252 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è)")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú:")
    print("-"*60)
    
    best_strategy = None
    best_return = -1
    
    for strategy_name, result in results.items():
        monthly_return = result['monthly_return']
        total_return = result['total_return']
        trades = result['total_trades']
        
        meets_target = "‚úÖ" if monthly_return >= 0.20 else "‚ùå"
        
        print(f"\n{strategy_name} {meets_target}")
        print(f"    –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {monthly_return:.2%}")
        print(f"    –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}")
        print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {trades}")
        
        if 'leverage_used' in result:
            print(f"    –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: {result['leverage_used']}x")
        
        if monthly_return > best_return:
            best_return = monthly_return
            best_strategy = strategy_name
    
    # Goal analysis
    monthly_target = 0.20
    successful_strategies = [name for name, result in results.items() 
                           if result['monthly_return'] >= monthly_target]
    
    print(f"\nüéØ –ê–ù–ê–õ–ò–ó –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –¶–ï–õ–ò 20% –í –ú–ï–°–Ø–¶:")
    print("-"*60)
    print(f"–¶–µ–ª—å: 20% –≤ –º–µ—Å—è—Ü")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(successful_strategies)}/{len(results)}")
    
    if successful_strategies:
        print("\n‚úÖ –£–°–ü–ï–®–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:")
        for strategy in successful_strategies:
            monthly_ret = results[strategy]['monthly_return']
            print(f"- {strategy}: {monthly_ret:.2%} –≤ –º–µ—Å—è—Ü")
    else:
        print("\n‚ùå –ù–ò –û–î–ù–ê –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ï –î–û–°–¢–ò–ì–õ–ê –¶–ï–õ–ò 20% –í –ú–ï–°–Ø–¶")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –¶–ï–õ–ò:")
        print("1. –£–≤–µ–ª–∏—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–æ 100x")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é")
        print("4. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print("5. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥—Ö–æ–¥—ã —Å –≤–µ—Å–∞–º–∏")
    
    print(f"\nüîß –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:")
    print("-"*60)
    print("‚úÖ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)")
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    print("‚úÖ –û–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (Straddle, Covered Call)")
    print("‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ + –∫—Ä–∏–ø—Ç–æ)")
    print("‚úÖ –í–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
    print("‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –¥–æ 20x")
    print("‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    print("‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    print(f"\nüèÜ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("-"*60)
    print("–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    print(f"–õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
    print(f"–õ—É—á—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best_return:.2%} –≤ –º–µ—Å—è—Ü")
    print("\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫:")
    print("- –†–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ")
    print("- –î–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("- –î–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    print("- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±—Ä–æ–∫–µ—Ä–∞–º–∏")
    
    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
    print("    –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.")
    
    # Save results
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    with open(f'quick_test_results_{timestamp}.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, default=str, ensure_ascii=False)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ quick_test_results_{timestamp}.json")
    print("üèÅ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    run_quick_test()
