#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä T-Bank —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import asyncio
import sys
import os
import logging
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pandas as pd
import warnings

warnings.filterwarnings('ignore')

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config
from core.api_client import TBankAPIClient
from core.risk_manager import RiskManager
from data.data_provider import DataProvider
from portfolio_optimizer import PortfolioOptimizer

# Import strategies
from strategies.technical_strategies import (
    RSIStrategy, MACDStrategy, BollingerBandsStrategy, 
    MovingAverageCrossoverStrategy, StochasticStrategy
)
from strategies.momentum_strategies import (
    MomentumStrategy, MeanReversionStrategy, BreakoutStrategy, VolumeProfileStrategy
)
from strategies.arbitrage_strategies import (
    PairsTradingStrategy, VolatilityArbitrageStrategy
)
from strategies.ml_strategies import (
    RandomForestStrategy, GradientBoostingStrategy, EnsembleStrategy
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'autotrader_{datetime.now().strftime("%Y%m%d")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AutoTrader:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä–∞"""
    
    def __init__(self):
        self.config = Config()
        self.api_client = None
        self.data_provider = None
        self.risk_manager = RiskManager(Config.INITIAL_CAPITAL)
        self.portfolio_optimizer = PortfolioOptimizer(target_return=0.20)
        
        # Trading state
        self.active_strategies = {}
        self.portfolio_weights = {}
        self.current_positions = {}
        self.trading_enabled = True
        self.last_rebalance = None
        
        # Performance tracking
        self.daily_pnl = []
        self.trade_history = []
        self.performance_metrics = {}
        
        # Monitoring
        self.status = {
            'running': False,
            'last_update': None,
            'total_trades': 0,
            'current_value': Config.INITIAL_CAPITAL,
            'daily_return': 0.0,
            'monthly_return': 0.0
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä–∞ T-Bank...")
            
            # Initialize API client
            self.api_client = TBankAPIClient()
            await self.api_client.__aenter__()
            
            # Initialize data provider
            self.data_provider = DataProvider(use_tbank=True)
            await self.data_provider.__aenter__()
            
            # Load optimal portfolio configuration
            await self.load_optimal_portfolio()
            
            # Initialize active strategies
            self.setup_strategies()
            
            logger.info("‚úÖ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.status['running'] = True
            self.status['last_update'] = datetime.now()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.api_client:
                await self.api_client.__aexit__(None, None, None)
            
            if self.data_provider:
                await self.data_provider.__aexit__(None, None, None)
            
            logger.info("üîß –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    async def load_optimal_portfolio(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            # Load portfolio optimization results
            if os.path.exists('portfolio_analysis.json'):
                with open('portfolio_analysis.json', 'r', encoding='utf-8') as f:
                    portfolio_data = json.load(f)
                
                # Find best combination
                combinations = portfolio_data.get('combinations', [])
                if combinations:
                    best_combo = combinations[0]  # Already sorted by performance
                    self.portfolio_weights = best_combo['weights']
                    
                    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å: {best_combo['name']}")
                    logger.info(f"üìà –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best_combo['performance']['monthly_return']:.2%} –≤ –º–µ—Å—è—Ü")
                    
                    for strategy, weight in self.portfolio_weights.items():
                        logger.info(f"   - {strategy}: {weight:.1%}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞")
                    self.portfolio_weights = self.get_default_weights()
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª portfolio_analysis.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞")
                self.portfolio_weights = self.get_default_weights()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            self.portfolio_weights = self.get_default_weights()
    
    def get_default_weights(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        strategies = [
            'RSI_Conservative',
            'MA_Crossover_Standard', 
            'MACD_Trend_Following',
            'Mean_Reversion_BB',
            'Momentum_Breakout'
        ]
        
        weight = 1.0 / len(strategies)
        return {strategy: weight for strategy in strategies}
    
    def setup_strategies(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        strategy_configs = {
            'RSI_Conservative': RSIStrategy({'rsi_period': 21, 'oversold_threshold': 20, 'overbought_threshold': 80}),
            'RSI_Momentum_Aggressive': RSIStrategy({'rsi_period': 10, 'oversold_threshold': 25, 'overbought_threshold': 75}),
            'MA_Crossover_Standard': MovingAverageCrossoverStrategy({'fast_period': 10, 'slow_period': 30}),
            'MA_Crossover_Fast': MovingAverageCrossoverStrategy({'fast_period': 5, 'slow_period': 15}),
            'MACD_Trend_Following': MACDStrategy({'fast_period': 12, 'slow_period': 26, 'signal_period': 9}),
            'BB_Standard': BollingerBandsStrategy({'period': 20, 'std_dev': 2}),
            'Momentum_Breakout': MomentumStrategy({'lookback_period': 10, 'momentum_threshold': 0.02}),
            'Mean_Reversion_BB': MeanReversionStrategy({'lookback_period': 20, 'deviation_threshold': 2.0}),
            'Volatility_Arbitrage': VolatilityArbitrageStrategy({'volatility_window': 20}),
            'RandomForest_ML': RandomForestStrategy({'n_estimators': 50, 'max_depth': 8}),
            'Ensemble_ML': EnsembleStrategy()
        }
        
        # Activate strategies that are in portfolio weights
        for strategy_name, weight in self.portfolio_weights.items():
            if strategy_name in strategy_configs and weight > 0:
                self.active_strategies[strategy_name] = {
                    'strategy': strategy_configs[strategy_name],
                    'weight': weight,
                    'enabled': True,
                    'last_signal': None,
                    'performance': {'trades': 0, 'pnl': 0.0}
                }
                
                logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name} (–≤–µ—Å: {weight:.1%})")
        
        logger.info(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.active_strategies)}")
    
    async def get_trading_instruments(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ API
        return [
            'SBER',  # –°–±–µ—Ä–±–∞–Ω–∫
            'GAZP',  # –ì–∞–∑–ø—Ä–æ–º  
            'LKOH',  # –õ–£–ö–û–ô–õ
            'YNDX',  # –Ø–Ω–¥–µ–∫—Å
            'ROSN',  # –†–æ—Å–Ω–µ—Ñ—Ç—å
            'NVTK',  # –ù–û–í–ê–¢–≠–ö
            'MTSS',  # –ú–¢–°
            'MGNT',  # –ú–∞–≥–Ω–∏—Ç
        ]
    
    async def execute_trading_cycle(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            logger.info("üîÑ –ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            
            # Get trading instruments
            instruments = await self.get_trading_instruments()
            
            # Get portfolio info
            portfolio_info = await self.get_portfolio_info()
            
            # Process each instrument
            for instrument in instruments:
                await self.process_instrument(instrument, portfolio_info)
            
            # Update performance metrics
            await self.update_performance_metrics()
            
            # Check if rebalancing is needed
            await self.check_rebalancing()
            
            self.status['last_update'] = datetime.now()
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    async def process_instrument(self, instrument: str, portfolio_info: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            # Get historical data
            end_date = datetime.now()
            start_date = end_date - timedelta(days=100)  # 100 days of data
            
            # In production, this would fetch real data from T-Bank API
            # For now, using synthetic data for demonstration
            data = self.data_provider.generate_synthetic_data(
                instrument, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')
            )
            
            if data.empty:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {instrument}")
                return
            
            current_price = data['close'].iloc[-1]
            
            # Collect signals from all active strategies
            signals = {}
            for strategy_name, strategy_info in self.active_strategies.items():
                if not strategy_info['enabled']:
                    continue
                
                try:
                    strategy = strategy_info['strategy']
                    signal = strategy.generate_signal(data, current_price, portfolio_info)
                    
                    # Weight the signal by strategy weight
                    if signal['confidence'] > 0:
                        signal['weighted_confidence'] = signal['confidence'] * strategy_info['weight']
                        signals[strategy_name] = signal
                        strategy_info['last_signal'] = signal
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name} –¥–ª—è {instrument}: {e}")
            
            # Aggregate signals
            if signals:
                await self.process_aggregated_signals(instrument, signals, current_price, portfolio_info)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {instrument}: {e}")
    
    async def process_aggregated_signals(self, instrument: str, signals: Dict, 
                                       current_price: float, portfolio_info: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            # Calculate weighted signals
            buy_weight = sum(s['weighted_confidence'] for s in signals.values() if s['action'] == 'buy')
            sell_weight = sum(s['weighted_confidence'] for s in signals.values() if s['action'] == 'sell')
            
            # Determine action
            min_confidence = 0.3  # Minimum confidence threshold
            
            if buy_weight > sell_weight and buy_weight > min_confidence:
                action = 'buy'
                confidence = buy_weight
            elif sell_weight > buy_weight and sell_weight > min_confidence:
                action = 'sell' 
                confidence = sell_weight
            else:
                action = 'hold'
                confidence = 0
            
            # Execute trade if conditions are met
            if action != 'hold' and confidence > min_confidence:
                await self.execute_trade(instrument, action, confidence, current_price, portfolio_info)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {instrument}: {e}")
    
    async def execute_trade(self, instrument: str, action: str, confidence: float,
                          current_price: float, portfolio_info: Dict):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        try:
            # Risk management check
            signal = {'action': action, 'confidence': confidence, 'figi': instrument}
            is_valid, reason = self.risk_manager.validate_trade(signal, portfolio_info, current_price)
            
            if not is_valid:
                logger.debug(f"üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è {instrument}: {reason}")
                return
            
            # Calculate position size
            stop_loss_price = self.risk_manager.calculate_stop_loss(current_price, action)
            position_size = self.risk_manager.calculate_position_size(
                portfolio_info.get('total_amount', Config.INITIAL_CAPITAL),
                current_price,
                stop_loss_price
            )
            
            if position_size <= 0:
                logger.debug(f"üö´ –ù—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {instrument}")
                return
            
            # In production, this would execute real trade via T-Bank API
            # For now, simulate the trade
            trade_info = {
                'timestamp': datetime.now(),
                'instrument': instrument,
                'action': action,
                'price': current_price,
                'quantity': position_size,
                'confidence': confidence,
                'stop_loss': stop_loss_price,
                'take_profit': self.risk_manager.calculate_take_profit(current_price, action)
            }
            
            self.trade_history.append(trade_info)
            self.status['total_trades'] += 1
            
            logger.info(f"üìà {action.upper()} {instrument}: {position_size} @ {current_price:.2f} "
                       f"(confidence: {confidence:.2f})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ {instrument}: {e}")
    
    async def get_portfolio_info(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
        try:
            # In production, this would fetch real portfolio from T-Bank API
            # For now, return simulated portfolio
            return {
                'total_amount': self.status['current_value'],
                'positions': [
                    {
                        'figi': instrument,
                        'quantity': 100,  # Simulated
                        'current_price': 100,
                    }
                    for instrument in self.current_positions.keys()
                ]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {'total_amount': Config.INITIAL_CAPITAL, 'positions': []}
    
    async def update_performance_metrics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            current_value = self.status['current_value']
            
            # Update risk manager
            self.risk_manager.update_portfolio_metrics(current_value)
            
            # Calculate returns
            if self.daily_pnl:
                yesterday_value = self.daily_pnl[-1]['value'] if self.daily_pnl else Config.INITIAL_CAPITAL
                daily_return = (current_value - yesterday_value) / yesterday_value
                self.status['daily_return'] = daily_return
            
            # Calculate monthly return
            start_of_month_value = Config.INITIAL_CAPITAL  # Simplified
            monthly_return = (current_value - start_of_month_value) / start_of_month_value
            self.status['monthly_return'] = monthly_return
            
            # Add to daily PnL
            self.daily_pnl.append({
                'date': datetime.now().date(),
                'value': current_value,
                'daily_return': self.status['daily_return'],
                'monthly_return': monthly_return
            })
            
            # Keep only last 30 days
            if len(self.daily_pnl) > 30:
                self.daily_pnl = self.daily_pnl[-30:]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def check_rebalancing(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        try:
            # Rebalance weekly
            if (self.last_rebalance is None or 
                (datetime.now() - self.last_rebalance).days >= 7):
                
                await self.rebalance_portfolio()
                self.last_rebalance = datetime.now()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
    
    async def rebalance_portfolio(self):
        """–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            logger.info("‚öñÔ∏è –ù–∞—á–∞–ª–æ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            
            # Reload optimal weights (could be updated based on recent performance)
            await self.load_optimal_portfolio()
            
            # Update strategy weights
            for strategy_name, strategy_info in self.active_strategies.items():
                new_weight = self.portfolio_weights.get(strategy_name, 0)
                old_weight = strategy_info['weight']
                
                if abs(new_weight - old_weight) > 0.05:  # 5% threshold
                    strategy_info['weight'] = new_weight
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –≤–µ—Å {strategy_name}: {old_weight:.1%} ‚Üí {new_weight:.1%}")
            
            logger.info("‚úÖ –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
    
    def get_status_report(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        try:
            current_time = datetime.now()
            
            # Performance summary
            total_return = (self.status['current_value'] - Config.INITIAL_CAPITAL) / Config.INITIAL_CAPITAL
            
            report = f"""
ü§ñ –ê–í–¢–û–¢–†–ï–ô–î–ï–† T-BANK - –°–¢–ê–¢–£–°
{'='*50}

‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')}
üîÑ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if self.status['running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

üí∞ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
- –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: {self.status['current_value']:,.0f} ‚ÇΩ
- –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}
- –î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {self.status['daily_return']:.2%}
- –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {self.status['monthly_return']:.2%}

üìä –¢–û–†–ì–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:
- –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.status['total_trades']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len([s for s in self.active_strategies.values() if s['enabled']])}
- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.status['last_update'].strftime('%H:%M:%S') if self.status['last_update'] else '–ù–∏–∫–æ–≥–¥–∞'}

üéØ –ê–ö–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:
"""
            
            for name, info in self.active_strategies.items():
                if info['enabled']:
                    last_signal = info['last_signal']
                    signal_info = ""
                    if last_signal:
                        signal_info = f"({last_signal['action']}, {last_signal['confidence']:.2f})"
                    
                    report += f"  - {name}: {info['weight']:.1%} {signal_info}\n"
            
            # Recent trades
            if self.trade_history:
                report += f"\nüìà –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:\n"
                for trade in self.trade_history[-5:]:  # Last 5 trades
                    report += f"  - {trade['timestamp'].strftime('%H:%M')} {trade['action'].upper()} " \
                             f"{trade['instrument']} @ {trade['price']:.2f}\n"
            
            report += f"\n‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: {'üü¢ –û–ö' if not self.risk_manager.should_stop_trading()[0] else 'üî¥ –°–¢–û–ü'}"
            
            return report
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
    
    async def run_forever(self, cycle_interval: int = 300):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {cycle_interval} —Å–µ–∫)")
        
        try:
            while self.trading_enabled:
                cycle_start = time.time()
                
                # Execute trading cycle
                await self.execute_trading_cycle()
                
                # Print status
                if self.status['total_trades'] % 10 == 0:  # Every 10 trades
                    print(self.get_status_report())
                
                # Sleep until next cycle
                cycle_duration = time.time() - cycle_start
                sleep_time = max(0, cycle_interval - cycle_duration)
                
                if sleep_time > 0:
                    logger.info(f"üò¥ –°–æ–Ω {sleep_time:.1f} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                    await asyncio.sleep(sleep_time)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            self.trading_enabled = False
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            raise
        finally:
            await self.save_state()
    
    async def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä–∞"""
        try:
            state = {
                'timestamp': datetime.now().isoformat(),
                'status': self.status,
                'portfolio_weights': self.portfolio_weights,
                'daily_pnl': self.daily_pnl[-30:],  # Last 30 days
                'recent_trades': self.trade_history[-100:],  # Last 100 trades
                'performance_metrics': self.risk_manager.get_performance_metrics()
            }
            
            with open(f'autotrader_state_{datetime.now().strftime("%Y%m%d")}.json', 'w') as f:
                json.dump(state, f, indent=2, default=str)
            
            logger.info("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä–∞ T-Bank...")
    
    # Create autotrader
    autotrader = AutoTrader()
    
    try:
        # Initialize
        await autotrader.initialize()
        
        # Show initial status
        print(autotrader.get_status_report())
        
        # Run forever (or until interrupted)
        await autotrader.run_forever(cycle_interval=60)  # 1 minute cycles for demo
        
    except KeyboardInterrupt:
        logger.info("üëã –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # Cleanup
        await autotrader.cleanup()
        logger.info("üèÅ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    # Run the autotrader
    asyncio.run(main())