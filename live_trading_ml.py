#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö ML —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import os
import sys
import time
import asyncio
import logging
import signal
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã
from advanced_ml_strategies import AdvancedMLStrategies
from env_loader import load_env_file
from telegram_notifications import TradingNotifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('live_trading.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class LiveTradingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self, config_file: str = None, strategy: str = 'ensemble'):
        self.config_file = config_file
        self.strategy = strategy
        self.running = False
        self.trading_session = None
        self.telegram_notifier = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.load_configuration()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.initialize_components()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.setup_signal_handlers()
    
    def load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
        if self.config_file:
            load_env_file(self.config_file)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {self.config_file}")
        else:
            # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞
            env_paths = ['.env', 'config/.env', 'config/environments/.env']
            for path in env_paths:
                if os.path.exists(path):
                    load_env_file(path)
                    logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {path}")
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = ['TBANK_TOKEN', 'TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHAT_ID']
        missing_vars = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            sys.exit(1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.initial_capital = float(os.getenv('INITIAL_CAPITAL', 100000))
        self.max_risk_per_trade = float(os.getenv('MAX_RISK_PER_TRADE', 0.02))
        self.use_sandbox = os.getenv('USE_SANDBOX', 'True').lower() == 'true'
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.check_interval = int(os.getenv('CHECK_INTERVAL', 300))  # 5 –º–∏–Ω—É—Ç
        self.performance_check_interval = int(os.getenv('PERFORMANCE_CHECK_INTERVAL', 3600))  # 1 —á–∞—Å
        self.retrain_interval = int(os.getenv('RETRAIN_INTERVAL', 86400))  # 24 —á–∞—Å–∞
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        self.min_win_rate = float(os.getenv('MIN_WIN_RATE', 0.4))  # 40%
        self.max_drawdown_threshold = float(os.getenv('MAX_DRAWDOWN_THRESHOLD', 0.15))  # 15%
        self.min_sharpe_ratio = float(os.getenv('MIN_SHARPE_RATIO', 0.5))
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é
        self.trading_session = AdvancedMLStrategies(
            initial_capital=self.initial_capital,
            optimize_indicators=True,
            max_indicators=20,
            enable_telegram=True
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            self.telegram_notifier = TradingNotifier(
                bot_token=os.getenv('TELEGRAM_BOT_TOKEN'),
                chat_id=os.getenv('TELEGRAM_CHAT_ID')
            )
            logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram: {e}")
            self.telegram_notifier = None
        
        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.stop()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        if not self.telegram_notifier:
            return
        
        try:
            await self.telegram_notifier.notify_alert(
                alert_type='INFO',
                title='üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
                message=f"""
ü§ñ **–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞**

üìä **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: {self.strategy.upper()}
üí∞ **–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª**: {self.initial_capital:,.0f} ‚ÇΩ
‚ö†Ô∏è **–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É**: {self.max_risk_per_trade*100:.1f}%
üîÑ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏**: {self.check_interval} —Å–µ–∫
üìà **–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ**: –∫–∞–∂–¥—ã–µ {self.retrain_interval//3600} —á–∞—Å–æ–≤

üõ°Ô∏è **–ü–æ—Ä–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**:
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Win Rate: {self.min_win_rate*100:.0f}%
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {self.max_drawdown_threshold*100:.0f}%
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Sharpe: {self.min_sharpe_ratio:.1f}

‚è∞ **–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                """,
                severity='INFO'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    async def send_shutdown_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        if not self.telegram_notifier:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
            stats = self.get_session_stats()
            
            await self.telegram_notifier.notify_alert(
                alert_type='INFO',
                title='üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
                message=f"""
ü§ñ **–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏**:
‚Ä¢ –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: {stats.get('current_capital', 0):,.0f} ‚ÇΩ
‚Ä¢ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {stats.get('total_pnl', 0):,.0f} ‚ÇΩ ({stats.get('total_pnl_pct', 0):.2f}%)
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {stats.get('total_trades', 0)}
‚Ä¢ Win Rate: {stats.get('win_rate', 0)*100:.1f}%

‚è∞ **–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                """,
                severity='INFO'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    def get_session_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        if not self.trading_session:
            return {}
        
        try:
            trades = self.trading_session.trades
            current_capital = self.trading_session.current_capital
            
            if not trades:
                return {
                    'current_capital': current_capital,
                    'total_pnl': 0,
                    'total_pnl_pct': 0,
                    'total_trades': 0,
                    'win_rate': 0
                }
            
            total_pnl = sum(trade.get('pnl', 0) for trade in trades)
            total_pnl_pct = (total_pnl / self.initial_capital) * 100
            
            winning_trades = sum(1 for trade in trades if trade.get('pnl', 0) > 0)
            win_rate = winning_trades / len(trades) if trades else 0
            
            return {
                'current_capital': current_capital,
                'total_pnl': total_pnl,
                'total_pnl_pct': total_pnl_pct,
                'total_trades': len(trades),
                'win_rate': win_rate
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def check_performance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ"""
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            stats = self.get_session_stats()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            needs_retrain = False
            issues = []
            
            if stats.get('win_rate', 0) < self.min_win_rate:
                needs_retrain = True
                issues.append(f"Win Rate {stats.get('win_rate', 0)*100:.1f}% < {self.min_win_rate*100:.0f}%")
            
            if stats.get('total_pnl_pct', 0) < -self.max_drawdown_threshold * 100:
                needs_retrain = True
                issues.append(f"–ü—Ä–æ—Å–∞–¥–∫–∞ {abs(stats.get('total_pnl_pct', 0)):.1f}% > {self.max_drawdown_threshold*100:.0f}%")
            
            if needs_retrain and self.telegram_notifier:
                await self.telegram_notifier.notify_alert(
                    alert_type='PERFORMANCE',
                    title='‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏',
                    message=f"""
üìâ **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é**:

{chr(10).join(f"‚Ä¢ {issue}" for issue in issues)}

üîÑ **–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...**
                    """,
                    severity='HIGH'
                )
            
            return needs_retrain
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def retrain_models(self):
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        logger.info("üîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
        
        try:
            if self.telegram_notifier:
                await self.telegram_notifier.notify_alert(
                    alert_type='INFO',
                    title='üîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π',
                    message='–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...',
                    severity='MEDIUM'
                )
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            
            if self.telegram_notifier:
                await self.telegram_notifier.notify_alert(
                    alert_type='INFO',
                    title='‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                    message='ML –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
                    severity='LOW'
                )
            
            logger.info("‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
            if self.telegram_notifier:
                await self.telegram_notifier.notify_alert(
                    alert_type='ERROR',
                    title='‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è',
                    message=f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏: {str(e)}',
                    severity='CRITICAL'
                )
    
    async def run_trading_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏—Ä–∂–∏
            if not self.trading_session.is_market_open():
                market_status = self.trading_session.get_market_status()
                logger.info(f"üïê –ë–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞. {market_status['next_action']}")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            market_data = self.trading_session.load_tbank_data()
            
            if not market_data:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategy_mapping = {
                'ensemble': 'ensemble_ml_strategy',
                'arima': 'arima_strategy',
                'lstm': 'lstm_strategy',
                'sarima': 'sarima_strategy'
            }
            
            strategy_method_name = strategy_mapping.get(self.strategy, f"{self.strategy}_strategy")
            strategy_method = getattr(self.trading_session, strategy_method_name, None)
            if not strategy_method:
                logger.error(f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è {self.strategy} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–∏—Å–∫–∞–ª–∏ –º–µ—Ç–æ–¥ {strategy_method_name})")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            for data_key, data in market_data.items():
                symbol = data_key.split('_')[0]
                logger.info(f"üìà –¢–æ—Ä–≥–æ–≤–ª—è {symbol}...")
                
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                    result = strategy_method(symbol, data)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}: {e}")
                    if self.telegram_notifier:
                        await self.telegram_notifier.notify_alert(
                            alert_type='ERROR',
                            title=f'‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}',
                            message=str(e),
                            severity='HIGH'
                        )
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.send_startup_notification()
        
        self.running = True
        last_performance_check = time.time()
        last_retrain = time.time()
        
        try:
            while self.running:
                start_time = time.time()
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
                await self.run_trading_cycle()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if time.time() - last_performance_check >= self.performance_check_interval:
                    needs_retrain = await self.check_performance()
                    
                    # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    if needs_retrain and time.time() - last_retrain >= self.retrain_interval:
                        await self.retrain_models()
                        last_retrain = time.time()
                    
                    last_performance_check = time.time()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                elapsed = time.time() - start_time
                sleep_time = max(0, self.check_interval - elapsed)
                
                if sleep_time > 0:
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.0f} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                    await asyncio.sleep(sleep_time)
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            if self.telegram_notifier:
                await self.telegram_notifier.notify_alert(
                    alert_type='ERROR',
                    title='üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                    message=f'–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {str(e)}',
                    severity='CRITICAL'
                )
        finally:
            await self.send_shutdown_notification()
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.running = False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å ML —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏')
    parser.add_argument('--config', '-c', help='–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É')
    parser.add_argument('--strategy', '-s', default='ensemble', 
                       choices=['arima', 'lstm', 'sarima', 'ensemble'],
                       help='–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏')
    parser.add_argument('--dry-run', action='store_true', 
                       help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏
    manager = LiveTradingManager(
        config_file=args.config,
        strategy=args.strategy
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
    try:
        asyncio.run(manager.run())
    except KeyboardInterrupt:
        logger.info("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
