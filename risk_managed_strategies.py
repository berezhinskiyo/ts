#!/usr/bin/env python3
"""
Risk-Managed Trading Strategies with 2x Maximum Leverage
–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø–ª–µ—á–æ–º 2x
"""

import os
import sys
import pandas as pd
import numpy as np
import json
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

class RiskManagedStrategyTester:
    """–¢–µ—Å—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
    
    def __init__(self):
        self.data_dir = 'data/historical'
        self.derivatives_dir = 'data/derivatives'
        self.results_dir = 'backtesting/results'
        self.max_leverage = 2.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ 2x
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.results_dir, exist_ok=True)
        
        print("üõ°Ô∏è Risk-Managed Strategy Tester initialized")
        print(f"‚ö° Maximum leverage: {self.max_leverage}x")
        print(f"üìÅ Data directory: {self.data_dir}")
        print(f"üìÅ Derivatives directory: {self.derivatives_dir}")
    
    def load_all_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        all_data = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ü–∏–∏
        if os.path.exists(self.data_dir):
            for file in os.listdir(self.data_dir):
                if file.endswith('_tbank.csv'):
                    ticker = file.replace('_tbank.csv', '')
                    filepath = os.path.join(self.data_dir, file)
                    
                    try:
                        df = pd.read_csv(filepath, index_col=0, parse_dates=True)
                        df['instrument_type'] = 'stock'
                        all_data[ticker] = df
                        print(f"‚úÖ {ticker}: {len(df)} –¥–Ω–µ–π, —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.2f} —Ä—É–±.")
                    except Exception as e:
                        print(f"‚ùå {ticker}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—å—é—á–µ—Ä—Å—ã
        if os.path.exists(self.derivatives_dir):
            for file in os.listdir(self.derivatives_dir):
                if file.endswith('_futures.csv'):
                    ticker = file.replace('_futures.csv', '')
                    filepath = os.path.join(self.derivatives_dir, file)
                    
                    try:
                        df = pd.read_csv(filepath, index_col=0, parse_dates=True)
                        df['instrument_type'] = 'futures'
                        all_data[ticker] = df
                        print(f"‚úÖ {ticker}: {len(df)} –¥–Ω–µ–π, —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.2f}")
                    except Exception as e:
                        print(f"‚ùå {ticker}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")
        
        print(f"\nüìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(all_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        return all_data
    
    def calculate_returns(self, prices):
        """–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        returns = prices.pct_change().dropna()
        return returns
    
    def calculate_risk_metrics(self, returns, prices):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if len(returns) == 0:
            return {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_return = (prices.iloc[-1] / prices.iloc[0] - 1) * 100
        annualized_return = ((1 + total_return/100) ** (252/len(returns)) - 1) * 100
        volatility = returns.std() * np.sqrt(252) * 100
        sharpe_ratio = (annualized_return / volatility) if volatility > 0 else 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        cumulative = (1 + returns).cumprod()
        running_max = cumulative.expanding().max()
        drawdown = (cumulative - running_max) / running_max
        max_drawdown = drawdown.min() * 100
        
        # VaR (Value at Risk) - 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        var_95 = np.percentile(returns, 5) * 100
        
        # CVaR (Conditional Value at Risk) - –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ VaR
        cvar_95 = returns[returns <= np.percentile(returns, 5)].mean() * 100
        
        # Sortino Ratio (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
        negative_returns = returns[returns < 0]
        downside_volatility = negative_returns.std() * np.sqrt(252) * 100
        sortino_ratio = (annualized_return / downside_volatility) if downside_volatility > 0 else 0
        
        # Calmar Ratio (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–µ)
        calmar_ratio = (annualized_return / abs(max_drawdown)) if max_drawdown != 0 else 0
        
        # –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        monthly_return = annualized_return / 12
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
        positive_days = (returns > 0).sum()
        total_days = len(returns)
        win_rate = (positive_days / total_days) * 100 if total_days > 0 else 0
        
        return {
            'total_return': round(total_return, 2),
            'annualized_return': round(annualized_return, 2),
            'monthly_return': round(monthly_return, 2),
            'volatility': round(volatility, 2),
            'sharpe_ratio': round(sharpe_ratio, 2),
            'sortino_ratio': round(sortino_ratio, 2),
            'calmar_ratio': round(calmar_ratio, 2),
            'max_drawdown': round(max_drawdown, 2),
            'var_95': round(var_95, 2),
            'cvar_95': round(cvar_95, 2),
            'win_rate': round(win_rate, 2),
            'data_points': len(returns)
        }
    
    def calculate_advanced_indicators(self, df):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        prices = df['close']
        high = df['high']
        low = df['low']
        volume = df['volume']
        
        # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        sma_5 = prices.rolling(5).mean()
        sma_10 = prices.rolling(10).mean()
        sma_20 = prices.rolling(20).mean()
        sma_50 = prices.rolling(50).mean()
        
        # EMA
        ema_5 = prices.ewm(span=5).mean()
        ema_10 = prices.ewm(span=10).mean()
        ema_20 = prices.ewm(span=20).mean()
        
        # MACD
        ema_12 = prices.ewm(span=12).mean()
        ema_26 = prices.ewm(span=26).mean()
        macd = ema_12 - ema_26
        macd_signal = macd.ewm(span=9).mean()
        macd_histogram = macd - macd_signal
        
        # RSI
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        
        # Bollinger Bands
        bb_middle = sma_20
        bb_std = prices.rolling(20).std()
        bb_upper = bb_middle + (bb_std * 2)
        bb_lower = bb_middle - (bb_std * 2)
        bb_width = (bb_upper - bb_lower) / bb_middle
        bb_position = (prices - bb_lower) / (bb_upper - bb_lower)
        
        # Stochastic
        lowest_low = low.rolling(14).min()
        highest_high = high.rolling(14).max()
        stoch_k = 100 * ((prices - lowest_low) / (highest_high - lowest_low))
        stoch_d = stoch_k.rolling(3).mean()
        
        # Volume indicators
        volume_sma = volume.rolling(20).mean()
        volume_ratio = volume / volume_sma
        
        # Volatility
        returns = prices.pct_change()
        volatility = returns.rolling(20).std() * np.sqrt(252)
        
        # ATR
        tr1 = high - low
        tr2 = abs(high - prices.shift(1))
        tr3 = abs(low - prices.shift(1))
        tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
        atr = tr.rolling(14).mean()
        
        # Momentum indicators
        momentum_5 = prices / prices.shift(5) - 1
        momentum_10 = prices / prices.shift(10) - 1
        
        # Williams %R
        williams_r = -100 * ((highest_high - prices) / (highest_high - lowest_low))
        
        # CCI (Commodity Channel Index)
        typical_price = (high + low + prices) / 3
        cci_sma = typical_price.rolling(20).mean()
        cci_mad = typical_price.rolling(20).apply(lambda x: np.mean(np.abs(x - x.mean())))
        cci = (typical_price - cci_sma) / (0.015 * cci_mad)
        
        return {
            'sma_5': sma_5, 'sma_10': sma_10, 'sma_20': sma_20, 'sma_50': sma_50,
            'ema_5': ema_5, 'ema_10': ema_10, 'ema_20': ema_20,
            'macd': macd, 'macd_signal': macd_signal, 'macd_histogram': macd_histogram,
            'rsi': rsi,
            'bb_upper': bb_upper, 'bb_middle': bb_middle, 'bb_lower': bb_lower, 
            'bb_width': bb_width, 'bb_position': bb_position,
            'stoch_k': stoch_k, 'stoch_d': stoch_d,
            'williams_r': williams_r,
            'cci': cci,
            'volume_ratio': volume_ratio,
            'volatility': volatility,
            'atr': atr,
            'momentum_5': momentum_5, 'momentum_10': momentum_10
        }
    
    def risk_management_system(self, signals, prices, atr, instrument_type, max_risk=0.02):
        """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        risk_adjusted_signals = signals.copy()
        
        for i in range(1, len(signals)):
            if signals.iloc[i] != 0:  # –ï—Å—Ç—å —Å–∏–≥–Ω–∞–ª
                current_price = prices.iloc[i]
                current_atr = atr.iloc[i]
                
                if pd.isna(current_atr) or current_atr == 0:
                    risk_adjusted_signals.iloc[i] = 0
                    continue
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                if instrument_type == 'futures':
                    stop_loss_atr = 1.5
                    take_profit_atr = 2.5
                    position_size_multiplier = 1.0
                else:  # stocks
                    stop_loss_atr = 2.0
                    take_profit_atr = 3.0
                    position_size_multiplier = 0.8
                
                # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
                stop_loss_distance = current_atr * stop_loss_atr
                position_size = max_risk / (stop_loss_distance / current_price)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ 2x
                position_size = min(position_size, self.max_leverage * position_size_multiplier)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∏—Å–∫–∞
                position_size = min(position_size, 0.1)  # –ú–∞–∫—Å–∏–º—É–º 10% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∫ —Å–∏–≥–Ω–∞–ª—É
                risk_adjusted_signals.iloc[i] = signals.iloc[i] * position_size
        
        return risk_adjusted_signals
    
    def test_conservative_strategy(self, data):
        """–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
        print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Conservative Strategy...")
        
        results = {}
        
        for ticker, df in data.items():
            try:
                prices = df['close']
                returns = self.calculate_returns(prices)
                instrument_type = df['instrument_type'].iloc[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                indicators = self.calculate_advanced_indicators(df)
                
                # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                signals = pd.Series(0, index=prices.index)
                
                # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                buy_conditions = (
                    # –¢—Ä–µ–Ω–¥
                    (indicators['sma_10'] > indicators['sma_20']) &
                    (indicators['sma_20'] > indicators['sma_50']) &
                    (indicators['ema_10'] > indicators['ema_20']) &
                    
                    # Momentum
                    (indicators['momentum_10'] > 0.02) &  # 2% —Ä–æ—Å—Ç –∑–∞ 10 –¥–Ω–µ–π
                    
                    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    (indicators['rsi'] > 40) & (indicators['rsi'] < 60) &
                    (indicators['macd'] > indicators['macd_signal']) &
                    (indicators['stoch_k'] > indicators['stoch_d']) &
                    (indicators['stoch_k'] > 30) & (indicators['stoch_k'] < 70) &
                    
                    # Bollinger Bands
                    (indicators['bb_position'] > 0.3) & (indicators['bb_position'] < 0.7) &
                    (indicators['bb_width'] > 0.02) &
                    
                    # Volume
                    (indicators['volume_ratio'] > 1.2) &
                    
                    # Volatility (—É–º–µ—Ä–µ–Ω–Ω–∞—è)
                    (indicators['volatility'] > 0.1) & (indicators['volatility'] < 0.5)
                )
                
                # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                sell_conditions = (
                    (indicators['sma_10'] < indicators['sma_20']) |
                    (indicators['ema_10'] < indicators['ema_20']) |
                    (indicators['rsi'] > 65) |
                    (indicators['macd'] < indicators['macd_signal']) |
                    (indicators['stoch_k'] < indicators['stoch_d']) |
                    (indicators['bb_position'] > 0.8) |
                    (indicators['volatility'] > 0.6)
                )
                
                signals[buy_conditions] = 1
                signals[sell_conditions] = -1
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
                risk_adjusted_signals = self.risk_management_system(
                    signals, prices, indicators['atr'], instrument_type, max_risk=0.015
                )
                
                # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_returns = risk_adjusted_signals.shift(1) * returns
                strategy_returns = strategy_returns.dropna()
                
                if len(strategy_returns) > 0:
                    metrics = self.calculate_risk_metrics(strategy_returns, prices)
                    results[ticker] = {
                        **metrics,
                        'instrument_type': instrument_type,
                        'max_leverage': self.max_leverage
                    }
                    print(f"  ‚úÖ {ticker}: {metrics['monthly_return']:.2f}% –≤ –º–µ—Å—è—Ü, Sharpe: {metrics['sharpe_ratio']:.2f}, VaR: {metrics['var_95']:.2f}%")
                else:
                    print(f"  ‚ö†Ô∏è {ticker}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                print(f"  ‚ùå {ticker}: –æ—à–∏–±–∫–∞ - {e}")
        
        return results
    
    def test_balanced_strategy(self, data):
        """–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
        print("\n‚öñÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Balanced Strategy...")
        
        results = {}
        
        for ticker, df in data.items():
            try:
                prices = df['close']
                returns = self.calculate_returns(prices)
                instrument_type = df['instrument_type'].iloc[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                indicators = self.calculate_advanced_indicators(df)
                
                # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                signals = pd.Series(0, index=prices.index)
                
                # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                buy_conditions = (
                    # –¢—Ä–µ–Ω–¥
                    (indicators['sma_5'] > indicators['sma_10']) &
                    (indicators['sma_10'] > indicators['sma_20']) &
                    (indicators['ema_5'] > indicators['ema_10']) &
                    
                    # Momentum
                    (indicators['momentum_5'] > 0.01) &  # 1% —Ä–æ—Å—Ç –∑–∞ 5 –¥–Ω–µ–π
                    (indicators['momentum_10'] > 0.015) &  # 1.5% —Ä–æ—Å—Ç –∑–∞ 10 –¥–Ω–µ–π
                    
                    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    (indicators['rsi'] > 35) & (indicators['rsi'] < 65) &
                    (indicators['macd'] > indicators['macd_signal']) &
                    (indicators['macd_histogram'] > 0) &
                    (indicators['stoch_k'] > indicators['stoch_d']) &
                    (indicators['stoch_k'] > 25) & (indicators['stoch_k'] < 75) &
                    
                    # Bollinger Bands
                    (indicators['bb_position'] > 0.25) & (indicators['bb_position'] < 0.75) &
                    (indicators['bb_width'] > 0.025) &
                    
                    # Volume
                    (indicators['volume_ratio'] > 1.3) &
                    
                    # Volatility
                    (indicators['volatility'] > 0.15) & (indicators['volatility'] < 0.7)
                )
                
                # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                sell_conditions = (
                    (indicators['sma_5'] < indicators['sma_10']) |
                    (indicators['ema_5'] < indicators['ema_10']) |
                    (indicators['momentum_5'] < -0.005) |
                    (indicators['rsi'] > 70) |
                    (indicators['macd'] < indicators['macd_signal']) |
                    (indicators['macd_histogram'] < 0) |
                    (indicators['stoch_k'] < indicators['stoch_d']) |
                    (indicators['stoch_k'] > 80) |
                    (indicators['bb_position'] > 0.85) |
                    (indicators['volatility'] > 0.8)
                )
                
                signals[buy_conditions] = 1
                signals[sell_conditions] = -1
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
                risk_adjusted_signals = self.risk_management_system(
                    signals, prices, indicators['atr'], instrument_type, max_risk=0.02
                )
                
                # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_returns = risk_adjusted_signals.shift(1) * returns
                strategy_returns = strategy_returns.dropna()
                
                if len(strategy_returns) > 0:
                    metrics = self.calculate_risk_metrics(strategy_returns, prices)
                    results[ticker] = {
                        **metrics,
                        'instrument_type': instrument_type,
                        'max_leverage': self.max_leverage
                    }
                    print(f"  ‚úÖ {ticker}: {metrics['monthly_return']:.2f}% –≤ –º–µ—Å—è—Ü, Sharpe: {metrics['sharpe_ratio']:.2f}, VaR: {metrics['var_95']:.2f}%")
                else:
                    print(f"  ‚ö†Ô∏è {ticker}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                print(f"  ‚ùå {ticker}: –æ—à–∏–±–∫–∞ - {e}")
        
        return results
    
    def test_aggressive_risk_managed_strategy(self, data):
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Aggressive Risk-Managed Strategy...")
        
        results = {}
        
        for ticker, df in data.items():
            try:
                prices = df['close']
                returns = self.calculate_returns(prices)
                instrument_type = df['instrument_type'].iloc[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                indicators = self.calculate_advanced_indicators(df)
                
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏
                signals = pd.Series(0, index=prices.index)
                
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                buy_conditions = (
                    # –¢—Ä–µ–Ω–¥
                    (indicators['sma_3'] > indicators['sma_5']) &
                    (indicators['sma_5'] > indicators['sma_10']) &
                    (indicators['ema_5'] > indicators['ema_10']) &
                    
                    # Momentum
                    (indicators['momentum_5'] > 0.015) &  # 1.5% —Ä–æ—Å—Ç –∑–∞ 5 –¥–Ω–µ–π
                    (indicators['momentum_10'] > 0.025) &  # 2.5% —Ä–æ—Å—Ç –∑–∞ 10 –¥–Ω–µ–π
                    
                    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    (indicators['rsi'] > 45) & (indicators['rsi'] < 65) &
                    (indicators['macd'] > indicators['macd_signal']) &
                    (indicators['macd_histogram'] > 0) &
                    (indicators['stoch_k'] > indicators['stoch_d']) &
                    (indicators['stoch_k'] > 30) & (indicators['stoch_k'] < 70) &
                    
                    # Bollinger Bands
                    (indicators['bb_position'] > 0.2) & (indicators['bb_position'] < 0.8) &
                    (indicators['bb_width'] > 0.03) &
                    
                    # Volume
                    (indicators['volume_ratio'] > 1.5) &
                    
                    # Volatility
                    (indicators['volatility'] > 0.2) & (indicators['volatility'] < 0.8)
                )
                
                # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                sell_conditions = (
                    (indicators['sma_3'] < indicators['sma_5']) |
                    (indicators['ema_5'] < indicators['ema_10']) |
                    (indicators['momentum_5'] < -0.01) |
                    (indicators['rsi'] > 70) |
                    (indicators['macd'] < indicators['macd_signal']) |
                    (indicators['macd_histogram'] < 0) |
                    (indicators['stoch_k'] < indicators['stoch_d']) |
                    (indicators['stoch_k'] > 80) |
                    (indicators['bb_position'] > 0.9) |
                    (indicators['volatility'] > 1.0)
                )
                
                signals[buy_conditions] = 1
                signals[sell_conditions] = -1
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
                risk_adjusted_signals = self.risk_management_system(
                    signals, prices, indicators['atr'], instrument_type, max_risk=0.025
                )
                
                # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_returns = risk_adjusted_signals.shift(1) * returns
                strategy_returns = strategy_returns.dropna()
                
                if len(strategy_returns) > 0:
                    metrics = self.calculate_risk_metrics(strategy_returns, prices)
                    results[ticker] = {
                        **metrics,
                        'instrument_type': instrument_type,
                        'max_leverage': self.max_leverage
                    }
                    print(f"  ‚úÖ {ticker}: {metrics['monthly_return']:.2f}% –≤ –º–µ—Å—è—Ü, Sharpe: {metrics['sharpe_ratio']:.2f}, VaR: {metrics['var_95']:.2f}%")
                else:
                    print(f"  ‚ö†Ô∏è {ticker}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                print(f"  ‚ùå {ticker}: –æ—à–∏–±–∫–∞ - {e}")
        
        return results
    
    def run_all_risk_managed_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
        print("üõ°Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏")
        print(f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ: {self.max_leverage}x")
        print("=" * 80)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self.load_all_data()
        
        if not data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategies_results = {}
        self.strategies_results['Conservative Strategy'] = self.test_conservative_strategy(data)
        self.strategies_results['Balanced Strategy'] = self.test_balanced_strategy(data)
        self.strategies_results['Aggressive Risk-Managed Strategy'] = self.test_aggressive_risk_managed_strategy(data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_risk_managed_results()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_risk_managed_results()
    
    def analyze_risk_managed_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
        print("\n" + "=" * 80)
        print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ò–°–ö–ê–ú–ò")
        print("=" * 80)
        
        for strategy_name, results in self.strategies_results.items():
            print(f"\nüéØ {strategy_name}:")
            
            if not results:
                print("  ‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                continue
            
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            monthly_returns = [r['monthly_return'] for r in results.values()]
            sharpe_ratios = [r['sharpe_ratio'] for r in results.values()]
            max_drawdowns = [r['max_drawdown'] for r in results.values()]
            var_95s = [r['var_95'] for r in results.values()]
            win_rates = [r['win_rate'] for r in results.values()]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            avg_monthly_return = np.mean(monthly_returns)
            max_monthly_return = np.max(monthly_returns)
            avg_sharpe = np.mean(sharpe_ratios)
            avg_drawdown = np.mean(max_drawdowns)
            avg_var = np.mean(var_95s)
            avg_win_rate = np.mean(win_rates)
            
            print(f"  üìà –°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {avg_monthly_return:.2f}%")
            print(f"  üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {max_monthly_return:.2f}%")
            print(f"  üìä –°—Ä–µ–¥–Ω–∏–π Sharpe Ratio: {avg_sharpe:.2f}")
            print(f"  üìâ –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {avg_drawdown:.2f}%")
            print(f"  üõ°Ô∏è –°—Ä–µ–¥–Ω–∏–π VaR (95%): {avg_var:.2f}%")
            print(f"  üéØ –°—Ä–µ–¥–Ω–∏–π Win Rate: {avg_win_rate:.2f}%")
            
            # –õ—É—á—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            best_instrument = max(results.items(), key=lambda x: x[1]['monthly_return'])
            print(f"  üèÜ –õ—É—á—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {best_instrument[0]} ({best_instrument[1]['monthly_return']:.2f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏ 20%
            goal_achieved = sum(1 for r in monthly_returns if r >= 20)
            print(f"  üéØ –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ 20%: {goal_achieved}/{len(monthly_returns)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            stock_results = [r for r in results.values() if r['instrument_type'] == 'stock']
            futures_results = [r for r in results.values() if r['instrument_type'] == 'futures']
            
            if stock_results:
                stock_returns = [r['monthly_return'] for r in stock_results]
                print(f"  üìä –ê–∫—Ü–∏–∏: {np.mean(stock_returns):.2f}% –≤ –º–µ—Å—è—Ü ({len(stock_results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)")
            
            if futures_results:
                futures_returns = [r['monthly_return'] for r in futures_results]
                print(f"  üìà –§—å—é—á–µ—Ä—Å—ã: {np.mean(futures_returns):.2f}% –≤ –º–µ—Å—è—Ü ({len(futures_results)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)")
    
    def save_risk_managed_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            'timestamp': datetime.now().isoformat(),
            'data_source': 'T-Bank API + Expanded Futures Portfolio',
            'test_period': '252 days (1 year)',
            'max_leverage': self.max_leverage,
            'risk_management': {
                'max_position_size': '10% of capital',
                'stop_loss_atr': '1.5-2.0x ATR',
                'take_profit_atr': '2.5-3.0x ATR',
                'max_risk_per_trade': '1.5-2.5%'
            },
            'strategies': self.strategies_results,
            'summary': {}
        }
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        for strategy_name, results in self.strategies_results.items():
            if results:
                monthly_returns = [r['monthly_return'] for r in results.values()]
                sharpe_ratios = [r['sharpe_ratio'] for r in results.values()]
                max_drawdowns = [r['max_drawdown'] for r in results.values()]
                var_95s = [r['var_95'] for r in results.values()]
                
                report['summary'][strategy_name] = {
                    'avg_monthly_return': round(np.mean(monthly_returns), 2),
                    'max_monthly_return': round(np.max(monthly_returns), 2),
                    'avg_sharpe_ratio': round(np.mean(sharpe_ratios), 2),
                    'avg_max_drawdown': round(np.mean(max_drawdowns), 2),
                    'avg_var_95': round(np.mean(var_95s), 2),
                    'instruments_tested': len(results),
                    'goal_20_percent_achieved': sum(1 for r in monthly_returns if r >= 20)
                }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        with open(f'{self.results_dir}/risk_managed_strategies.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.create_risk_managed_text_report(report)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.results_dir}/")
    
    def create_risk_managed_text_report(self, report):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
        with open(f'{self.results_dir}/risk_managed_strategies.txt', 'w', encoding='utf-8') as f:
            f.write("üõ°Ô∏è –°–¢–†–ê–¢–ï–ì–ò–ò –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ò–°–ö–ê–ú–ò\n")
            f.write("=" * 80 + "\n")
            f.write(f"–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {report['timestamp']}\n")
            f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {report['data_source']}\n")
            f.write(f"–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {report['test_period']}\n")
            f.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ: {report['max_leverage']}x\n\n")
            
            f.write("üõ°Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:\n")
            for key, value in report['risk_management'].items():
                f.write(f"  ‚Ä¢ {key}: {value}\n")
            f.write("\n")
            
            for strategy_name, summary in report['summary'].items():
                f.write(f"üéØ {strategy_name}:\n")
                f.write(f"  üìà –°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {summary['avg_monthly_return']}%\n")
                f.write(f"  üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {summary['max_monthly_return']}%\n")
                f.write(f"  üìä –°—Ä–µ–¥–Ω–∏–π Sharpe Ratio: {summary['avg_sharpe_ratio']}\n")
                f.write(f"  üìâ –°—Ä–µ–¥–Ω—è—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {summary['avg_max_drawdown']}%\n")
                f.write(f"  üõ°Ô∏è –°—Ä–µ–¥–Ω–∏–π VaR (95%): {summary['avg_var_95']}%\n")
                f.write(f"  üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {summary['instruments_tested']}\n")
                f.write(f"  üéØ –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ 20%: {summary['goal_20_percent_achieved']}\n\n")
            
            f.write("=" * 80 + "\n")
            f.write("üõ°Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ò–°–ö–ê–ú–ò –ó–ê–í–ï–†–®–ï–ù–û!\n")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = RiskManagedStrategyTester()
    tester.run_all_risk_managed_tests()
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ò–°–ö–ê–ú–ò –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backtesting/results/")
    print(f"üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ: {tester.max_leverage}x")

if __name__ == "__main__":
    main()
