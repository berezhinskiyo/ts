#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
"""

import asyncio
import aiohttp
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
import os
try:
    from config.parameters.config import Config
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ config –Ω–µ –Ω–∞–π–¥–µ–Ω
    class Config:
        TELEGRAM_BOT_TOKEN = None
        TELEGRAM_CHAT_ID = None

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ os.environ
# –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ env_loader
import os
if not Config.TELEGRAM_BOT_TOKEN:
    Config.TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not Config.TELEGRAM_CHAT_ID:
    Config.TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class TradeNotification:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
    symbol: str
    action: str  # 'BUY' –∏–ª–∏ 'SELL'
    quantity: int
    price: float
    amount: float
    strategy: str
    timestamp: str
    pnl: Optional[float] = None
    reason: Optional[str] = None  # 'STOP_LOSS', 'TAKE_PROFIT', 'SIGNAL'
    confidence: Optional[float] = None

@dataclass
class PortfolioUpdate:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    total_value: float
    total_pnl: float
    total_pnl_pct: float
    positions_count: int
    timestamp: str
    daily_pnl: float = 0.0
    daily_pnl_pct: float = 0.0

@dataclass
class AlertNotification:
    """–ê–ª–µ—Ä—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    alert_type: str  # 'RISK', 'PERFORMANCE', 'ERROR', 'INFO'
    title: str
    message: str
    timestamp: str
    severity: str = 'INFO'  # 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, bot_token: str = None, chat_id: str = None):
        self.bot_token = bot_token or Config.TELEGRAM_BOT_TOKEN
        self.chat_id = chat_id or Config.TELEGRAM_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.session = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.emoji_map = {
            'BUY': 'üü¢',
            'SELL': 'üî¥',
            'STOP_LOSS': 'üõë',
            'TAKE_PROFIT': 'üí∞',
            'SIGNAL': 'üìä',
            'RISK': '‚ö†Ô∏è',
            'PERFORMANCE': 'üìà',
            'ERROR': '‚ùå',
            'INFO': '‚ÑπÔ∏è',
            'SUCCESS': '‚úÖ',
            'WARNING': '‚ö†Ô∏è',
            'CRITICAL': 'üö®'
        }
        
        # –õ–∏–º–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.rate_limit = {
            'trades': 10,  # –ú–∞–∫—Å–∏–º—É–º 10 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–¥–µ–ª–∫–∞—Ö –≤ –º–∏–Ω—É—Ç—É
            'portfolio': 1,  # –ú–∞–∫—Å–∏–º—É–º 1 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –º–∏–Ω—É—Ç—É
            'alerts': 5   # –ú–∞–∫—Å–∏–º—É–º 5 –∞–ª–µ—Ä—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        }
        
        self.last_sent = {
            'trades': [],
            'portfolio': None,
            'alerts': []
        }
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    def _check_rate_limit(self, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        now = datetime.now()
        
        if notification_type == 'trades':
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
            self.last_sent['trades'] = [
                timestamp for timestamp in self.last_sent['trades']
                if (now - timestamp).seconds < 60
            ]
            return len(self.last_sent['trades']) < self.rate_limit['trades']
        
        elif notification_type == 'portfolio':
            if self.last_sent['portfolio'] is None:
                return True
            return (now - self.last_sent['portfolio']).seconds >= 60
        
        elif notification_type == 'alerts':
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
            self.last_sent['alerts'] = [
                timestamp for timestamp in self.last_sent['alerts']
                if (now - timestamp).seconds < 60
            ]
            return len(self.last_sent['alerts']) < self.rate_limit['alerts']
        
        return True
    
    def _update_rate_limit(self, notification_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ª–∏–º–∏—Ç–æ–≤"""
        now = datetime.now()
        
        if notification_type == 'trades':
            self.last_sent['trades'].append(now)
        elif notification_type == 'portfolio':
            self.last_sent['portfolio'] = now
        elif notification_type == 'alerts':
            self.last_sent['alerts'].append(now)
    
    def _format_trade_message(self, trade: TradeNotification) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
        emoji = self.emoji_map.get(trade.action, 'üìä')
        reason_emoji = self.emoji_map.get(trade.reason, '') if trade.reason else ''
        
        message = f"{emoji} **{trade.action}** {trade.symbol}\n"
        message += f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {trade.strategy}\n"
        message += f"üí∞ –¶–µ–Ω–∞: {trade.price:.2f}‚ÇΩ\n"
        message += f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trade.quantity} —à—Ç.\n"
        message += f"üíµ –°—É–º–º–∞: {trade.amount:,.0f}‚ÇΩ\n"
        
        if trade.pnl is not None:
            pnl_emoji = "üìà" if trade.pnl >= 0 else "üìâ"
            message += f"{pnl_emoji} P&L: {trade.pnl:+,.0f}‚ÇΩ\n"
        
        if trade.reason:
            message += f"{reason_emoji} –ü—Ä–∏—á–∏–Ω–∞: {trade.reason}\n"
        
        if trade.confidence is not None:
            confidence_emoji = "üéØ" if trade.confidence > 0.7 else "‚ö†Ô∏è"
            message += f"{confidence_emoji} –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trade.confidence:.1%}\n"
        
        message += f"üïê –í—Ä–µ–º—è: {trade.timestamp}"
        
        return message
    
    def _format_portfolio_message(self, portfolio: PortfolioUpdate) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
        pnl_emoji = "üìà" if portfolio.total_pnl >= 0 else "üìâ"
        daily_emoji = "üìà" if portfolio.daily_pnl >= 0 else "üìâ"
        
        message = f"üìä **–û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–†–¢–§–ï–õ–Ø**\n\n"
        message += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {portfolio.total_value:,.0f}‚ÇΩ\n"
        message += f"{pnl_emoji} –û–±—â–∏–π P&L: {portfolio.total_pnl:+,.0f}‚ÇΩ ({portfolio.total_pnl_pct:+.2f}%)\n"
        message += f"{daily_emoji} –î–Ω–µ–≤–Ω–æ–π P&L: {portfolio.daily_pnl:+,.0f}‚ÇΩ ({portfolio.daily_pnl_pct:+.2f}%)\n"
        message += f"üì¶ –ü–æ–∑–∏—Ü–∏–π: {portfolio.positions_count}\n"
        message += f"üïê –í—Ä–µ–º—è: {portfolio.timestamp}"
        
        return message
    
    def _format_alert_message(self, alert: AlertNotification) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        emoji = self.emoji_map.get(alert.alert_type, '‚ÑπÔ∏è')
        severity_emoji = self.emoji_map.get(alert.severity, '')
        
        message = f"{emoji} **{alert.title}**\n"
        message += f"{severity_emoji} –¢–∏–ø: {alert.alert_type}\n"
        message += f"üìù {alert.message}\n"
        message += f"üïê –í—Ä–µ–º—è: {alert.timestamp}"
        
        return message
    
    async def _send_message(self, text: str, parse_mode: str = "Markdown") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            logger.warning("Telegram bot token –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        if not self.session:
            logger.error("HTTP —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': parse_mode
            }
            
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    async def send_trade_notification(self, trade: TradeNotification) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""
        if not self._check_rate_limit('trades'):
            logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–¥–µ–ª–∫–∞—Ö")
            return False
        
        message = self._format_trade_message(trade)
        success = await self._send_message(message)
        
        if success:
            self._update_rate_limit('trades')
        
        return success
    
    async def send_portfolio_update(self, portfolio: PortfolioUpdate) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        if not self._check_rate_limit('portfolio'):
            logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            return False
        
        message = self._format_portfolio_message(portfolio)
        success = await self._send_message(message)
        
        if success:
            self._update_rate_limit('portfolio')
        
        return success
    
    async def send_alert(self, alert: AlertNotification) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        if not self._check_rate_limit('alerts'):
            logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")
            return False
        
        message = self._format_alert_message(alert)
        success = await self._send_message(message)
        
        if success:
            self._update_rate_limit('alerts')
        
        return success
    
    async def send_daily_summary(self, trades: List[TradeNotification], 
                                portfolio: PortfolioUpdate) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        if not trades:
            return False
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_trades = len(trades)
        buy_trades = len([t for t in trades if t.action == 'BUY'])
        sell_trades = len([t for t in trades if t.action == 'SELL'])
        total_pnl = sum(t.pnl or 0 for t in trades)
        profitable_trades = len([t for t in trades if t.pnl and t.pnl > 0])
        
        message = f"üìä **–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê**\n\n"
        message += f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
        message += f"üü¢ –ü–æ–∫—É–ø–æ–∫: {buy_trades}\n"
        message += f"üî¥ –ü—Ä–æ–¥–∞–∂: {sell_trades}\n"
        message += f"üí∞ –û–±—â–∏–π P&L: {total_pnl:+,.0f}‚ÇΩ\n"
        message += f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profitable_trades}/{total_trades}\n"
        message += f"üìä –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio.total_value:,.0f}‚ÇΩ\n"
        message += f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        return await self._send_message(message)

class TradingNotifier:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤–ª–µ"""
    
    def __init__(self, bot_token: str = None, chat_id: str = None):
        self.notifier = TelegramNotifier(bot_token, chat_id)
        self.trades_history = []
        self.portfolio_history = []
    
    async def notify_trade(self, symbol: str, action: str, quantity: int, 
                          price: float, strategy: str, pnl: float = None,
                          reason: str = None, confidence: float = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        trade = TradeNotification(
            symbol=symbol,
            action=action,
            quantity=quantity,
            price=price,
            amount=quantity * price,
            strategy=strategy,
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            pnl=pnl,
            reason=reason,
            confidence=confidence
        )
        
        self.trades_history.append(trade)
        
        async with self.notifier as notifier:
            await notifier.send_trade_notification(trade)
    
    async def notify_portfolio_update(self, total_value: float, total_pnl: float,
                                    positions_count: int, daily_pnl: float = 0.0):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio = PortfolioUpdate(
            total_value=total_value,
            total_pnl=total_pnl,
            total_pnl_pct=(total_pnl / (total_value - total_pnl)) * 100 if total_value > total_pnl else 0,
            positions_count=positions_count,
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            daily_pnl=daily_pnl,
            daily_pnl_pct=(daily_pnl / total_value) * 100 if total_value > 0 else 0
        )
        
        self.portfolio_history.append(portfolio)
        
        async with self.notifier as notifier:
            await notifier.send_portfolio_update(portfolio)
    
    async def notify_alert(self, alert_type: str, title: str, message: str,
                          severity: str = 'INFO'):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–ª–µ—Ä—Ç–µ"""
        alert = AlertNotification(
            alert_type=alert_type,
            title=title,
            message=message,
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            severity=severity
        )
        
        async with self.notifier as notifier:
            await notifier.send_alert(alert)
    
    async def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        if not self.trades_history or not self.portfolio_history:
            return False
        
        latest_portfolio = self.portfolio_history[-1]
        
        async with self.notifier as notifier:
            return await notifier.send_daily_summary(self.trades_history, latest_portfolio)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç–µ–ª—å
    notifier = TradingNotifier()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
    await notifier.notify_trade(
        symbol="GAZP",
        action="BUY",
        quantity=100,
        price=150.50,
        strategy="ARIMA",
        confidence=0.85
    )
    
    await notifier.notify_trade(
        symbol="GAZP",
        action="SELL",
        quantity=100,
        price=152.30,
        strategy="ARIMA",
        pnl=180.0,
        reason="TAKE_PROFIT"
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    await notifier.notify_portfolio_update(
        total_value=105000,
        total_pnl=5000,
        positions_count=3,
        daily_pnl=180.0
    )
    
    # –ê–ª–µ—Ä—Ç
    await notifier.notify_alert(
        alert_type="RISK",
        title="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∏—Å–∫–∞",
        message="–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 15%",
        severity="HIGH"
    )
    
    # –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
    await notifier.send_daily_summary()

if __name__ == "__main__":
    asyncio.run(main())
