#!/usr/bin/env python3
"""
Simple Trading System Launcher
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import json
from datetime import datetime

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üöÄ TRADING SYSTEM LAUNCHER

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 simple_launcher.py <command> [strategy]

–ö–æ–º–∞–Ω–¥—ã:
    run <strategy>     - –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    backtest [engine]  - –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
    monitor           - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    optimize [strategy] - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    retrain [strategy]  - –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π
    status            - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
    help              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    ml               - –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    aggressive       - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    combined         - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    simplified       - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

–î–≤–∏–∂–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞:
    quick           - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    advanced        - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç
    real_data       - –¢–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    working         - –†–∞–±–æ—á–∏–π —Ç–µ—Å—Ç

–ü—Ä–∏–º–µ—Ä—ã:
    python3 simple_launcher.py run ml
    python3 simple_launcher.py backtest quick
    python3 simple_launcher.py monitor
    python3 simple_launcher.py optimize aggressive
    python3 simple_launcher.py retrain ml
    python3 simple_launcher.py status
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ print
    with open('help_output.txt', 'w', encoding='utf-8') as f:
        f.write(help_text)
    
    return help_text

def run_strategy(strategy_name):
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    strategies = {
        'ml': 'strategies/ml/ml_trading_system.py',
        'aggressive': 'strategies/aggressive/aggressive_intraday_system.py',
        'combined': 'strategies/combined/full_trading_system.py',
        'simplified': 'strategies/combined/simplified_full_system.py'
    }
    
    if strategy_name not in strategies:
        result = f"‚ùå Unknown strategy: {strategy_name}\nAvailable: {list(strategies.keys())}"
    else:
        strategy_path = strategies[strategy_name]
        if os.path.exists(strategy_path):
            result = f"‚úÖ Starting {strategy_name} strategy: {strategy_path}"
        else:
            result = f"‚ùå Strategy file not found: {strategy_path}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('strategy_result.txt', 'w', encoding='utf-8') as f:
        f.write(result)
    
    return result

def run_backtest(engine='quick'):
    """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    engines = {
        'quick': 'backtesting/engines/quick_test.py',
        'advanced': 'backtesting/engines/advanced_test.py',
        'real_data': 'backtesting/engines/real_data_test.py',
        'working': 'backtesting/engines/working_test.py'
    }
    
    if engine not in engines:
        result = f"‚ùå Unknown engine: {engine}\nAvailable: {list(engines.keys())}"
    else:
        engine_path = engines[engine]
        if os.path.exists(engine_path):
            result = f"‚úÖ Running {engine} backtest: {engine_path}"
        else:
            result = f"‚ùå Engine file not found: {engine_path}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('backtest_result.txt', 'w', encoding='utf-8') as f:
        f.write(result)
    
    return result

def run_monitoring():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    result = "üìä Starting monitoring system..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_files = [
        'monitoring/metrics/quality_monitor.py',
        'monitoring/logs/',
        'monitoring/alerts/'
    ]
    
    for file_path in monitoring_files:
        if os.path.exists(file_path):
            result += f"\n‚úÖ Found: {file_path}"
        else:
            result += f"\n‚ùå Missing: {file_path}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('monitoring_result.txt', 'w', encoding='utf-8') as f:
        f.write(result)
    
    return result

def run_optimization(strategy='aggressive'):
    """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    if strategy == 'aggressive':
        optimizer_path = 'strategies/aggressive/parameter_optimizer.py'
        if os.path.exists(optimizer_path):
            result = f"üîß Running optimization for {strategy}: {optimizer_path}"
        else:
            result = f"‚ùå Optimizer not found: {optimizer_path}"
    else:
        result = f"‚ùå Optimization not implemented for {strategy}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('optimization_result.txt', 'w', encoding='utf-8') as f:
        f.write(result)
    
    return result

def run_retraining(strategy='ml'):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
    if strategy == 'ml':
        retrain_path = 'strategies/ml/retrain_scheduler.py'
        if os.path.exists(retrain_path):
            result = f"ü§ñ Running retraining for {strategy}: {retrain_path}"
        else:
            result = f"‚ùå Retrainer not found: {retrain_path}"
    else:
        result = f"‚ùå Retraining not implemented for {strategy}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('retraining_result.txt', 'w', encoding='utf-8') as f:
        f.write(result)
    
    return result

def check_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    status = {
        'timestamp': datetime.now().isoformat(),
        'strategies': {},
        'directories': {},
        'files': {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    strategies = {
        'ml': 'strategies/ml/ml_trading_system.py',
        'aggressive': 'strategies/aggressive/aggressive_intraday_system.py',
        'combined': 'strategies/combined/full_trading_system.py',
        'simplified': 'strategies/combined/simplified_full_system.py'
    }
    
    for name, path in strategies.items():
        status['strategies'][name] = {
            'path': path,
            'exists': os.path.exists(path),
            'size': os.path.getsize(path) if os.path.exists(path) else 0
        }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    directories = [
        'strategies', 'backtesting', 'monitoring', 'data', 'config', 'docs'
    ]
    
    for dir_name in directories:
        status['directories'][dir_name] = {
            'exists': os.path.exists(dir_name),
            'is_directory': os.path.isdir(dir_name) if os.path.exists(dir_name) else False
        }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    key_files = [
        'config/requirements.txt',
        'config/environments/.env',
        'README.md'
    ]
    
    for file_path in key_files:
        status['files'][file_path] = {
            'exists': os.path.exists(file_path),
            'size': os.path.getsize(file_path) if os.path.exists(file_path) else 0
        }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    status_file = f'system_status_{timestamp}.json'
    
    with open(status_file, 'w', encoding='utf-8') as f:
        json.dump(status, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    report = f"""
üìã SYSTEM STATUS REPORT
{'='*50}
Timestamp: {status['timestamp']}

STRATEGIES:
"""
    
    for name, info in status['strategies'].items():
        status_icon = "‚úÖ" if info['exists'] else "‚ùå"
        report += f"{status_icon} {name}: {info['path']}\n"
    
    report += "\nDIRECTORIES:\n"
    for name, info in status['directories'].items():
        status_icon = "‚úÖ" if info['exists'] else "‚ùå"
        report += f"{status_icon} {name}/\n"
    
    report += "\nKEY FILES:\n"
    for path, info in status['files'].items():
        status_icon = "‚úÖ" if info['exists'] else "‚ùå"
        report += f"{status_icon} {path}\n"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    with open('status_report.txt', 'w', encoding='utf-8') as f:
        f.write(report)
    
    return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        show_help()
        return
    
    command = sys.argv[1]
    strategy = sys.argv[2] if len(sys.argv) > 2 else None
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if command == 'help':
        show_help()
    elif command == 'run':
        if strategy:
            run_strategy(strategy)
        else:
            result = "‚ùå Please specify strategy: ml, aggressive, combined, simplified"
            with open('error.txt', 'w', encoding='utf-8') as f:
                f.write(result)
    elif command == 'backtest':
        engine = strategy if strategy else 'quick'
        run_backtest(engine)
    elif command == 'monitor':
        run_monitoring()
    elif command == 'optimize':
        strategy_name = strategy if strategy else 'aggressive'
        run_optimization(strategy_name)
    elif command == 'retrain':
        strategy_name = strategy if strategy else 'ml'
        run_retraining(strategy_name)
    elif command == 'status':
        check_status()
    else:
        result = f"‚ùå Unknown command: {command}\nUse 'help' for available commands"
        with open('error.txt', 'w', encoding='utf-8') as f:
            f.write(result)

if __name__ == "__main__":
    main()

